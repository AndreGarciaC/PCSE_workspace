
Driver_316BDG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b8  080038b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038c0  080038c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000104  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0c0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019f6  00000000  00000000  0002e0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0002faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  00030868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ca1  00000000  00000000  00031540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4fb  00000000  00000000  000541e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d29  00000000  00000000  000626dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a405  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a4c  00000000  00000000  0013a458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003868 	.word	0x08003868

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003868 	.word	0x08003868

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_d2uiz>:
 8000574:	004a      	lsls	r2, r1, #1
 8000576:	d211      	bcs.n	800059c <__aeabi_d2uiz+0x28>
 8000578:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800057c:	d211      	bcs.n	80005a2 <__aeabi_d2uiz+0x2e>
 800057e:	d50d      	bpl.n	800059c <__aeabi_d2uiz+0x28>
 8000580:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000584:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000588:	d40e      	bmi.n	80005a8 <__aeabi_d2uiz+0x34>
 800058a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800058e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000592:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000596:	fa23 f002 	lsr.w	r0, r3, r2
 800059a:	4770      	bx	lr
 800059c:	f04f 0000 	mov.w	r0, #0
 80005a0:	4770      	bx	lr
 80005a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005a6:	d102      	bne.n	80005ae <__aeabi_d2uiz+0x3a>
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ac:	4770      	bx	lr
 80005ae:	f04f 0000 	mov.w	r0, #0
 80005b2:	4770      	bx	lr

080005b4 <__aeabi_uldivmod>:
 80005b4:	b953      	cbnz	r3, 80005cc <__aeabi_uldivmod+0x18>
 80005b6:	b94a      	cbnz	r2, 80005cc <__aeabi_uldivmod+0x18>
 80005b8:	2900      	cmp	r1, #0
 80005ba:	bf08      	it	eq
 80005bc:	2800      	cmpeq	r0, #0
 80005be:	bf1c      	itt	ne
 80005c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005c8:	f000 b974 	b.w	80008b4 <__aeabi_idiv0>
 80005cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80005d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d4:	f000 f806 	bl	80005e4 <__udivmoddi4>
 80005d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005e0:	b004      	add	sp, #16
 80005e2:	4770      	bx	lr

080005e4 <__udivmoddi4>:
 80005e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e8:	9d08      	ldr	r5, [sp, #32]
 80005ea:	4604      	mov	r4, r0
 80005ec:	468e      	mov	lr, r1
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d14d      	bne.n	800068e <__udivmoddi4+0xaa>
 80005f2:	428a      	cmp	r2, r1
 80005f4:	4694      	mov	ip, r2
 80005f6:	d969      	bls.n	80006cc <__udivmoddi4+0xe8>
 80005f8:	fab2 f282 	clz	r2, r2
 80005fc:	b152      	cbz	r2, 8000614 <__udivmoddi4+0x30>
 80005fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000602:	f1c2 0120 	rsb	r1, r2, #32
 8000606:	fa20 f101 	lsr.w	r1, r0, r1
 800060a:	fa0c fc02 	lsl.w	ip, ip, r2
 800060e:	ea41 0e03 	orr.w	lr, r1, r3
 8000612:	4094      	lsls	r4, r2
 8000614:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000618:	0c21      	lsrs	r1, r4, #16
 800061a:	fbbe f6f8 	udiv	r6, lr, r8
 800061e:	fa1f f78c 	uxth.w	r7, ip
 8000622:	fb08 e316 	mls	r3, r8, r6, lr
 8000626:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800062a:	fb06 f107 	mul.w	r1, r6, r7
 800062e:	4299      	cmp	r1, r3
 8000630:	d90a      	bls.n	8000648 <__udivmoddi4+0x64>
 8000632:	eb1c 0303 	adds.w	r3, ip, r3
 8000636:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800063a:	f080 811f 	bcs.w	800087c <__udivmoddi4+0x298>
 800063e:	4299      	cmp	r1, r3
 8000640:	f240 811c 	bls.w	800087c <__udivmoddi4+0x298>
 8000644:	3e02      	subs	r6, #2
 8000646:	4463      	add	r3, ip
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	b2a4      	uxth	r4, r4
 800064c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000650:	fb08 3310 	mls	r3, r8, r0, r3
 8000654:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000658:	fb00 f707 	mul.w	r7, r0, r7
 800065c:	42a7      	cmp	r7, r4
 800065e:	d90a      	bls.n	8000676 <__udivmoddi4+0x92>
 8000660:	eb1c 0404 	adds.w	r4, ip, r4
 8000664:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000668:	f080 810a 	bcs.w	8000880 <__udivmoddi4+0x29c>
 800066c:	42a7      	cmp	r7, r4
 800066e:	f240 8107 	bls.w	8000880 <__udivmoddi4+0x29c>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800067a:	1be4      	subs	r4, r4, r7
 800067c:	2600      	movs	r6, #0
 800067e:	b11d      	cbz	r5, 8000688 <__udivmoddi4+0xa4>
 8000680:	40d4      	lsrs	r4, r2
 8000682:	2300      	movs	r3, #0
 8000684:	e9c5 4300 	strd	r4, r3, [r5]
 8000688:	4631      	mov	r1, r6
 800068a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068e:	428b      	cmp	r3, r1
 8000690:	d909      	bls.n	80006a6 <__udivmoddi4+0xc2>
 8000692:	2d00      	cmp	r5, #0
 8000694:	f000 80ef 	beq.w	8000876 <__udivmoddi4+0x292>
 8000698:	2600      	movs	r6, #0
 800069a:	e9c5 0100 	strd	r0, r1, [r5]
 800069e:	4630      	mov	r0, r6
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	fab3 f683 	clz	r6, r3
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d14a      	bne.n	8000744 <__udivmoddi4+0x160>
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d302      	bcc.n	80006b8 <__udivmoddi4+0xd4>
 80006b2:	4282      	cmp	r2, r0
 80006b4:	f200 80f9 	bhi.w	80008aa <__udivmoddi4+0x2c6>
 80006b8:	1a84      	subs	r4, r0, r2
 80006ba:	eb61 0303 	sbc.w	r3, r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	469e      	mov	lr, r3
 80006c2:	2d00      	cmp	r5, #0
 80006c4:	d0e0      	beq.n	8000688 <__udivmoddi4+0xa4>
 80006c6:	e9c5 4e00 	strd	r4, lr, [r5]
 80006ca:	e7dd      	b.n	8000688 <__udivmoddi4+0xa4>
 80006cc:	b902      	cbnz	r2, 80006d0 <__udivmoddi4+0xec>
 80006ce:	deff      	udf	#255	; 0xff
 80006d0:	fab2 f282 	clz	r2, r2
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	f040 8092 	bne.w	80007fe <__udivmoddi4+0x21a>
 80006da:	eba1 010c 	sub.w	r1, r1, ip
 80006de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006e2:	fa1f fe8c 	uxth.w	lr, ip
 80006e6:	2601      	movs	r6, #1
 80006e8:	0c20      	lsrs	r0, r4, #16
 80006ea:	fbb1 f3f7 	udiv	r3, r1, r7
 80006ee:	fb07 1113 	mls	r1, r7, r3, r1
 80006f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006f6:	fb0e f003 	mul.w	r0, lr, r3
 80006fa:	4288      	cmp	r0, r1
 80006fc:	d908      	bls.n	8000710 <__udivmoddi4+0x12c>
 80006fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000702:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000706:	d202      	bcs.n	800070e <__udivmoddi4+0x12a>
 8000708:	4288      	cmp	r0, r1
 800070a:	f200 80cb 	bhi.w	80008a4 <__udivmoddi4+0x2c0>
 800070e:	4643      	mov	r3, r8
 8000710:	1a09      	subs	r1, r1, r0
 8000712:	b2a4      	uxth	r4, r4
 8000714:	fbb1 f0f7 	udiv	r0, r1, r7
 8000718:	fb07 1110 	mls	r1, r7, r0, r1
 800071c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000720:	fb0e fe00 	mul.w	lr, lr, r0
 8000724:	45a6      	cmp	lr, r4
 8000726:	d908      	bls.n	800073a <__udivmoddi4+0x156>
 8000728:	eb1c 0404 	adds.w	r4, ip, r4
 800072c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000730:	d202      	bcs.n	8000738 <__udivmoddi4+0x154>
 8000732:	45a6      	cmp	lr, r4
 8000734:	f200 80bb 	bhi.w	80008ae <__udivmoddi4+0x2ca>
 8000738:	4608      	mov	r0, r1
 800073a:	eba4 040e 	sub.w	r4, r4, lr
 800073e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000742:	e79c      	b.n	800067e <__udivmoddi4+0x9a>
 8000744:	f1c6 0720 	rsb	r7, r6, #32
 8000748:	40b3      	lsls	r3, r6
 800074a:	fa22 fc07 	lsr.w	ip, r2, r7
 800074e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000752:	fa20 f407 	lsr.w	r4, r0, r7
 8000756:	fa01 f306 	lsl.w	r3, r1, r6
 800075a:	431c      	orrs	r4, r3
 800075c:	40f9      	lsrs	r1, r7
 800075e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000762:	fa00 f306 	lsl.w	r3, r0, r6
 8000766:	fbb1 f8f9 	udiv	r8, r1, r9
 800076a:	0c20      	lsrs	r0, r4, #16
 800076c:	fa1f fe8c 	uxth.w	lr, ip
 8000770:	fb09 1118 	mls	r1, r9, r8, r1
 8000774:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000778:	fb08 f00e 	mul.w	r0, r8, lr
 800077c:	4288      	cmp	r0, r1
 800077e:	fa02 f206 	lsl.w	r2, r2, r6
 8000782:	d90b      	bls.n	800079c <__udivmoddi4+0x1b8>
 8000784:	eb1c 0101 	adds.w	r1, ip, r1
 8000788:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800078c:	f080 8088 	bcs.w	80008a0 <__udivmoddi4+0x2bc>
 8000790:	4288      	cmp	r0, r1
 8000792:	f240 8085 	bls.w	80008a0 <__udivmoddi4+0x2bc>
 8000796:	f1a8 0802 	sub.w	r8, r8, #2
 800079a:	4461      	add	r1, ip
 800079c:	1a09      	subs	r1, r1, r0
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb1 f0f9 	udiv	r0, r1, r9
 80007a4:	fb09 1110 	mls	r1, r9, r0, r1
 80007a8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80007b0:	458e      	cmp	lr, r1
 80007b2:	d908      	bls.n	80007c6 <__udivmoddi4+0x1e2>
 80007b4:	eb1c 0101 	adds.w	r1, ip, r1
 80007b8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007bc:	d26c      	bcs.n	8000898 <__udivmoddi4+0x2b4>
 80007be:	458e      	cmp	lr, r1
 80007c0:	d96a      	bls.n	8000898 <__udivmoddi4+0x2b4>
 80007c2:	3802      	subs	r0, #2
 80007c4:	4461      	add	r1, ip
 80007c6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007ca:	fba0 9402 	umull	r9, r4, r0, r2
 80007ce:	eba1 010e 	sub.w	r1, r1, lr
 80007d2:	42a1      	cmp	r1, r4
 80007d4:	46c8      	mov	r8, r9
 80007d6:	46a6      	mov	lr, r4
 80007d8:	d356      	bcc.n	8000888 <__udivmoddi4+0x2a4>
 80007da:	d053      	beq.n	8000884 <__udivmoddi4+0x2a0>
 80007dc:	b15d      	cbz	r5, 80007f6 <__udivmoddi4+0x212>
 80007de:	ebb3 0208 	subs.w	r2, r3, r8
 80007e2:	eb61 010e 	sbc.w	r1, r1, lr
 80007e6:	fa01 f707 	lsl.w	r7, r1, r7
 80007ea:	fa22 f306 	lsr.w	r3, r2, r6
 80007ee:	40f1      	lsrs	r1, r6
 80007f0:	431f      	orrs	r7, r3
 80007f2:	e9c5 7100 	strd	r7, r1, [r5]
 80007f6:	2600      	movs	r6, #0
 80007f8:	4631      	mov	r1, r6
 80007fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fe:	f1c2 0320 	rsb	r3, r2, #32
 8000802:	40d8      	lsrs	r0, r3
 8000804:	fa0c fc02 	lsl.w	ip, ip, r2
 8000808:	fa21 f303 	lsr.w	r3, r1, r3
 800080c:	4091      	lsls	r1, r2
 800080e:	4301      	orrs	r1, r0
 8000810:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000814:	fa1f fe8c 	uxth.w	lr, ip
 8000818:	fbb3 f0f7 	udiv	r0, r3, r7
 800081c:	fb07 3610 	mls	r6, r7, r0, r3
 8000820:	0c0b      	lsrs	r3, r1, #16
 8000822:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000826:	fb00 f60e 	mul.w	r6, r0, lr
 800082a:	429e      	cmp	r6, r3
 800082c:	fa04 f402 	lsl.w	r4, r4, r2
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x260>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800083a:	d22f      	bcs.n	800089c <__udivmoddi4+0x2b8>
 800083c:	429e      	cmp	r6, r3
 800083e:	d92d      	bls.n	800089c <__udivmoddi4+0x2b8>
 8000840:	3802      	subs	r0, #2
 8000842:	4463      	add	r3, ip
 8000844:	1b9b      	subs	r3, r3, r6
 8000846:	b289      	uxth	r1, r1
 8000848:	fbb3 f6f7 	udiv	r6, r3, r7
 800084c:	fb07 3316 	mls	r3, r7, r6, r3
 8000850:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000854:	fb06 f30e 	mul.w	r3, r6, lr
 8000858:	428b      	cmp	r3, r1
 800085a:	d908      	bls.n	800086e <__udivmoddi4+0x28a>
 800085c:	eb1c 0101 	adds.w	r1, ip, r1
 8000860:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000864:	d216      	bcs.n	8000894 <__udivmoddi4+0x2b0>
 8000866:	428b      	cmp	r3, r1
 8000868:	d914      	bls.n	8000894 <__udivmoddi4+0x2b0>
 800086a:	3e02      	subs	r6, #2
 800086c:	4461      	add	r1, ip
 800086e:	1ac9      	subs	r1, r1, r3
 8000870:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000874:	e738      	b.n	80006e8 <__udivmoddi4+0x104>
 8000876:	462e      	mov	r6, r5
 8000878:	4628      	mov	r0, r5
 800087a:	e705      	b.n	8000688 <__udivmoddi4+0xa4>
 800087c:	4606      	mov	r6, r0
 800087e:	e6e3      	b.n	8000648 <__udivmoddi4+0x64>
 8000880:	4618      	mov	r0, r3
 8000882:	e6f8      	b.n	8000676 <__udivmoddi4+0x92>
 8000884:	454b      	cmp	r3, r9
 8000886:	d2a9      	bcs.n	80007dc <__udivmoddi4+0x1f8>
 8000888:	ebb9 0802 	subs.w	r8, r9, r2
 800088c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000890:	3801      	subs	r0, #1
 8000892:	e7a3      	b.n	80007dc <__udivmoddi4+0x1f8>
 8000894:	4646      	mov	r6, r8
 8000896:	e7ea      	b.n	800086e <__udivmoddi4+0x28a>
 8000898:	4620      	mov	r0, r4
 800089a:	e794      	b.n	80007c6 <__udivmoddi4+0x1e2>
 800089c:	4640      	mov	r0, r8
 800089e:	e7d1      	b.n	8000844 <__udivmoddi4+0x260>
 80008a0:	46d0      	mov	r8, sl
 80008a2:	e77b      	b.n	800079c <__udivmoddi4+0x1b8>
 80008a4:	3b02      	subs	r3, #2
 80008a6:	4461      	add	r1, ip
 80008a8:	e732      	b.n	8000710 <__udivmoddi4+0x12c>
 80008aa:	4630      	mov	r0, r6
 80008ac:	e709      	b.n	80006c2 <__udivmoddi4+0xde>
 80008ae:	4464      	add	r4, ip
 80008b0:	3802      	subs	r0, #2
 80008b2:	e742      	b.n	800073a <__udivmoddi4+0x156>

080008b4 <__aeabi_idiv0>:
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop

080008b8 <PrintString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PrintString( const char *pcString )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff fc93 	bl	80001ec <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	230a      	movs	r3, #10
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <PrintString+0x24>)
 80008d0:	f002 fc29 	bl	8003126 <HAL_UART_Transmit>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000c8 	.word	0x200000c8

080008e0 <getAngle>:

double getAngle( uint16_t _sample)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]
	double ans;
	uint16_t angle;
	ans = (angle*360)/16383;
 80008ea:	8afb      	ldrh	r3, [r7, #22]
 80008ec:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80008f0:	fb02 f303 	mul.w	r3, r2, r3
 80008f4:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <getAngle+0x48>)
 80008f6:	fb82 1203 	smull	r1, r2, r2, r3
 80008fa:	441a      	add	r2, r3
 80008fc:	1352      	asrs	r2, r2, #13
 80008fe:	17db      	asrs	r3, r3, #31
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fdcc 	bl	80004a0 <__aeabi_i2d>
 8000908:	4602      	mov	r2, r0
 800090a:	460b      	mov	r3, r1
 800090c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return ans;
 8000910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000914:	ec43 2b17 	vmov	d7, r2, r3
}
 8000918:	eeb0 0a47 	vmov.f32	s0, s14
 800091c:	eef0 0a67 	vmov.f32	s1, s15
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	80020009 	.word	0x80020009

0800092c <isError>:

uint8_t isError(uint16_t _sample)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	_sample = _sample&0x02;
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	80fb      	strh	r3, [r7, #6]
	_sample = _sample>>1;
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	80fb      	strh	r3, [r7, #6]
	if(_sample==1)
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d104      	bne.n	8000954 <isError+0x28>
	{
		PrintString( "Error\r\n" );
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <isError+0x3c>)
 800094c:	f7ff ffb4 	bl	80008b8 <PrintString>
		return 1; //Error
 8000950:	2301      	movs	r3, #1
 8000952:	e004      	b.n	800095e <isError+0x32>
	}
	else if(_sample ==0)
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <isError+0x32>
	{
		return 0; //No error
 800095a:	2300      	movs	r3, #0
 800095c:	e7ff      	b.n	800095e <isError+0x32>
	}
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	08003880 	.word	0x08003880

0800096c <delay_us>:
void delay_us (uint16_t us)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <delay_us+0x30>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800097e:	bf00      	nop
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <delay_us+0x30>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	429a      	cmp	r2, r3
 800098a:	d3f9      	bcc.n	8000980 <delay_us+0x14>
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000080 	.word	0x20000080

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b096      	sub	sp, #88	; 0x58
 80009a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f000 fc27 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f899 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 f9a7 	bl	8000d00 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009b2:	f000 f8f5 	bl	8000ba0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80009b6:	f000 f979 	bl	8000cac <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80009ba:	f000 f927 	bl	8000c0c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //CS pin en alto por defecto
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c4:	483e      	ldr	r0, [pc, #248]	; (8000ac0 <main+0x120>)
 80009c6:	f000 ff3f 	bl	8001848 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f000 fc86 	bl	80012dc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim1);
 80009d0:	483c      	ldr	r0, [pc, #240]	; (8000ac4 <main+0x124>)
 80009d2:	f002 f86d 	bl	8002ab0 <HAL_TIM_Base_Start>
  PrintString( "START\r\n" );
 80009d6:	483c      	ldr	r0, [pc, #240]	; (8000ac8 <main+0x128>)
 80009d8:	f7ff ff6e 	bl	80008b8 <PrintString>
  while (1)
  {
	  /* USER CODE END WHILE */

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e2:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <main+0x120>)
 80009e4:	f000 ff30 	bl	8001848 <HAL_GPIO_WritePin>
	  delay_us(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ffbf 	bl	800096c <delay_us>
	  HAL_SPI_Transmit(&hspi1,(uint8_t *)&START_READ,1,100);
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	2201      	movs	r2, #1
 80009f2:	4936      	ldr	r1, [pc, #216]	; (8000acc <main+0x12c>)
 80009f4:	4836      	ldr	r0, [pc, #216]	; (8000ad0 <main+0x130>)
 80009f6:	f001 fc62 	bl	80022be <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1,(uint8_t *)&START_READ2,1,100);
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	2201      	movs	r2, #1
 80009fe:	4935      	ldr	r1, [pc, #212]	; (8000ad4 <main+0x134>)
 8000a00:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <main+0x130>)
 8000a02:	f001 fc5c 	bl	80022be <HAL_SPI_Transmit>
	  delay_us(6);
 8000a06:	2006      	movs	r0, #6
 8000a08:	f7ff ffb0 	bl	800096c <delay_us>
	  for (uint8_t i=0;i<8;i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a12:	e016      	b.n	8000a42 <main+0xa2>
	  {
		  HAL_SPI_TransmitReceive(&hspi1,(uint8_t *)&START_READ2,&Rx,1,100);
 8000a14:	1cfa      	adds	r2, r7, #3
 8000a16:	2364      	movs	r3, #100	; 0x64
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	492d      	ldr	r1, [pc, #180]	; (8000ad4 <main+0x134>)
 8000a1e:	482c      	ldr	r0, [pc, #176]	; (8000ad0 <main+0x130>)
 8000a20:	f001 fd89 	bl	8002536 <HAL_SPI_TransmitReceive>
		  spi_buffer[i]=Rx;
 8000a24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a28:	78fa      	ldrb	r2, [r7, #3]
 8000a2a:	3350      	adds	r3, #80	; 0x50
 8000a2c:	443b      	add	r3, r7
 8000a2e:	f803 2c4c 	strb.w	r2, [r3, #-76]
		  delay_us(3);
 8000a32:	2003      	movs	r0, #3
 8000a34:	f7ff ff9a 	bl	800096c <delay_us>
	  for (uint8_t i=0;i<8;i++)
 8000a38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d9e4      	bls.n	8000a14 <main+0x74>
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <main+0x120>)
 8000a52:	f000 fef9 	bl	8001848 <HAL_GPIO_WritePin>
	  sample = spi_buffer[1]&0xFF;
 8000a56:	797b      	ldrb	r3, [r7, #5]
 8000a58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  sample|= (spi_buffer[0]&0xFF) << 8;
 8000a5c:	793b      	ldrb	r3, [r7, #4]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  if(isError(sample)==0)
 8000a6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff5a 	bl	800092c <isError>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d11a      	bne.n	8000ab4 <main+0x114>
	  {
		  sample = sample>>2;
 8000a7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		  double angle = (getAngle(sample));
 8000a88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff27 	bl	80008e0 <getAngle>
 8000a92:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
		  PrintString(("Dato: "));
 8000a96:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <main+0x138>)
 8000a98:	f7ff ff0e 	bl	80008b8 <PrintString>
		  PrintString((char)angle);
 8000a9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000aa0:	f7ff fd68 	bl	8000574 <__aeabi_d2uiz>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff05 	bl	80008b8 <PrintString>
		  PrintString("\r\n");
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <main+0x13c>)
 8000ab0:	f7ff ff02 	bl	80008b8 <PrintString>
	  }

	  HAL_Delay(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab8:	f000 fc10 	bl	80012dc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000abc:	e78e      	b.n	80009dc <main+0x3c>
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	20000080 	.word	0x20000080
 8000ac8:	08003888 	.word	0x08003888
 8000acc:	0800389b 	.word	0x0800389b
 8000ad0:	20000028 	.word	0x20000028
 8000ad4:	0800389c 	.word	0x0800389c
 8000ad8:	08003890 	.word	0x08003890
 8000adc:	08003898 	.word	0x08003898

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b094      	sub	sp, #80	; 0x50
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2230      	movs	r2, #48	; 0x30
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 feb2 	bl	8003858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <SystemClock_Config+0xb8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <SystemClock_Config+0xb8>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <SystemClock_Config+0xb8>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <SystemClock_Config+0xbc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <SystemClock_Config+0xbc>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <SystemClock_Config+0xbc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fe91 	bl	800187c <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b60:	f000 f9f2 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f8f3 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b8c:	f000 f9dc 	bl	8000f48 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3750      	adds	r7, #80	; 0x50
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <MX_SPI1_Init+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bd4:	2230      	movs	r2, #48	; 0x30
 8000bd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bec:	220a      	movs	r2, #10
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_SPI1_Init+0x64>)
 8000bf2:	f001 fadb 	bl	80021ac <HAL_SPI_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bfc:	f000 f9a4 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000028 	.word	0x20000028
 8000c08:	40013000 	.word	0x40013000

08000c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <MX_TIM1_Init+0x9c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c30:	2259      	movs	r2, #89	; 0x59
 8000c32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c56:	f001 fedb 	bl	8002a10 <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c60:	f000 f972 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c72:	f001 ff85 	bl	8002b80 <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c7c:	f000 f964 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM1_Init+0x98>)
 8000c8e:	f002 f979 	bl	8002f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c98:	f000 f956 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000080 	.word	0x20000080
 8000ca8:	40010000 	.word	0x40010000

08000cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_USART3_UART_Init+0x50>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000ce4:	f002 f9ca 	bl	800307c <HAL_HalfDuplex_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cee:	f000 f92b 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000c8 	.word	0x200000c8
 8000cfc:	40004800 	.word	0x40004800

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	4b86      	ldr	r3, [pc, #536]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a85      	ldr	r2, [pc, #532]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b83      	ldr	r3, [pc, #524]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	4b7f      	ldr	r3, [pc, #508]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a7e      	ldr	r2, [pc, #504]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b7c      	ldr	r3, [pc, #496]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b78      	ldr	r3, [pc, #480]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a77      	ldr	r2, [pc, #476]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b75      	ldr	r3, [pc, #468]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b71      	ldr	r3, [pc, #452]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a70      	ldr	r2, [pc, #448]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b6e      	ldr	r3, [pc, #440]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b6a      	ldr	r3, [pc, #424]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a69      	ldr	r2, [pc, #420]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b67      	ldr	r3, [pc, #412]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a62      	ldr	r2, [pc, #392]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <MX_GPIO_Init+0x234>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dc4:	485c      	ldr	r0, [pc, #368]	; (8000f38 <MX_GPIO_Init+0x238>)
 8000dc6:	f000 fd3f 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	485b      	ldr	r0, [pc, #364]	; (8000f3c <MX_GPIO_Init+0x23c>)
 8000dd0:	f000 fd3a 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dda:	4859      	ldr	r0, [pc, #356]	; (8000f40 <MX_GPIO_Init+0x240>)
 8000ddc:	f000 fd34 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4853      	ldr	r0, [pc, #332]	; (8000f44 <MX_GPIO_Init+0x244>)
 8000df8:	f000 fb7a 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dfc:	2332      	movs	r3, #50	; 0x32
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0c:	230b      	movs	r3, #11
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	484b      	ldr	r0, [pc, #300]	; (8000f44 <MX_GPIO_Init+0x244>)
 8000e18:	f000 fb6a 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e1c:	2386      	movs	r3, #134	; 0x86
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4842      	ldr	r0, [pc, #264]	; (8000f40 <MX_GPIO_Init+0x240>)
 8000e38:	f000 fb5a 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e3c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4838      	ldr	r0, [pc, #224]	; (8000f38 <MX_GPIO_Init+0x238>)
 8000e56:	f000 fb4b 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6c:	230b      	movs	r3, #11
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4830      	ldr	r0, [pc, #192]	; (8000f38 <MX_GPIO_Init+0x238>)
 8000e78:	f000 fb3a 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e7c:	2340      	movs	r3, #64	; 0x40
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	482a      	ldr	r0, [pc, #168]	; (8000f3c <MX_GPIO_Init+0x23c>)
 8000e94:	f000 fb2c 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4824      	ldr	r0, [pc, #144]	; (8000f3c <MX_GPIO_Init+0x23c>)
 8000eac:	f000 fb20 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eb0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481c      	ldr	r0, [pc, #112]	; (8000f40 <MX_GPIO_Init+0x240>)
 8000ece:	f000 fb0f 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4816      	ldr	r0, [pc, #88]	; (8000f40 <MX_GPIO_Init+0x240>)
 8000ee8:	f000 fb02 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	480e      	ldr	r0, [pc, #56]	; (8000f40 <MX_GPIO_Init+0x240>)
 8000f06:	f000 faf3 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1c:	230b      	movs	r3, #11
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_GPIO_Init+0x23c>)
 8000f28:	f000 fae2 	bl	80014f0 <HAL_GPIO_Init>

}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020800 	.word	0x40020800

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <HAL_SPI_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12b      	bne.n	800101e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_SPI_MspInit+0x88>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_SPI_MspInit+0x88>)
 8000fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_SPI_MspInit+0x88>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_SPI_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_SPI_MspInit+0x88>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_SPI_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ffe:	2338      	movs	r3, #56	; 0x38
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100e:	2305      	movs	r3, #5
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_SPI_MspInit+0x8c>)
 800101a:	f000 fa69 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40013000 	.word	0x40013000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <HAL_TIM_Base_MspInit+0x3c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10d      	bne.n	8001062 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_TIM_Base_MspInit+0x40>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <HAL_TIM_Base_MspInit+0x40>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_TIM_Base_MspInit+0x40>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40010000 	.word	0x40010000
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <HAL_UART_MspInit+0xa8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d13d      	bne.n	8001116 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <HAL_UART_MspInit+0xac>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <HAL_UART_MspInit+0xac>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_UART_MspInit+0xac>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_UART_MspInit+0xac>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_UART_MspInit+0xac>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_UART_MspInit+0xac>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin;
 80010d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e4:	2307      	movs	r3, #7
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <HAL_UART_MspInit+0xb0>)
 80010f0:	f000 f9fe 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_TX_Pin;
 80010f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0xb0>)
 8001112:	f000 f9ed 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004800 	.word	0x40004800
 8001124:	40023800 	.word	0x40023800
 8001128:	40020c00 	.word	0x40020c00

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f000 f890 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011aa:	490e      	ldr	r1, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c0:	4c0b      	ldr	r4, [pc, #44]	; (80011f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ce:	f7ff ffd7 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f002 fb1d 	bl	8003810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff fbe3 	bl	80009a0 <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011e8:	080038c8 	.word	0x080038c8
  ldr r2, =_sbss
 80011ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011f0:	20000110 	.word	0x20000110

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_Init+0x40>)
 8001202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_Init+0x40>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_Init+0x40>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f931 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f808 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff fe92 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023c00 	.word	0x40023c00

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f93b 	bl	80014d6 <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001278:	f000 f911 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000000 	.word	0x20000000
 8001294:	20000008 	.word	0x20000008
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008
 80012c0:	2000010c 	.word	0x2000010c

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2000010c 	.word	0x2000010c

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff47 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff5c 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffb0 	bl	8001444 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e177      	b.n	80017fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8166 	bne.w	80017f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d005      	beq.n	8001542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	2b02      	cmp	r3, #2
 8001540:	d130      	bne.n	80015a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001578:	2201      	movs	r2, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 0201 	and.w	r2, r3, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d017      	beq.n	80015e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d123      	bne.n	8001634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	69b9      	ldr	r1, [r7, #24]
 8001630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80c0 	beq.w	80017f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b66      	ldr	r3, [pc, #408]	; (8001814 <HAL_GPIO_Init+0x324>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a65      	ldr	r2, [pc, #404]	; (8001814 <HAL_GPIO_Init+0x324>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b63      	ldr	r3, [pc, #396]	; (8001814 <HAL_GPIO_Init+0x324>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001692:	4a61      	ldr	r2, [pc, #388]	; (8001818 <HAL_GPIO_Init+0x328>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_GPIO_Init+0x32c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d037      	beq.n	800172e <HAL_GPIO_Init+0x23e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a57      	ldr	r2, [pc, #348]	; (8001820 <HAL_GPIO_Init+0x330>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d031      	beq.n	800172a <HAL_GPIO_Init+0x23a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a56      	ldr	r2, [pc, #344]	; (8001824 <HAL_GPIO_Init+0x334>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d02b      	beq.n	8001726 <HAL_GPIO_Init+0x236>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a55      	ldr	r2, [pc, #340]	; (8001828 <HAL_GPIO_Init+0x338>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d025      	beq.n	8001722 <HAL_GPIO_Init+0x232>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a54      	ldr	r2, [pc, #336]	; (800182c <HAL_GPIO_Init+0x33c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01f      	beq.n	800171e <HAL_GPIO_Init+0x22e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a53      	ldr	r2, [pc, #332]	; (8001830 <HAL_GPIO_Init+0x340>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x22a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_GPIO_Init+0x344>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x226>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_GPIO_Init+0x348>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x222>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a50      	ldr	r2, [pc, #320]	; (800183c <HAL_GPIO_Init+0x34c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x21e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <HAL_GPIO_Init+0x350>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x21a>
 8001706:	2309      	movs	r3, #9
 8001708:	e012      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800170a:	230a      	movs	r3, #10
 800170c:	e010      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800170e:	2308      	movs	r3, #8
 8001710:	e00e      	b.n	8001730 <HAL_GPIO_Init+0x240>
 8001712:	2307      	movs	r3, #7
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x240>
 8001716:	2306      	movs	r3, #6
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x240>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x240>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	; (8001818 <HAL_GPIO_Init+0x328>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_GPIO_Init+0x354>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a34      	ldr	r2, [pc, #208]	; (8001844 <HAL_GPIO_Init+0x354>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <HAL_GPIO_Init+0x354>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a29      	ldr	r2, [pc, #164]	; (8001844 <HAL_GPIO_Init+0x354>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <HAL_GPIO_Init+0x354>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c6:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <HAL_GPIO_Init+0x354>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_GPIO_Init+0x354>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_GPIO_Init+0x354>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae84 	bls.w	800150c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40021c00 	.word	0x40021c00
 800183c:	40022000 	.word	0x40022000
 8001840:	40022400 	.word	0x40022400
 8001844:	40013c00 	.word	0x40013c00

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001864:	e003      	b.n	800186e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	041a      	lsls	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e267      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d075      	beq.n	8001986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d00c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a6:	4b85      	ldr	r3, [pc, #532]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d112      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4b82      	ldr	r3, [pc, #520]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018be:	d10b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d05b      	beq.n	8001984 <HAL_RCC_OscConfig+0x108>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d157      	bne.n	8001984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e242      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d106      	bne.n	80018f0 <HAL_RCC_OscConfig+0x74>
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xb0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x98>
 80018fa:	4b70      	ldr	r3, [pc, #448]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a6f      	ldr	r2, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6c      	ldr	r2, [pc, #432]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xb0>
 8001914:	4b69      	ldr	r3, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a68      	ldr	r2, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a65      	ldr	r2, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fcc6 	bl	80012c4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fcc2 	bl	80012c4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e207      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xc0>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fcb2 	bl	80012c4 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fcae 	bl	80012c4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1f3      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0xe8>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001992:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b44      	ldr	r3, [pc, #272]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x152>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1c7      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCC_OscConfig+0x244>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff fc67 	bl	80012c4 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fc63 	bl	80012c4 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1a8      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4925      	ldr	r1, [pc, #148]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x244>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc46 	bl	80012c4 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fc42 	bl	80012c4 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e187      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d036      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_RCC_OscConfig+0x248>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fc26 	bl	80012c4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fc22 	bl	80012c4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e167      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x200>
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_OscConfig+0x248>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fc0f 	bl	80012c4 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	e00e      	b.n	8001ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fc0b 	bl	80012c4 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d907      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e150      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	42470000 	.word	0x42470000
 8001ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b88      	ldr	r3, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ea      	bne.n	8001aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8097 	beq.w	8001c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b7d      	ldr	r3, [pc, #500]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a7c      	ldr	r2, [pc, #496]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b7a      	ldr	r3, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b77      	ldr	r3, [pc, #476]	; (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b74      	ldr	r3, [pc, #464]	; (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a73      	ldr	r2, [pc, #460]	; (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fbcb 	bl	80012c4 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff fbc7 	bl	80012c4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e10c      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x2ea>
 8001b58:	4b64      	ldr	r3, [pc, #400]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a63      	ldr	r2, [pc, #396]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	e01c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x324>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x30c>
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a5e      	ldr	r2, [pc, #376]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a5b      	ldr	r2, [pc, #364]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x324>
 8001b88:	4b58      	ldr	r3, [pc, #352]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a57      	ldr	r2, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a54      	ldr	r2, [pc, #336]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fb8c 	bl	80012c4 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fb88 	bl	80012c4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0cb      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ee      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x334>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fb76 	bl	80012c4 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fb72 	bl	80012c4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0b5      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a38      	ldr	r2, [pc, #224]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a1 	beq.w	8001d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c1a:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d05c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d141      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fb46 	bl	80012c4 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff fb42 	bl	80012c4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e087      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	019b      	lsls	r3, r3, #6
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	491b      	ldr	r1, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fb1b 	bl	80012c4 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff fb17 	bl	80012c4 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e05c      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x416>
 8001cb0:	e054      	b.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fb04 	bl	80012c4 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff fb00 	bl	80012c4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e045      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_OscConfig+0x470>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x444>
 8001cde:	e03d      	b.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e038      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x4ec>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d028      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d121      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d28:	4013      	ands	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d111      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	3b01      	subs	r3, #1
 8001d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0cc      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b68      	ldr	r3, [pc, #416]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d90c      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b8      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc0:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	494d      	ldr	r1, [pc, #308]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d044      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d119      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e067      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4934      	ldr	r1, [pc, #208]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff fa32 	bl	80012c4 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff fa2e 	bl	80012c4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d20c      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4916      	ldr	r1, [pc, #88]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490e      	ldr	r1, [pc, #56]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef2:	f000 f821 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490a      	ldr	r1, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f992 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	080038a0 	.word	0x080038a0
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f3c:	b094      	sub	sp, #80	; 0x50
 8001f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	647b      	str	r3, [r7, #68]	; 0x44
 8001f44:	2300      	movs	r3, #0
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f48:	2300      	movs	r3, #0
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f50:	4b79      	ldr	r3, [pc, #484]	; (8002138 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d00d      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x40>
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	f200 80e1 	bhi.w	8002124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x34>
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f6a:	e0db      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b73      	ldr	r3, [pc, #460]	; (800213c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f70:	e0db      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f72:	4b73      	ldr	r3, [pc, #460]	; (8002140 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f76:	e0d8      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f82:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8e:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	099b      	lsrs	r3, r3, #6
 8001f94:	2200      	movs	r2, #0
 8001f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001faa:	4622      	mov	r2, r4
 8001fac:	462b      	mov	r3, r5
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0159      	lsls	r1, r3, #5
 8001fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fbc:	0150      	lsls	r0, r2, #5
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	1a51      	subs	r1, r2, r1
 8001fc6:	6139      	str	r1, [r7, #16]
 8001fc8:	4629      	mov	r1, r5
 8001fca:	eb63 0301 	sbc.w	r3, r3, r1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fdc:	4659      	mov	r1, fp
 8001fde:	018b      	lsls	r3, r1, #6
 8001fe0:	4651      	mov	r1, sl
 8001fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fe6:	4651      	mov	r1, sl
 8001fe8:	018a      	lsls	r2, r1, #6
 8001fea:	4651      	mov	r1, sl
 8001fec:	ebb2 0801 	subs.w	r8, r2, r1
 8001ff0:	4659      	mov	r1, fp
 8001ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800200a:	4690      	mov	r8, r2
 800200c:	4699      	mov	r9, r3
 800200e:	4623      	mov	r3, r4
 8002010:	eb18 0303 	adds.w	r3, r8, r3
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	462b      	mov	r3, r5
 8002018:	eb49 0303 	adc.w	r3, r9, r3
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800202a:	4629      	mov	r1, r5
 800202c:	024b      	lsls	r3, r1, #9
 800202e:	4621      	mov	r1, r4
 8002030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002034:	4621      	mov	r1, r4
 8002036:	024a      	lsls	r2, r1, #9
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203e:	2200      	movs	r2, #0
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
 8002042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002048:	f7fe fab4 	bl	80005b4 <__aeabi_uldivmod>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4613      	mov	r3, r2
 8002052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002054:	e058      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	2200      	movs	r2, #0
 800205e:	4618      	mov	r0, r3
 8002060:	4611      	mov	r1, r2
 8002062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
 800206c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002070:	4642      	mov	r2, r8
 8002072:	464b      	mov	r3, r9
 8002074:	f04f 0000 	mov.w	r0, #0
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	0159      	lsls	r1, r3, #5
 800207e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002082:	0150      	lsls	r0, r2, #5
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4641      	mov	r1, r8
 800208a:	ebb2 0a01 	subs.w	sl, r2, r1
 800208e:	4649      	mov	r1, r9
 8002090:	eb63 0b01 	sbc.w	fp, r3, r1
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020a8:	ebb2 040a 	subs.w	r4, r2, sl
 80020ac:	eb63 050b 	sbc.w	r5, r3, fp
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	00eb      	lsls	r3, r5, #3
 80020ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020be:	00e2      	lsls	r2, r4, #3
 80020c0:	4614      	mov	r4, r2
 80020c2:	461d      	mov	r5, r3
 80020c4:	4643      	mov	r3, r8
 80020c6:	18e3      	adds	r3, r4, r3
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	464b      	mov	r3, r9
 80020cc:	eb45 0303 	adc.w	r3, r5, r3
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020de:	4629      	mov	r1, r5
 80020e0:	028b      	lsls	r3, r1, #10
 80020e2:	4621      	mov	r1, r4
 80020e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020e8:	4621      	mov	r1, r4
 80020ea:	028a      	lsls	r2, r1, #10
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f2:	2200      	movs	r2, #0
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	61fa      	str	r2, [r7, #28]
 80020f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020fc:	f7fe fa5a 	bl	80005b4 <__aeabi_uldivmod>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4613      	mov	r3, r2
 8002106:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_GetSysClockFreq+0x200>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	3301      	adds	r3, #1
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002118:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800211a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002122:	e002      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_RCC_GetSysClockFreq+0x204>)
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800212c:	4618      	mov	r0, r3
 800212e:	3750      	adds	r7, #80	; 0x50
 8002130:	46bd      	mov	sp, r7
 8002132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	00f42400 	.word	0x00f42400
 8002140:	007a1200 	.word	0x007a1200

08002144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_RCC_GetHCLKFreq+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000000 	.word	0x20000000

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002160:	f7ff fff0 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	0a9b      	lsrs	r3, r3, #10
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4903      	ldr	r1, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	080038b0 	.word	0x080038b0

08002184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002188:	f7ff ffdc 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0b5b      	lsrs	r3, r3, #13
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	080038b0 	.word	0x080038b0

080021ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07b      	b.n	80022b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d108      	bne.n	80021d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ce:	d009      	beq.n	80021e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
 80021d6:	e005      	b.n	80021e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe fed0 	bl	8000fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	ea42 0103 	orr.w	r1, r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	0c1b      	lsrs	r3, r3, #16
 8002282:	f003 0104 	and.w	r1, r3, #4
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f003 0210 	and.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b088      	sub	sp, #32
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_SPI_Transmit+0x22>
 80022dc:	2302      	movs	r3, #2
 80022de:	e126      	b.n	800252e <HAL_SPI_Transmit+0x270>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022e8:	f7fe ffec 	bl	80012c4 <HAL_GetTick>
 80022ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
 8002300:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002302:	e10b      	b.n	800251c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_SPI_Transmit+0x52>
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002314:	e102      	b.n	800251c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2203      	movs	r2, #3
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235c:	d10f      	bne.n	800237e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800236c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800237c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d007      	beq.n	800239c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800239a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023a4:	d14b      	bne.n	800243e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_SPI_Transmit+0xf6>
 80023ae:	8afb      	ldrh	r3, [r7, #22]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d13e      	bne.n	8002432 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	881a      	ldrh	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	1c9a      	adds	r2, r3, #2
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023d8:	e02b      	b.n	8002432 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d112      	bne.n	800240e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	1c9a      	adds	r2, r3, #2
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	86da      	strh	r2, [r3, #54]	; 0x36
 800240c:	e011      	b.n	8002432 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800240e:	f7fe ff59 	bl	80012c4 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d803      	bhi.n	8002426 <HAL_SPI_Transmit+0x168>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002424:	d102      	bne.n	800242c <HAL_SPI_Transmit+0x16e>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002430:	e074      	b.n	800251c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ce      	bne.n	80023da <HAL_SPI_Transmit+0x11c>
 800243c:	e04c      	b.n	80024d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_SPI_Transmit+0x18e>
 8002446:	8afb      	ldrh	r3, [r7, #22]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d140      	bne.n	80024ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002472:	e02c      	b.n	80024ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d113      	bne.n	80024aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80024a8:	e011      	b.n	80024ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024aa:	f7fe ff0b 	bl	80012c4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d803      	bhi.n	80024c2 <HAL_SPI_Transmit+0x204>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c0:	d102      	bne.n	80024c8 <HAL_SPI_Transmit+0x20a>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024cc:	e026      	b.n	800251c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1cd      	bne.n	8002474 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	6839      	ldr	r1, [r7, #0]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fa55 	bl	800298c <SPI_EndRxTxTransaction>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	77fb      	strb	r3, [r7, #31]
 8002518:	e000      	b.n	800251c <HAL_SPI_Transmit+0x25e>
  }

error:
 800251a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800252c:	7ffb      	ldrb	r3, [r7, #31]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b08c      	sub	sp, #48	; 0x30
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_SPI_TransmitReceive+0x26>
 8002558:	2302      	movs	r3, #2
 800255a:	e18a      	b.n	8002872 <HAL_SPI_TransmitReceive+0x33c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002564:	f7fe feae 	bl	80012c4 <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800257e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002582:	2b01      	cmp	r3, #1
 8002584:	d00f      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x70>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800258c:	d107      	bne.n	800259e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_SPI_TransmitReceive+0x68>
 8002596:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800259a:	2b04      	cmp	r3, #4
 800259c:	d003      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025a4:	e15b      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_SPI_TransmitReceive+0x82>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_SPI_TransmitReceive+0x82>
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025be:	e14e      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d003      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2205      	movs	r2, #5
 80025d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	887a      	ldrh	r2, [r7, #2]
 80025f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	d007      	beq.n	8002628 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002630:	d178      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x10a>
 800263a:	8b7b      	ldrh	r3, [r7, #26]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d166      	bne.n	800270e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002664:	e053      	b.n	800270e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b02      	cmp	r3, #2
 8002672:	d11b      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x176>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x176>
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d113      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	881a      	ldrh	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	1c9a      	adds	r2, r3, #2
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d119      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x1b8>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	b292      	uxth	r2, r2
 80026d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	1c9a      	adds	r2, r3, #2
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026ea:	2301      	movs	r3, #1
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026ee:	f7fe fde9 	bl	80012c4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d807      	bhi.n	800270e <HAL_SPI_TransmitReceive+0x1d8>
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002704:	d003      	beq.n	800270e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800270c:	e0a7      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1a6      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x130>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1a1      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x130>
 8002722:	e07c      	b.n	800281e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_SPI_TransmitReceive+0x1fc>
 800272c:	8b7b      	ldrh	r3, [r7, #26]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d16b      	bne.n	800280a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	330c      	adds	r3, #12
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002758:	e057      	b.n	800280a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11c      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x26c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d017      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x26c>
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d114      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d119      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x2ae>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027e4:	f7fe fd6e 	bl	80012c4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d803      	bhi.n	80027fc <HAL_SPI_TransmitReceive+0x2c6>
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fa:	d102      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x2cc>
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002808:	e029      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1a2      	bne.n	800275a <HAL_SPI_TransmitReceive+0x224>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d19d      	bne.n	800275a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800281e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8b2 	bl	800298c <SPI_EndRxTxTransaction>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800283a:	e010      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	e000      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800285c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800286e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002872:	4618      	mov	r0, r3
 8002874:	3730      	adds	r7, #48	; 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800288c:	f7fe fd1a 	bl	80012c4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4413      	add	r3, r2
 800289a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800289c:	f7fe fd12 	bl	80012c4 <HAL_GetTick>
 80028a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	015b      	lsls	r3, r3, #5
 80028a8:	0d1b      	lsrs	r3, r3, #20
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028b2:	e054      	b.n	800295e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ba:	d050      	beq.n	800295e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028bc:	f7fe fd02 	bl	80012c4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d902      	bls.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d13d      	bne.n	800294e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ea:	d111      	bne.n	8002910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f4:	d004      	beq.n	8002900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d107      	bne.n	8002910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800290e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002918:	d10f      	bne.n	800293a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e017      	b.n	800297e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3b01      	subs	r3, #1
 800295c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4013      	ands	r3, r2
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	429a      	cmp	r2, r3
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	429a      	cmp	r2, r3
 800297a:	d19b      	bne.n	80028b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000000 	.word	0x20000000

0800298c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <SPI_EndRxTxTransaction+0x7c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <SPI_EndRxTxTransaction+0x80>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0d5b      	lsrs	r3, r3, #21
 80029a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b6:	d112      	bne.n	80029de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7ff ff5a 	bl	800287c <SPI_WaitFlagStateUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e00f      	b.n	80029fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d0f2      	beq.n	80029de <SPI_EndRxTxTransaction+0x52>
 80029f8:	e000      	b.n	80029fc <SPI_EndRxTxTransaction+0x70>
        break;
 80029fa:	bf00      	nop
  }

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	165e9f81 	.word	0x165e9f81

08002a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e041      	b.n	8002aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fafc 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f000 f95e 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d001      	beq.n	8002ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e046      	b.n	8002b56 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_TIM_Base_Start+0xb4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d022      	beq.n	8002b20 <HAL_TIM_Base_Start+0x70>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d01d      	beq.n	8002b20 <HAL_TIM_Base_Start+0x70>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <HAL_TIM_Base_Start+0xb8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d018      	beq.n	8002b20 <HAL_TIM_Base_Start+0x70>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_TIM_Base_Start+0xbc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_TIM_Base_Start+0x70>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_TIM_Base_Start+0xc0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00e      	beq.n	8002b20 <HAL_TIM_Base_Start+0x70>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_TIM_Base_Start+0xc4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_TIM_Base_Start+0x70>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_TIM_Base_Start+0xc8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_TIM_Base_Start+0x70>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <HAL_TIM_Base_Start+0xcc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d111      	bne.n	8002b44 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d010      	beq.n	8002b54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	e007      	b.n	8002b54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40010400 	.word	0x40010400
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40001800 	.word	0x40001800

08002b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_TIM_ConfigClockSource+0x1c>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e0b4      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x186>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd4:	d03e      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0xd4>
 8002bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bda:	f200 8087 	bhi.w	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be2:	f000 8086 	beq.w	8002cf2 <HAL_TIM_ConfigClockSource+0x172>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bea:	d87f      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b70      	cmp	r3, #112	; 0x70
 8002bee:	d01a      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0xa6>
 8002bf0:	2b70      	cmp	r3, #112	; 0x70
 8002bf2:	d87b      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b60      	cmp	r3, #96	; 0x60
 8002bf6:	d050      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x11a>
 8002bf8:	2b60      	cmp	r3, #96	; 0x60
 8002bfa:	d877      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b50      	cmp	r3, #80	; 0x50
 8002bfe:	d03c      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0xfa>
 8002c00:	2b50      	cmp	r3, #80	; 0x50
 8002c02:	d873      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d058      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x13a>
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d86f      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b30      	cmp	r3, #48	; 0x30
 8002c0e:	d064      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x15a>
 8002c10:	2b30      	cmp	r3, #48	; 0x30
 8002c12:	d86b      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d060      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d867      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05c      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d05a      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x15a>
 8002c24:	e062      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f000 f985 	bl	8002f44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	609a      	str	r2, [r3, #8]
      break;
 8002c52:	e04f      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f000 f96e 	bl	8002f44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c76:	609a      	str	r2, [r3, #8]
      break;
 8002c78:	e03c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f000 f8e2 	bl	8002e50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2150      	movs	r1, #80	; 0x50
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f93b 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 8002c98:	e02c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f000 f901 	bl	8002eae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2160      	movs	r1, #96	; 0x60
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f92b 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 8002cb8:	e01c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6859      	ldr	r1, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f000 f8c2 	bl	8002e50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2140      	movs	r1, #64	; 0x40
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f91b 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 8002cd8:	e00c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f000 f912 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 8002cea:	e003      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	e000      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a40      	ldr	r2, [pc, #256]	; (8002e24 <TIM_Base_SetConfig+0x114>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d00f      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <TIM_Base_SetConfig+0x118>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3c      	ldr	r2, [pc, #240]	; (8002e2c <TIM_Base_SetConfig+0x11c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3b      	ldr	r2, [pc, #236]	; (8002e30 <TIM_Base_SetConfig+0x120>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3a      	ldr	r2, [pc, #232]	; (8002e34 <TIM_Base_SetConfig+0x124>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d108      	bne.n	8002d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2f      	ldr	r2, [pc, #188]	; (8002e24 <TIM_Base_SetConfig+0x114>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02b      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d027      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2c      	ldr	r2, [pc, #176]	; (8002e28 <TIM_Base_SetConfig+0x118>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d023      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	; (8002e2c <TIM_Base_SetConfig+0x11c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01f      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <TIM_Base_SetConfig+0x120>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01b      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a29      	ldr	r2, [pc, #164]	; (8002e34 <TIM_Base_SetConfig+0x124>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d017      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a28      	ldr	r2, [pc, #160]	; (8002e38 <TIM_Base_SetConfig+0x128>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a27      	ldr	r2, [pc, #156]	; (8002e3c <TIM_Base_SetConfig+0x12c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00f      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <TIM_Base_SetConfig+0x130>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00b      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <TIM_Base_SetConfig+0x134>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <TIM_Base_SetConfig+0x138>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d003      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <TIM_Base_SetConfig+0x13c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d108      	bne.n	8002dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <TIM_Base_SetConfig+0x114>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0xf8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <TIM_Base_SetConfig+0x124>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	615a      	str	r2, [r3, #20]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40010400 	.word	0x40010400
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	40014400 	.word	0x40014400
 8002e40:	40014800 	.word	0x40014800
 8002e44:	40001800 	.word	0x40001800
 8002e48:	40001c00 	.word	0x40001c00
 8002e4c:	40002000 	.word	0x40002000

08002e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 030a 	bic.w	r3, r3, #10
 8002e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0210 	bic.w	r2, r3, #16
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	031b      	lsls	r3, r3, #12
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f043 0307 	orr.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	021a      	lsls	r2, r3, #8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e05a      	b.n	8003052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d01d      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d018      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00e      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a18      	ldr	r2, [pc, #96]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a15      	ldr	r2, [pc, #84]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10c      	bne.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40010400 	.word	0x40010400
 8003074:	40014000 	.word	0x40014000
 8003078:	40001800 	.word	0x40001800

0800307c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e047      	b.n	800311e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd ffe8 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	; 0x24
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f931 	bl	8003328 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80030e4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0208 	orr.w	r2, r2, #8
 80030f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b08a      	sub	sp, #40	; 0x28
 800312a:	af02      	add	r7, sp, #8
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b20      	cmp	r3, #32
 8003144:	d17c      	bne.n	8003240 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_UART_Transmit+0x2c>
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e075      	b.n	8003242 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_UART_Transmit+0x3e>
 8003160:	2302      	movs	r3, #2
 8003162:	e06e      	b.n	8003242 <HAL_UART_Transmit+0x11c>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2221      	movs	r2, #33	; 0x21
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800317a:	f7fe f8a3 	bl	80012c4 <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	88fa      	ldrh	r2, [r7, #6]
 800318a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003194:	d108      	bne.n	80031a8 <HAL_UART_Transmit+0x82>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e003      	b.n	80031b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031b8:	e02a      	b.n	8003210 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f840 	bl	800324a <UART_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e036      	b.n	8003242 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10b      	bne.n	80031f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	3302      	adds	r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	e007      	b.n	8003202 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	3301      	adds	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1cf      	bne.n	80031ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2200      	movs	r2, #0
 8003222:	2140      	movs	r1, #64	; 0x40
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f810 	bl	800324a <UART_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e006      	b.n	8003242 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b090      	sub	sp, #64	; 0x40
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325a:	e050      	b.n	80032fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003262:	d04c      	beq.n	80032fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0x30>
 800326a:	f7fe f82b 	bl	80012c4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003276:	429a      	cmp	r2, r3
 8003278:	d241      	bcs.n	80032fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	330c      	adds	r3, #12
 8003298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800329a:	637a      	str	r2, [r7, #52]	; 0x34
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e5      	bne.n	800327a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3314      	adds	r3, #20
 80032b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	613b      	str	r3, [r7, #16]
   return(result);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3314      	adds	r3, #20
 80032cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ce:	623a      	str	r2, [r7, #32]
 80032d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	69f9      	ldr	r1, [r7, #28]
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	61bb      	str	r3, [r7, #24]
   return(result);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e5      	bne.n	80032ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e00f      	b.n	800331e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	429a      	cmp	r2, r3
 800331a:	d09f      	beq.n	800325c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3740      	adds	r7, #64	; 0x40
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800332c:	b0c0      	sub	sp, #256	; 0x100
 800332e:	af00      	add	r7, sp, #0
 8003330:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	68d9      	ldr	r1, [r3, #12]
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	ea40 0301 	orr.w	r3, r0, r1
 8003350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	431a      	orrs	r2, r3
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	431a      	orrs	r2, r3
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003380:	f021 010c 	bic.w	r1, r1, #12
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800338e:	430b      	orrs	r3, r1
 8003390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a2:	6999      	ldr	r1, [r3, #24]
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	ea40 0301 	orr.w	r3, r0, r1
 80033ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b8f      	ldr	r3, [pc, #572]	; (80035f4 <UART_SetConfig+0x2cc>)
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d005      	beq.n	80033c8 <UART_SetConfig+0xa0>
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b8d      	ldr	r3, [pc, #564]	; (80035f8 <UART_SetConfig+0x2d0>)
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d104      	bne.n	80033d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7fe fedc 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 80033cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033d0:	e003      	b.n	80033da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033d2:	f7fe fec3 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 80033d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e4:	f040 810c 	bne.w	8003600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033fa:	4622      	mov	r2, r4
 80033fc:	462b      	mov	r3, r5
 80033fe:	1891      	adds	r1, r2, r2
 8003400:	65b9      	str	r1, [r7, #88]	; 0x58
 8003402:	415b      	adcs	r3, r3
 8003404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800340a:	4621      	mov	r1, r4
 800340c:	eb12 0801 	adds.w	r8, r2, r1
 8003410:	4629      	mov	r1, r5
 8003412:	eb43 0901 	adc.w	r9, r3, r1
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342a:	4690      	mov	r8, r2
 800342c:	4699      	mov	r9, r3
 800342e:	4623      	mov	r3, r4
 8003430:	eb18 0303 	adds.w	r3, r8, r3
 8003434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003438:	462b      	mov	r3, r5
 800343a:	eb49 0303 	adc.w	r3, r9, r3
 800343e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800344e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003456:	460b      	mov	r3, r1
 8003458:	18db      	adds	r3, r3, r3
 800345a:	653b      	str	r3, [r7, #80]	; 0x50
 800345c:	4613      	mov	r3, r2
 800345e:	eb42 0303 	adc.w	r3, r2, r3
 8003462:	657b      	str	r3, [r7, #84]	; 0x54
 8003464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800346c:	f7fd f8a2 	bl	80005b4 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4b61      	ldr	r3, [pc, #388]	; (80035fc <UART_SetConfig+0x2d4>)
 8003476:	fba3 2302 	umull	r2, r3, r3, r2
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	011c      	lsls	r4, r3, #4
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003488:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800348c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	1891      	adds	r1, r2, r2
 8003496:	64b9      	str	r1, [r7, #72]	; 0x48
 8003498:	415b      	adcs	r3, r3
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034a0:	4641      	mov	r1, r8
 80034a2:	eb12 0a01 	adds.w	sl, r2, r1
 80034a6:	4649      	mov	r1, r9
 80034a8:	eb43 0b01 	adc.w	fp, r3, r1
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034c0:	4692      	mov	sl, r2
 80034c2:	469b      	mov	fp, r3
 80034c4:	4643      	mov	r3, r8
 80034c6:	eb1a 0303 	adds.w	r3, sl, r3
 80034ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ce:	464b      	mov	r3, r9
 80034d0:	eb4b 0303 	adc.w	r3, fp, r3
 80034d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034ec:	460b      	mov	r3, r1
 80034ee:	18db      	adds	r3, r3, r3
 80034f0:	643b      	str	r3, [r7, #64]	; 0x40
 80034f2:	4613      	mov	r3, r2
 80034f4:	eb42 0303 	adc.w	r3, r2, r3
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
 80034fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003502:	f7fd f857 	bl	80005b4 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4611      	mov	r1, r2
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <UART_SetConfig+0x2d4>)
 800350e:	fba3 2301 	umull	r2, r3, r3, r1
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2264      	movs	r2, #100	; 0x64
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	1acb      	subs	r3, r1, r3
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <UART_SetConfig+0x2d4>)
 8003524:	fba3 2302 	umull	r2, r3, r3, r2
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003530:	441c      	add	r4, r3
 8003532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800353c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	1891      	adds	r1, r2, r2
 800354a:	63b9      	str	r1, [r7, #56]	; 0x38
 800354c:	415b      	adcs	r3, r3
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003554:	4641      	mov	r1, r8
 8003556:	1851      	adds	r1, r2, r1
 8003558:	6339      	str	r1, [r7, #48]	; 0x30
 800355a:	4649      	mov	r1, r9
 800355c:	414b      	adcs	r3, r1
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800356c:	4659      	mov	r1, fp
 800356e:	00cb      	lsls	r3, r1, #3
 8003570:	4651      	mov	r1, sl
 8003572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003576:	4651      	mov	r1, sl
 8003578:	00ca      	lsls	r2, r1, #3
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	4603      	mov	r3, r0
 8003580:	4642      	mov	r2, r8
 8003582:	189b      	adds	r3, r3, r2
 8003584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003588:	464b      	mov	r3, r9
 800358a:	460a      	mov	r2, r1
 800358c:	eb42 0303 	adc.w	r3, r2, r3
 8003590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035a8:	460b      	mov	r3, r1
 80035aa:	18db      	adds	r3, r3, r3
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ae:	4613      	mov	r3, r2
 80035b0:	eb42 0303 	adc.w	r3, r2, r3
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035be:	f7fc fff9 	bl	80005b4 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <UART_SetConfig+0x2d4>)
 80035c8:	fba3 1302 	umull	r1, r3, r3, r2
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	2164      	movs	r1, #100	; 0x64
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	3332      	adds	r3, #50	; 0x32
 80035da:	4a08      	ldr	r2, [pc, #32]	; (80035fc <UART_SetConfig+0x2d4>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	f003 0207 	and.w	r2, r3, #7
 80035e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4422      	add	r2, r4
 80035ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035f0:	e105      	b.n	80037fe <UART_SetConfig+0x4d6>
 80035f2:	bf00      	nop
 80035f4:	40011000 	.word	0x40011000
 80035f8:	40011400 	.word	0x40011400
 80035fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003604:	2200      	movs	r2, #0
 8003606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800360a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800360e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003612:	4642      	mov	r2, r8
 8003614:	464b      	mov	r3, r9
 8003616:	1891      	adds	r1, r2, r2
 8003618:	6239      	str	r1, [r7, #32]
 800361a:	415b      	adcs	r3, r3
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
 800361e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003622:	4641      	mov	r1, r8
 8003624:	1854      	adds	r4, r2, r1
 8003626:	4649      	mov	r1, r9
 8003628:	eb43 0501 	adc.w	r5, r3, r1
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	00eb      	lsls	r3, r5, #3
 8003636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800363a:	00e2      	lsls	r2, r4, #3
 800363c:	4614      	mov	r4, r2
 800363e:	461d      	mov	r5, r3
 8003640:	4643      	mov	r3, r8
 8003642:	18e3      	adds	r3, r4, r3
 8003644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003648:	464b      	mov	r3, r9
 800364a:	eb45 0303 	adc.w	r3, r5, r3
 800364e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800365e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800366e:	4629      	mov	r1, r5
 8003670:	008b      	lsls	r3, r1, #2
 8003672:	4621      	mov	r1, r4
 8003674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003678:	4621      	mov	r1, r4
 800367a:	008a      	lsls	r2, r1, #2
 800367c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003680:	f7fc ff98 	bl	80005b4 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4b60      	ldr	r3, [pc, #384]	; (800380c <UART_SetConfig+0x4e4>)
 800368a:	fba3 2302 	umull	r2, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	011c      	lsls	r4, r3, #4
 8003692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800369c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	61b9      	str	r1, [r7, #24]
 80036ac:	415b      	adcs	r3, r3
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b4:	4641      	mov	r1, r8
 80036b6:	1851      	adds	r1, r2, r1
 80036b8:	6139      	str	r1, [r7, #16]
 80036ba:	4649      	mov	r1, r9
 80036bc:	414b      	adcs	r3, r1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036cc:	4659      	mov	r1, fp
 80036ce:	00cb      	lsls	r3, r1, #3
 80036d0:	4651      	mov	r1, sl
 80036d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d6:	4651      	mov	r1, sl
 80036d8:	00ca      	lsls	r2, r1, #3
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	4642      	mov	r2, r8
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e8:	464b      	mov	r3, r9
 80036ea:	460a      	mov	r2, r1
 80036ec:	eb42 0303 	adc.w	r3, r2, r3
 80036f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80036fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800370c:	4649      	mov	r1, r9
 800370e:	008b      	lsls	r3, r1, #2
 8003710:	4641      	mov	r1, r8
 8003712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003716:	4641      	mov	r1, r8
 8003718:	008a      	lsls	r2, r1, #2
 800371a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800371e:	f7fc ff49 	bl	80005b4 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4b39      	ldr	r3, [pc, #228]	; (800380c <UART_SetConfig+0x4e4>)
 8003728:	fba3 1302 	umull	r1, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2164      	movs	r1, #100	; 0x64
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	3332      	adds	r3, #50	; 0x32
 800373a:	4a34      	ldr	r2, [pc, #208]	; (800380c <UART_SetConfig+0x4e4>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003746:	441c      	add	r4, r3
 8003748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374c:	2200      	movs	r2, #0
 800374e:	673b      	str	r3, [r7, #112]	; 0x70
 8003750:	677a      	str	r2, [r7, #116]	; 0x74
 8003752:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003756:	4642      	mov	r2, r8
 8003758:	464b      	mov	r3, r9
 800375a:	1891      	adds	r1, r2, r2
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	415b      	adcs	r3, r3
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003766:	4641      	mov	r1, r8
 8003768:	1851      	adds	r1, r2, r1
 800376a:	6039      	str	r1, [r7, #0]
 800376c:	4649      	mov	r1, r9
 800376e:	414b      	adcs	r3, r1
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800377e:	4659      	mov	r1, fp
 8003780:	00cb      	lsls	r3, r1, #3
 8003782:	4651      	mov	r1, sl
 8003784:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003788:	4651      	mov	r1, sl
 800378a:	00ca      	lsls	r2, r1, #3
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	4603      	mov	r3, r0
 8003792:	4642      	mov	r2, r8
 8003794:	189b      	adds	r3, r3, r2
 8003796:	66bb      	str	r3, [r7, #104]	; 0x68
 8003798:	464b      	mov	r3, r9
 800379a:	460a      	mov	r2, r1
 800379c:	eb42 0303 	adc.w	r3, r2, r3
 80037a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	663b      	str	r3, [r7, #96]	; 0x60
 80037ac:	667a      	str	r2, [r7, #100]	; 0x64
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037ba:	4649      	mov	r1, r9
 80037bc:	008b      	lsls	r3, r1, #2
 80037be:	4641      	mov	r1, r8
 80037c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c4:	4641      	mov	r1, r8
 80037c6:	008a      	lsls	r2, r1, #2
 80037c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037cc:	f7fc fef2 	bl	80005b4 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <UART_SetConfig+0x4e4>)
 80037d6:	fba3 1302 	umull	r1, r3, r3, r2
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2164      	movs	r1, #100	; 0x64
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	3332      	adds	r3, #50	; 0x32
 80037e8:	4a08      	ldr	r2, [pc, #32]	; (800380c <UART_SetConfig+0x4e4>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	f003 020f 	and.w	r2, r3, #15
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4422      	add	r2, r4
 80037fc:	609a      	str	r2, [r3, #8]
}
 80037fe:	bf00      	nop
 8003800:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003804:	46bd      	mov	sp, r7
 8003806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380a:	bf00      	nop
 800380c:	51eb851f 	.word	0x51eb851f

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4d0d      	ldr	r5, [pc, #52]	; (8003848 <__libc_init_array+0x38>)
 8003814:	4c0d      	ldr	r4, [pc, #52]	; (800384c <__libc_init_array+0x3c>)
 8003816:	1b64      	subs	r4, r4, r5
 8003818:	10a4      	asrs	r4, r4, #2
 800381a:	2600      	movs	r6, #0
 800381c:	42a6      	cmp	r6, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	4d0b      	ldr	r5, [pc, #44]	; (8003850 <__libc_init_array+0x40>)
 8003822:	4c0c      	ldr	r4, [pc, #48]	; (8003854 <__libc_init_array+0x44>)
 8003824:	f000 f820 	bl	8003868 <_init>
 8003828:	1b64      	subs	r4, r4, r5
 800382a:	10a4      	asrs	r4, r4, #2
 800382c:	2600      	movs	r6, #0
 800382e:	42a6      	cmp	r6, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	f855 3b04 	ldr.w	r3, [r5], #4
 8003838:	4798      	blx	r3
 800383a:	3601      	adds	r6, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003842:	4798      	blx	r3
 8003844:	3601      	adds	r6, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	080038c0 	.word	0x080038c0
 800384c:	080038c0 	.word	0x080038c0
 8003850:	080038c0 	.word	0x080038c0
 8003854:	080038c4 	.word	0x080038c4

08003858 <memset>:
 8003858:	4402      	add	r2, r0
 800385a:	4603      	mov	r3, r0
 800385c:	4293      	cmp	r3, r2
 800385e:	d100      	bne.n	8003862 <memset+0xa>
 8003860:	4770      	bx	lr
 8003862:	f803 1b01 	strb.w	r1, [r3], #1
 8003866:	e7f9      	b.n	800385c <memset+0x4>

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
