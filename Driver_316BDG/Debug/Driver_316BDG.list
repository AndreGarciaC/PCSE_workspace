
Driver_316BDG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006ff0  08006ff0  00016ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007404  08007404  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800740c  0800740c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800740c  0800740c  0001740c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007410  08007410  00017410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000134  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000310  20000310  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f88d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fa9  00000000  00000000  0002fa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00031a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  000328e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d83  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104bf  00000000  00000000  00058433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd402  00000000  00000000  000688f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145cf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f80  00000000  00000000  00145d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006fd8 	.word	0x08006fd8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08006fd8 	.word	0x08006fd8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <PrintString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PrintString( const char *pcString )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff f93b 	bl	80001f0 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	230a      	movs	r3, #10
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <PrintString+0x24>)
 8000f84:	f002 fd9f 	bl	8003ac6 <HAL_UART_Transmit>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000298 	.word	0x20000298

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b096      	sub	sp, #88	; 0x58
 8000f98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9a:	f000 fdfd 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f84d 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f000 f95b 	bl	800125c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fa6:	f000 f8a9 	bl	80010fc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000faa:	f000 f92d 	bl	8001208 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000fae:	f000 f8db 	bl	8001168 <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim1);
 8000fb2:	4819      	ldr	r0, [pc, #100]	; (8001018 <main+0x84>)
 8000fb4:	f002 fa4c 	bl	8003450 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */
  mlx90316.csMlx = Cs_Nucleo;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <main+0x88>)
 8000fba:	607b      	str	r3, [r7, #4]
  mlx90316.delay_msMlx = Delay_ms_Nucleo;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <main+0x8c>)
 8000fbe:	617b      	str	r3, [r7, #20]
  mlx90316.fTimingMlx = FrameTiming_Nucleo;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <main+0x90>)
 8000fc2:	613b      	str	r3, [r7, #16]
  mlx90316.wrspiMlx = WR_Spi_Nucleo;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <main+0x94>)
 8000fc6:	60fb      	str	r3, [r7, #12]
  mlx90316.wspiMlx = W_Spi_Nucleo;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <main+0x98>)
 8000fca:	60bb      	str	r3, [r7, #8]

  Mlx90316_Init(mlx90316);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd4:	f000 faba 	bl	800154c <Mlx90316_Init>
  Init_Handler(&hspi1, &htim1);
 8000fd8:	490f      	ldr	r1, [pc, #60]	; (8001018 <main+0x84>)
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <main+0x9c>)
 8000fdc:	f000 fb40 	bl	8001660 <Init_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PrintString( "START READING\r\n" );
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0xa0>)
 8000fe2:	f7ff ffc3 	bl	8000f6c <PrintString>
//	  if(isError(sample)==0)
//	  {
//		  sample = sample>>2;
//		  float angle = (getAngle(sample));
//	  }
	  degrees = Mlx90316_GetAngle();
 8000fe6:	f000 fad7 	bl	8001598 <Mlx90316_GetAngle>
 8000fea:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	  sprintf(uart_buffer,"Dato: %3.2f \r\n",degrees);
 8000fee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ff0:	f7ff faba 	bl	8000568 <__aeabi_f2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	f107 0018 	add.w	r0, r7, #24
 8000ffc:	490e      	ldr	r1, [pc, #56]	; (8001038 <main+0xa4>)
 8000ffe:	f003 fd73 	bl	8004ae8 <siprintf>
	  PrintString(uart_buffer);
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ffb0 	bl	8000f6c <PrintString>
	  HAL_Delay(1000);
 800100c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001010:	f000 fe34 	bl	8001c7c <HAL_Delay>
	  degrees = Mlx90316_GetAngle();
 8001014:	e7e7      	b.n	8000fe6 <main+0x52>
 8001016:	bf00      	nop
 8001018:	20000250 	.word	0x20000250
 800101c:	0800168d 	.word	0x0800168d
 8001020:	08001751 	.word	0x08001751
 8001024:	0800171d 	.word	0x0800171d
 8001028:	080016f5 	.word	0x080016f5
 800102c:	080016d1 	.word	0x080016d1
 8001030:	200001f8 	.word	0x200001f8
 8001034:	08006ff0 	.word	0x08006ff0
 8001038:	08007000 	.word	0x08007000

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f003 f8da 	bl	8004204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <SystemClock_Config+0xb8>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <SystemClock_Config+0xb8>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <SystemClock_Config+0xb8>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <SystemClock_Config+0xbc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <SystemClock_Config+0xbc>)
 800108a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <SystemClock_Config+0xbc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a4:	2310      	movs	r3, #16
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 f8b3 	bl	800221c <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010bc:	f000 f9f2 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fb15 	bl	800270c <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010e8:	f000 f9dc 	bl	80014a4 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3750      	adds	r7, #80	; 0x50
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_SPI1_Init+0x64>)
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <MX_SPI1_Init+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_SPI1_Init+0x64>)
 8001108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800110c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_SPI1_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_SPI1_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_SPI1_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_SPI1_Init+0x64>)
 8001122:	2201      	movs	r2, #1
 8001124:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_SPI1_Init+0x64>)
 8001128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_SPI1_Init+0x64>)
 8001130:	2228      	movs	r2, #40	; 0x28
 8001132:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_SPI1_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_SPI1_Init+0x64>)
 8001148:	220a      	movs	r2, #10
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_SPI1_Init+0x64>)
 800114e:	f001 fcfd 	bl	8002b4c <HAL_SPI_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001158:	f000 f9a4 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001f8 	.word	0x200001f8
 8001164:	40013000 	.word	0x40013000

08001168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_TIM1_Init+0x98>)
 8001186:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <MX_TIM1_Init+0x9c>)
 8001188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM1_Init+0x98>)
 800118c:	2259      	movs	r2, #89	; 0x59
 800118e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_TIM1_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_TIM1_Init+0x98>)
 8001198:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800119c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_TIM1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_TIM1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b0:	4813      	ldr	r0, [pc, #76]	; (8001200 <MX_TIM1_Init+0x98>)
 80011b2:	f002 f8fd 	bl	80033b0 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011bc:	f000 f972 	bl	80014a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_TIM1_Init+0x98>)
 80011ce:	f002 f9a7 	bl	8003520 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80011d8:	f000 f964 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM1_Init+0x98>)
 80011ea:	f002 fb9b 	bl	8003924 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011f4:	f000 f956 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000250 	.word	0x20000250
 8001204:	40010000 	.word	0x40010000

08001208 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <MX_USART3_UART_Init+0x50>)
 8001210:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_USART3_UART_Init+0x4c>)
 8001240:	f002 fbec 	bl	8003a1c <HAL_HalfDuplex_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800124a:	f000 f92b 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000298 	.word	0x20000298
 8001258:	40004800 	.word	0x40004800

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	4b86      	ldr	r3, [pc, #536]	; (8001490 <MX_GPIO_Init+0x234>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a85      	ldr	r2, [pc, #532]	; (8001490 <MX_GPIO_Init+0x234>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b83      	ldr	r3, [pc, #524]	; (8001490 <MX_GPIO_Init+0x234>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	4b7f      	ldr	r3, [pc, #508]	; (8001490 <MX_GPIO_Init+0x234>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a7e      	ldr	r2, [pc, #504]	; (8001490 <MX_GPIO_Init+0x234>)
 8001298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b7c      	ldr	r3, [pc, #496]	; (8001490 <MX_GPIO_Init+0x234>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b78      	ldr	r3, [pc, #480]	; (8001490 <MX_GPIO_Init+0x234>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a77      	ldr	r2, [pc, #476]	; (8001490 <MX_GPIO_Init+0x234>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b75      	ldr	r3, [pc, #468]	; (8001490 <MX_GPIO_Init+0x234>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b71      	ldr	r3, [pc, #452]	; (8001490 <MX_GPIO_Init+0x234>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a70      	ldr	r2, [pc, #448]	; (8001490 <MX_GPIO_Init+0x234>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b6e      	ldr	r3, [pc, #440]	; (8001490 <MX_GPIO_Init+0x234>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b6a      	ldr	r3, [pc, #424]	; (8001490 <MX_GPIO_Init+0x234>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a69      	ldr	r2, [pc, #420]	; (8001490 <MX_GPIO_Init+0x234>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b67      	ldr	r3, [pc, #412]	; (8001490 <MX_GPIO_Init+0x234>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b63      	ldr	r3, [pc, #396]	; (8001490 <MX_GPIO_Init+0x234>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a62      	ldr	r2, [pc, #392]	; (8001490 <MX_GPIO_Init+0x234>)
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b60      	ldr	r3, [pc, #384]	; (8001490 <MX_GPIO_Init+0x234>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001320:	485c      	ldr	r0, [pc, #368]	; (8001494 <MX_GPIO_Init+0x238>)
 8001322:	f000 ff61 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2140      	movs	r1, #64	; 0x40
 800132a:	485b      	ldr	r0, [pc, #364]	; (8001498 <MX_GPIO_Init+0x23c>)
 800132c:	f000 ff5c 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4859      	ldr	r0, [pc, #356]	; (800149c <MX_GPIO_Init+0x240>)
 8001338:	f000 ff56 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800133c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001342:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4853      	ldr	r0, [pc, #332]	; (80014a0 <MX_GPIO_Init+0x244>)
 8001354:	f000 fd9c 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001358:	2332      	movs	r3, #50	; 0x32
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001368:	230b      	movs	r3, #11
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	484b      	ldr	r0, [pc, #300]	; (80014a0 <MX_GPIO_Init+0x244>)
 8001374:	f000 fd8c 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001378:	2386      	movs	r3, #134	; 0x86
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001388:	230b      	movs	r3, #11
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4842      	ldr	r0, [pc, #264]	; (800149c <MX_GPIO_Init+0x240>)
 8001394:	f000 fd7c 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001398:	f244 0381 	movw	r3, #16513	; 0x4081
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4838      	ldr	r0, [pc, #224]	; (8001494 <MX_GPIO_Init+0x238>)
 80013b2:	f000 fd6d 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c8:	230b      	movs	r3, #11
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4830      	ldr	r0, [pc, #192]	; (8001494 <MX_GPIO_Init+0x238>)
 80013d4:	f000 fd5c 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013d8:	2340      	movs	r3, #64	; 0x40
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	482a      	ldr	r0, [pc, #168]	; (8001498 <MX_GPIO_Init+0x23c>)
 80013f0:	f000 fd4e 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	4824      	ldr	r0, [pc, #144]	; (8001498 <MX_GPIO_Init+0x23c>)
 8001408:	f000 fd42 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800140c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800141e:	230a      	movs	r3, #10
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	481c      	ldr	r0, [pc, #112]	; (800149c <MX_GPIO_Init+0x240>)
 800142a:	f000 fd31 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800142e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4816      	ldr	r0, [pc, #88]	; (800149c <MX_GPIO_Init+0x240>)
 8001444:	f000 fd24 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	480e      	ldr	r0, [pc, #56]	; (800149c <MX_GPIO_Init+0x240>)
 8001462:	f000 fd15 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001466:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001478:	230b      	movs	r3, #11
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_GPIO_Init+0x23c>)
 8001484:	f000 fd04 	bl	8001e90 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400
 8001498:	40021800 	.word	0x40021800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020800 	.word	0x40020800

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>

080014ae <IsError>:
#include "mlx90316.h"

static mlx90316_t mlx90316_fncs;

static uint8_t IsError(uint16_t _sample)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	80fb      	strh	r3, [r7, #6]
	_sample = _sample&0x02;//analizo el 2do bit menos significativo
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	80fb      	strh	r3, [r7, #6]
	_sample = _sample>>1;//corro uno para dejar solo segundo bit
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	80fb      	strh	r3, [r7, #6]
	if(_sample==1)
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <IsError+0x22>
	{
		return 1; //Error
 80014cc:	2301      	movs	r3, #1
 80014ce:	e004      	b.n	80014da <IsError+0x2c>
	}
	else if(_sample ==0)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <IsError+0x2c>
	{
		return 0; //No error
 80014d6:	2300      	movs	r3, #0
 80014d8:	e7ff      	b.n	80014da <IsError+0x2c>
	}
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <ComputeAngle>:

static float ComputeAngle( uint16_t _sample)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
	float ans;
	ans = (((float)_sample)*360.0)/16383.0;
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7ff f832 	bl	8000568 <__aeabi_f2d>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <ComputeAngle+0x60>)
 800150a:	f7ff f885 	bl	8000618 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	a30a      	add	r3, pc, #40	; (adr r3, 8001540 <ComputeAngle+0x58>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f9a6 	bl	800086c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb4e 	bl	8000bc8 <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
	return ans;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	00000000 	.word	0x00000000
 8001544:	40cfff80 	.word	0x40cfff80
 8001548:	40768000 	.word	0x40768000

0800154c <Mlx90316_Init>:

void Mlx90316_Init(mlx90316_t board_fncs)
{
 800154c:	b084      	sub	sp, #16
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
 8001552:	f107 0c08 	add.w	ip, r7, #8
 8001556:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	mlx90316_fncs.csMlx = board_fncs.csMlx;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <Mlx90316_Init+0x48>)
 800155e:	6013      	str	r3, [r2, #0]
	mlx90316_fncs.delay_msMlx = board_fncs.delay_msMlx;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <Mlx90316_Init+0x48>)
 8001564:	6113      	str	r3, [r2, #16]
	mlx90316_fncs.fTimingMlx = board_fncs.fTimingMlx;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <Mlx90316_Init+0x48>)
 800156a:	60d3      	str	r3, [r2, #12]
	mlx90316_fncs.wrspiMlx = board_fncs.wrspiMlx;
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <Mlx90316_Init+0x48>)
 8001570:	6093      	str	r3, [r2, #8]
	mlx90316_fncs.wspiMlx = board_fncs.wspiMlx;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <Mlx90316_Init+0x48>)
 8001576:	6053      	str	r3, [r2, #4]

	mlx90316_fncs.csMlx(CS_SET); //profe crea estructura
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <Mlx90316_Init+0x48>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2001      	movs	r0, #1
 800157e:	4798      	blx	r3
	mlx90316_fncs.delay_msMlx(2);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <Mlx90316_Init+0x48>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2002      	movs	r0, #2
 8001586:	4798      	blx	r3
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001590:	b004      	add	sp, #16
 8001592:	4770      	bx	lr
 8001594:	200002dc 	.word	0x200002dc

08001598 <Mlx90316_GetAngle>:

float Mlx90316_GetAngle()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
	char Rx;
	char spi_buffer[8];
	float angle;
	uint8_t b1 = STARTCOM_B1;
 800159e:	23aa      	movs	r3, #170	; 0xaa
 80015a0:	70fb      	strb	r3, [r7, #3]
	uint8_t b2 = STARTCOM_B2;
 80015a2:	23ff      	movs	r3, #255	; 0xff
 80015a4:	70bb      	strb	r3, [r7, #2]
	uint16_t sample;
	mlx90316_fncs.csMlx(CS_RESET);
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <Mlx90316_GetAngle+0xc0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2000      	movs	r0, #0
 80015ac:	4798      	blx	r3
	mlx90316_fncs.fTimingMlx(1); //t6
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <Mlx90316_GetAngle+0xc0>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2001      	movs	r0, #1
 80015b4:	4798      	blx	r3
	mlx90316_fncs.wspiMlx(&b1);
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <Mlx90316_GetAngle+0xc0>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	1cfa      	adds	r2, r7, #3
 80015bc:	4610      	mov	r0, r2
 80015be:	4798      	blx	r3
	mlx90316_fncs.wspiMlx(&b2);
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <Mlx90316_GetAngle+0xc0>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	1cba      	adds	r2, r7, #2
 80015c6:	4610      	mov	r0, r2
 80015c8:	4798      	blx	r3
	mlx90316_fncs.fTimingMlx(6);//t7
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <Mlx90316_GetAngle+0xc0>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2006      	movs	r0, #6
 80015d0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	74fb      	strb	r3, [r7, #19]
 80015d6:	e013      	b.n	8001600 <Mlx90316_GetAngle+0x68>
	{
		mlx90316_fncs.wrspiMlx(&b2,&Rx);
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <Mlx90316_GetAngle+0xc0>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f107 010f 	add.w	r1, r7, #15
 80015e0:	1cba      	adds	r2, r7, #2
 80015e2:	4610      	mov	r0, r2
 80015e4:	4798      	blx	r3
		spi_buffer[i]=Rx;
 80015e6:	7cfb      	ldrb	r3, [r7, #19]
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	3318      	adds	r3, #24
 80015ec:	443b      	add	r3, r7
 80015ee:	f803 2c14 	strb.w	r2, [r3, #-20]
		mlx90316_fncs.fTimingMlx(3);//t2
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <Mlx90316_GetAngle+0xc0>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2003      	movs	r0, #3
 80015f8:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
 80015fa:	7cfb      	ldrb	r3, [r7, #19]
 80015fc:	3301      	adds	r3, #1
 80015fe:	74fb      	strb	r3, [r7, #19]
 8001600:	7cfb      	ldrb	r3, [r7, #19]
 8001602:	2b07      	cmp	r3, #7
 8001604:	d9e8      	bls.n	80015d8 <Mlx90316_GetAngle+0x40>
	}
	mlx90316_fncs.csMlx(CS_SET);
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <Mlx90316_GetAngle+0xc0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2001      	movs	r0, #1
 800160c:	4798      	blx	r3
	sample = spi_buffer[1]&0xFF; //por orden de llegada el segundo byte de datos lo trunco a 8 bits contiene el bit menos significativo.
 800160e:	797b      	ldrb	r3, [r7, #5]
 8001610:	823b      	strh	r3, [r7, #16]
	sample|= (spi_buffer[0]&0xFF) << 8; //tomo el primero y corro a la izquierda contiene el bit más sugnificativo. SOlo uno los dos bytes en uno de 16 bit.
 8001612:	793b      	ldrb	r3, [r7, #4]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	b21b      	sxth	r3, r3
 8001620:	823b      	strh	r3, [r7, #16]
	if(IsError(sample)==0)
 8001622:	8a3b      	ldrh	r3, [r7, #16]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff42 	bl	80014ae <IsError>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d109      	bne.n	8001644 <Mlx90316_GetAngle+0xac>
	{
		sample = sample>>2;
 8001630:	8a3b      	ldrh	r3, [r7, #16]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	823b      	strh	r3, [r7, #16]
		angle = (ComputeAngle(sample));
 8001636:	8a3b      	ldrh	r3, [r7, #16]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff55 	bl	80014e8 <ComputeAngle>
 800163e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001642:	e001      	b.n	8001648 <Mlx90316_GetAngle+0xb0>
	}
	else
	{
		angle = -1.0;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <Mlx90316_GetAngle+0xc4>)
 8001646:	617b      	str	r3, [r7, #20]
	}
	return angle;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	ee07 3a90 	vmov	s15, r3
}
 800164e:	eeb0 0a67 	vmov.f32	s0, s15
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200002dc 	.word	0x200002dc
 800165c:	bf800000 	.word	0xbf800000

08001660 <Init_Handler>:

static SPI_HandleTypeDef* hspi1;
static TIM_HandleTypeDef* htim1;

void Init_Handler(SPI_HandleTypeDef * hspi, TIM_HandleTypeDef * htim)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	hspi1=hspi;
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <Init_Handler+0x24>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6013      	str	r3, [r2, #0]
	htim1=htim;
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <Init_Handler+0x28>)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200002f0 	.word	0x200002f0
 8001688:	200002f4 	.word	0x200002f4

0800168c <Cs_Nucleo>:

void Cs_Nucleo(cs_t cs_val)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	switch(cs_val)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <Cs_Nucleo+0x16>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d008      	beq.n	80016b2 <Cs_Nucleo+0x26>
		break;

	default:
		;
	}
}
 80016a0:	e00f      	b.n	80016c2 <Cs_Nucleo+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, cs_val);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	461a      	mov	r2, r3
 80016a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <Cs_Nucleo+0x40>)
 80016ac:	f000 fd9c 	bl	80021e8 <HAL_GPIO_WritePin>
		break;
 80016b0:	e007      	b.n	80016c2 <Cs_Nucleo+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, cs_val);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	461a      	mov	r2, r3
 80016b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <Cs_Nucleo+0x40>)
 80016bc:	f000 fd94 	bl	80021e8 <HAL_GPIO_WritePin>
		break;
 80016c0:	bf00      	nop
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000

080016d0 <W_Spi_Nucleo>:

void W_Spi_Nucleo(uint8_t *spi_byte)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit(hspi1,spi_byte,1,100);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <W_Spi_Nucleo+0x20>)
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	2201      	movs	r2, #1
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	f001 fabc 	bl	8002c5e <HAL_SPI_Transmit>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200002f0 	.word	0x200002f0

080016f4 <WR_Spi_Nucleo>:

void WR_Spi_Nucleo(uint8_t* spi_byte, char *rx)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	HAL_SPI_TransmitReceive(hspi1,spi_byte,rx,1,100);
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <WR_Spi_Nucleo+0x24>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	2364      	movs	r3, #100	; 0x64
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2301      	movs	r3, #1
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f001 fbe3 	bl	8002ed6 <HAL_SPI_TransmitReceive>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002f0 	.word	0x200002f0

0800171c <FrameTiming_Nucleo>:

void FrameTiming_Nucleo(uint32_t timing)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim1,0);  // set the counter value a 0
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <FrameTiming_Nucleo+0x30>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim1) < timing);  // wait for the counter to reach the us input in the parameter
 800172e:	bf00      	nop
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <FrameTiming_Nucleo+0x30>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	429a      	cmp	r2, r3
 800173c:	d8f8      	bhi.n	8001730 <FrameTiming_Nucleo+0x14>
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	200002f4 	.word	0x200002f4

08001750 <Delay_ms_Nucleo>:

void Delay_ms_Nucleo(uint32_t ms)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fa8f 	bl	8001c7c <HAL_Delay>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_MspInit+0x4c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x4c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_SPI_MspInit+0x84>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12b      	bne.n	8001832 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_SPI_MspInit+0x88>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_SPI_MspInit+0x88>)
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_SPI_MspInit+0x88>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_SPI_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_SPI_MspInit+0x88>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_SPI_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001812:	2338      	movs	r3, #56	; 0x38
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001822:	2305      	movs	r3, #5
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_SPI_MspInit+0x8c>)
 800182e:	f000 fb2f 	bl	8001e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40013000 	.word	0x40013000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020400 	.word	0x40020400

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_TIM_Base_MspInit+0x3c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10d      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_TIM_Base_MspInit+0x40>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_TIM_Base_MspInit+0x40>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_TIM_Base_MspInit+0x40>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40010000 	.word	0x40010000
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_UART_MspInit+0xa8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d13d      	bne.n	800192a <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_UART_MspInit+0xac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a20      	ldr	r2, [pc, #128]	; (8001938 <HAL_UART_MspInit+0xac>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_UART_MspInit+0xac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_UART_MspInit+0xac>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_UART_MspInit+0xac>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_UART_MspInit+0xac>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin;
 80018e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ec:	2312      	movs	r3, #18
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f8:	2307      	movs	r3, #7
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	480e      	ldr	r0, [pc, #56]	; (800193c <HAL_UART_MspInit+0xb0>)
 8001904:	f000 fac4 	bl	8001e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_TX_Pin;
 8001908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800191a:	2307      	movs	r3, #7
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <HAL_UART_MspInit+0xb0>)
 8001926:	f000 fab3 	bl	8001e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40004800 	.word	0x40004800
 8001938:	40023800 	.word	0x40023800
 800193c:	40020c00 	.word	0x40020c00

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198c:	f000 f956 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_kill>:

int _kill(int pid, int sig)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ae:	f002 fbff 	bl	80041b0 <__errno>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2216      	movs	r2, #22
 80019b6:	601a      	str	r2, [r3, #0]
	return -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_exit>:

void _exit (int status)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ffe7 	bl	80019a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019d6:	e7fe      	b.n	80019d6 <_exit+0x12>

080019d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ea:	f3af 8000 	nop.w
 80019ee:	4601      	mov	r1, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf0      	blt.n	80019ea <_read+0x12>
	}

return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
	}
	return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:

int _close(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a72:	605a      	str	r2, [r3, #4]
	return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_isatty>:

int _isatty(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
	return 1;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
	return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f002 fb64 	bl	80041b0 <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20030000 	.word	0x20030000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	200002f8 	.word	0x200002f8
 8001b1c:	20000310 	.word	0x20000310

08001b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <SystemInit+0x20>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <SystemInit+0x20>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b4a:	490e      	ldr	r1, [pc, #56]	; (8001b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b60:	4c0b      	ldr	r4, [pc, #44]	; (8001b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6e:	f7ff ffd7 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b72:	f002 fb23 	bl	80041bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7ff fa0d 	bl	8000f94 <main>
  bx  lr    
 8001b7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b88:	08007414 	.word	0x08007414
  ldr r2, =_sbss
 8001b8c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b90:	20000310 	.word	0x20000310

08001b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_Init+0x40>)
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_Init+0x40>)
 8001bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_Init+0x40>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 f931 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fdcc 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023c00 	.word	0x40023c00

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f93b 	bl	8001e76 <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f911 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000008 	.word	0x20000008
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	200002fc 	.word	0x200002fc

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200002fc 	.word	0x200002fc

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff47 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff5c 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffb0 	bl	8001de4 <SysTick_Config>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e177      	b.n	800219c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8166 	bne.w	8002196 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d005      	beq.n	8001ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d130      	bne.n	8001f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 0201 	and.w	r2, r3, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d017      	beq.n	8001f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d123      	bne.n	8001fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80c0 	beq.w	8002196 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_GPIO_Init+0x324>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_GPIO_Init+0x324>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_GPIO_Init+0x324>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002032:	4a61      	ldr	r2, [pc, #388]	; (80021b8 <HAL_GPIO_Init+0x328>)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_GPIO_Init+0x32c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d037      	beq.n	80020ce <HAL_GPIO_Init+0x23e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a57      	ldr	r2, [pc, #348]	; (80021c0 <HAL_GPIO_Init+0x330>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d031      	beq.n	80020ca <HAL_GPIO_Init+0x23a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a56      	ldr	r2, [pc, #344]	; (80021c4 <HAL_GPIO_Init+0x334>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <HAL_GPIO_Init+0x236>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a55      	ldr	r2, [pc, #340]	; (80021c8 <HAL_GPIO_Init+0x338>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x232>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a54      	ldr	r2, [pc, #336]	; (80021cc <HAL_GPIO_Init+0x33c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x22e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a53      	ldr	r2, [pc, #332]	; (80021d0 <HAL_GPIO_Init+0x340>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x22a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a52      	ldr	r2, [pc, #328]	; (80021d4 <HAL_GPIO_Init+0x344>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x226>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <HAL_GPIO_Init+0x348>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x222>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a50      	ldr	r2, [pc, #320]	; (80021dc <HAL_GPIO_Init+0x34c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x21e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4f      	ldr	r2, [pc, #316]	; (80021e0 <HAL_GPIO_Init+0x350>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x21a>
 80020a6:	2309      	movs	r3, #9
 80020a8:	e012      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020aa:	230a      	movs	r3, #10
 80020ac:	e010      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e00e      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e00c      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e00a      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e008      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020be:	2304      	movs	r3, #4
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e004      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020ce:	2300      	movs	r3, #0
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	4093      	lsls	r3, r2
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e0:	4935      	ldr	r1, [pc, #212]	; (80021b8 <HAL_GPIO_Init+0x328>)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_GPIO_Init+0x354>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002112:	4a34      	ldr	r2, [pc, #208]	; (80021e4 <HAL_GPIO_Init+0x354>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002118:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_GPIO_Init+0x354>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800213c:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <HAL_GPIO_Init+0x354>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_GPIO_Init+0x354>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_GPIO_Init+0x354>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_GPIO_Init+0x354>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_GPIO_Init+0x354>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3301      	adds	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	f67f ae84 	bls.w	8001eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40013800 	.word	0x40013800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40020800 	.word	0x40020800
 80021c8:	40020c00 	.word	0x40020c00
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40021400 	.word	0x40021400
 80021d4:	40021800 	.word	0x40021800
 80021d8:	40021c00 	.word	0x40021c00
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40022400 	.word	0x40022400
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002204:	e003      	b.n	800220e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e267      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d075      	beq.n	8002326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b04      	cmp	r3, #4
 8002244:	d00c      	beq.n	8002260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224e:	2b08      	cmp	r3, #8
 8002250:	d112      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05b      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e242      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x74>
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b70      	ldr	r3, [pc, #448]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6f      	ldr	r2, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6d      	ldr	r3, [pc, #436]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6c      	ldr	r2, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 80022b4:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b66      	ldr	r3, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fcc6 	bl	8001c64 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fcc2 	bl	8001c64 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e207      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fcb2 	bl	8001c64 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fcae 	bl	8001c64 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1f3      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b44      	ldr	r3, [pc, #272]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c7      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4937      	ldr	r1, [pc, #220]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCC_OscConfig+0x244>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7ff fc67 	bl	8001c64 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff fc63 	bl	8001c64 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a8      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4925      	ldr	r1, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_OscConfig+0x244>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff fc46 	bl	8001c64 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff fc42 	bl	8001c64 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e187      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d036      	beq.n	8002474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_RCC_OscConfig+0x248>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7ff fc26 	bl	8001c64 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff fc22 	bl	8001c64 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e167      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x200>
 800243a:	e01b      	b.n	8002474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x248>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff fc0f 	bl	8001c64 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00e      	b.n	8002468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244a:	f7ff fc0b 	bl	8001c64 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d907      	bls.n	8002468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e150      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800245c:	40023800 	.word	0x40023800
 8002460:	42470000 	.word	0x42470000
 8002464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8097 	beq.w	80025b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b81      	ldr	r3, [pc, #516]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b7d      	ldr	r3, [pc, #500]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a7c      	ldr	r2, [pc, #496]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b7a      	ldr	r3, [pc, #488]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b77      	ldr	r3, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b74      	ldr	r3, [pc, #464]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a73      	ldr	r2, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7ff fbcb 	bl	8001c64 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7ff fbc7 	bl	8001c64 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e10c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x2ea>
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a63      	ldr	r2, [pc, #396]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x30c>
 800250e:	4b5f      	ldr	r3, [pc, #380]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a5e      	ldr	r2, [pc, #376]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a5b      	ldr	r2, [pc, #364]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002528:	4b58      	ldr	r3, [pc, #352]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a57      	ldr	r2, [pc, #348]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	4b55      	ldr	r3, [pc, #340]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a54      	ldr	r2, [pc, #336]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7ff fb8c 	bl	8001c64 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7ff fb88 	bl	8001c64 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0cb      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	4b49      	ldr	r3, [pc, #292]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ee      	beq.n	8002550 <HAL_RCC_OscConfig+0x334>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7ff fb76 	bl	8001c64 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7ff fb72 	bl	8001c64 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0b5      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ee      	bne.n	800257c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a1 	beq.w	80026fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d05c      	beq.n	8002680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d141      	bne.n	8002652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7ff fb46 	bl	8001c64 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff fb42 	bl	8001c64 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e087      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	491b      	ldr	r1, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff fb1b 	bl	8001c64 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff fb17 	bl	8001c64 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e05c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x416>
 8002650:	e054      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff fb04 	bl	8001c64 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002660:	f7ff fb00 	bl	8001c64 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e045      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x444>
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e038      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800268c:	40023800 	.word	0x40023800
 8002690:	40007000 	.word	0x40007000
 8002694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x4ec>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d028      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d121      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d11a      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d111      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0cc      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d90c      	bls.n	8002748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d044      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e067      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7ff fa32 	bl	8001c64 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7ff fa2e 	bl	8001c64 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490a      	ldr	r1, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f992 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08007010 	.word	0x08007010
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b094      	sub	sp, #80	; 0x50
 80028de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	647b      	str	r3, [r7, #68]	; 0x44
 80028e4:	2300      	movs	r3, #0
 80028e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028e8:	2300      	movs	r3, #0
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f0:	4b79      	ldr	r3, [pc, #484]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d00d      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x40>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	f200 80e1 	bhi.w	8002ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x34>
 8002906:	2b04      	cmp	r3, #4
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x3a>
 800290a:	e0db      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b73      	ldr	r3, [pc, #460]	; (8002adc <HAL_RCC_GetSysClockFreq+0x204>)
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002910:	e0db      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002912:	4b73      	ldr	r3, [pc, #460]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002916:	e0d8      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002918:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002920:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d063      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	2200      	movs	r2, #0
 8002936:	63bb      	str	r3, [r7, #56]	; 0x38
 8002938:	63fa      	str	r2, [r7, #60]	; 0x3c
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002940:	633b      	str	r3, [r7, #48]	; 0x30
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800294a:	4622      	mov	r2, r4
 800294c:	462b      	mov	r3, r5
 800294e:	f04f 0000 	mov.w	r0, #0
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	0159      	lsls	r1, r3, #5
 8002958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800295c:	0150      	lsls	r0, r2, #5
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4621      	mov	r1, r4
 8002964:	1a51      	subs	r1, r2, r1
 8002966:	6139      	str	r1, [r7, #16]
 8002968:	4629      	mov	r1, r5
 800296a:	eb63 0301 	sbc.w	r3, r3, r1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800297c:	4659      	mov	r1, fp
 800297e:	018b      	lsls	r3, r1, #6
 8002980:	4651      	mov	r1, sl
 8002982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002986:	4651      	mov	r1, sl
 8002988:	018a      	lsls	r2, r1, #6
 800298a:	4651      	mov	r1, sl
 800298c:	ebb2 0801 	subs.w	r8, r2, r1
 8002990:	4659      	mov	r1, fp
 8002992:	eb63 0901 	sbc.w	r9, r3, r1
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029aa:	4690      	mov	r8, r2
 80029ac:	4699      	mov	r9, r3
 80029ae:	4623      	mov	r3, r4
 80029b0:	eb18 0303 	adds.w	r3, r8, r3
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	462b      	mov	r3, r5
 80029b8:	eb49 0303 	adc.w	r3, r9, r3
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ca:	4629      	mov	r1, r5
 80029cc:	024b      	lsls	r3, r1, #9
 80029ce:	4621      	mov	r1, r4
 80029d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029d4:	4621      	mov	r1, r4
 80029d6:	024a      	lsls	r2, r1, #9
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029de:	2200      	movs	r2, #0
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029e8:	f7fe f93e 	bl	8000c68 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f4:	e058      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	2200      	movs	r2, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	4611      	mov	r1, r2
 8002a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	f04f 0000 	mov.w	r0, #0
 8002a18:	f04f 0100 	mov.w	r1, #0
 8002a1c:	0159      	lsls	r1, r3, #5
 8002a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a22:	0150      	lsls	r0, r2, #5
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4641      	mov	r1, r8
 8002a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a2e:	4649      	mov	r1, r9
 8002a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a48:	ebb2 040a 	subs.w	r4, r2, sl
 8002a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	00eb      	lsls	r3, r5, #3
 8002a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5e:	00e2      	lsls	r2, r4, #3
 8002a60:	4614      	mov	r4, r2
 8002a62:	461d      	mov	r5, r3
 8002a64:	4643      	mov	r3, r8
 8002a66:	18e3      	adds	r3, r4, r3
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	eb45 0303 	adc.w	r3, r5, r3
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a7e:	4629      	mov	r1, r5
 8002a80:	028b      	lsls	r3, r1, #10
 8002a82:	4621      	mov	r1, r4
 8002a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a88:	4621      	mov	r1, r4
 8002a8a:	028a      	lsls	r2, r1, #10
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	2200      	movs	r2, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	61fa      	str	r2, [r7, #28]
 8002a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a9c:	f7fe f8e4 	bl	8000c68 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3750      	adds	r7, #80	; 0x50
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	007a1200 	.word	0x007a1200

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000000 	.word	0x20000000

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08007020 	.word	0x08007020

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08007020 	.word	0x08007020

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e07b      	b.n	8002c56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d108      	bne.n	8002b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b6e:	d009      	beq.n	8002b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	61da      	str	r2, [r3, #28]
 8002b76:	e005      	b.n	8002b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe fe0a 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	ea42 0103 	orr.w	r1, r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	f003 0104 	and.w	r1, r3, #4
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f003 0210 	and.w	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b088      	sub	sp, #32
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_SPI_Transmit+0x22>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e126      	b.n	8002ece <HAL_SPI_Transmit+0x270>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c88:	f7fe ffec 	bl	8001c64 <HAL_GetTick>
 8002c8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d002      	beq.n	8002ca4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ca2:	e10b      	b.n	8002ebc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_SPI_Transmit+0x52>
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cb4:	e102      	b.n	8002ebc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	88fa      	ldrh	r2, [r7, #6]
 8002cce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	88fa      	ldrh	r2, [r7, #6]
 8002cd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cfc:	d10f      	bne.n	8002d1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d007      	beq.n	8002d3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d44:	d14b      	bne.n	8002dde <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_SPI_Transmit+0xf6>
 8002d4e:	8afb      	ldrh	r3, [r7, #22]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d13e      	bne.n	8002dd2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	881a      	ldrh	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	1c9a      	adds	r2, r3, #2
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d78:	e02b      	b.n	8002dd2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d112      	bne.n	8002dae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	1c9a      	adds	r2, r3, #2
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dac:	e011      	b.n	8002dd2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dae:	f7fe ff59 	bl	8001c64 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d803      	bhi.n	8002dc6 <HAL_SPI_Transmit+0x168>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d102      	bne.n	8002dcc <HAL_SPI_Transmit+0x16e>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dd0:	e074      	b.n	8002ebc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ce      	bne.n	8002d7a <HAL_SPI_Transmit+0x11c>
 8002ddc:	e04c      	b.n	8002e78 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_SPI_Transmit+0x18e>
 8002de6:	8afb      	ldrh	r3, [r7, #22]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d140      	bne.n	8002e6e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	7812      	ldrb	r2, [r2, #0]
 8002df8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e12:	e02c      	b.n	8002e6e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d113      	bne.n	8002e4a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	330c      	adds	r3, #12
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e48:	e011      	b.n	8002e6e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e4a:	f7fe ff0b 	bl	8001c64 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d803      	bhi.n	8002e62 <HAL_SPI_Transmit+0x204>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d102      	bne.n	8002e68 <HAL_SPI_Transmit+0x20a>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e6c:	e026      	b.n	8002ebc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1cd      	bne.n	8002e14 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fa55 	bl	800332c <SPI_EndRxTxTransaction>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e000      	b.n	8002ebc <HAL_SPI_Transmit+0x25e>
  }

error:
 8002eba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b08c      	sub	sp, #48	; 0x30
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x26>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e18a      	b.n	8003212 <HAL_SPI_TransmitReceive+0x33c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f04:	f7fe feae 	bl	8001c64 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f1a:	887b      	ldrh	r3, [r7, #2]
 8002f1c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d00f      	beq.n	8002f46 <HAL_SPI_TransmitReceive+0x70>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f2c:	d107      	bne.n	8002f3e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_SPI_TransmitReceive+0x68>
 8002f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d003      	beq.n	8002f46 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f44:	e15b      	b.n	80031fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x82>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x82>
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d103      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f5e:	e14e      	b.n	80031fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d003      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2205      	movs	r2, #5
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	887a      	ldrh	r2, [r7, #2]
 8002f8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d007      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd0:	d178      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x10a>
 8002fda:	8b7b      	ldrh	r3, [r7, #26]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d166      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	1c9a      	adds	r2, r3, #2
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003004:	e053      	b.n	80030ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b02      	cmp	r3, #2
 8003012:	d11b      	bne.n	800304c <HAL_SPI_TransmitReceive+0x176>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_SPI_TransmitReceive+0x176>
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d113      	bne.n	800304c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	881a      	ldrh	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d119      	bne.n	800308e <HAL_SPI_TransmitReceive+0x1b8>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d014      	beq.n	800308e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	b292      	uxth	r2, r2
 8003070:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	1c9a      	adds	r2, r3, #2
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800308a:	2301      	movs	r3, #1
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800308e:	f7fe fde9 	bl	8001c64 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800309a:	429a      	cmp	r2, r3
 800309c:	d807      	bhi.n	80030ae <HAL_SPI_TransmitReceive+0x1d8>
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d003      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030ac:	e0a7      	b.n	80031fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1a6      	bne.n	8003006 <HAL_SPI_TransmitReceive+0x130>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1a1      	bne.n	8003006 <HAL_SPI_TransmitReceive+0x130>
 80030c2:	e07c      	b.n	80031be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_SPI_TransmitReceive+0x1fc>
 80030cc:	8b7b      	ldrh	r3, [r7, #26]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d16b      	bne.n	80031aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f8:	e057      	b.n	80031aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d11c      	bne.n	8003142 <HAL_SPI_TransmitReceive+0x26c>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d017      	beq.n	8003142 <HAL_SPI_TransmitReceive+0x26c>
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d114      	bne.n	8003142 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d119      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x2ae>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d014      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003180:	2301      	movs	r3, #1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003184:	f7fe fd6e 	bl	8001c64 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003190:	429a      	cmp	r2, r3
 8003192:	d803      	bhi.n	800319c <HAL_SPI_TransmitReceive+0x2c6>
 8003194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x2cc>
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031a8:	e029      	b.n	80031fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1a2      	bne.n	80030fa <HAL_SPI_TransmitReceive+0x224>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d19d      	bne.n	80030fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8b2 	bl	800332c <SPI_EndRxTxTransaction>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80031da:	e010      	b.n	80031fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	e000      	b.n	80031fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80031fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800320e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003212:	4618      	mov	r0, r3
 8003214:	3730      	adds	r7, #48	; 0x30
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800322c:	f7fe fd1a 	bl	8001c64 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	4413      	add	r3, r2
 800323a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800323c:	f7fe fd12 	bl	8001c64 <HAL_GetTick>
 8003240:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003242:	4b39      	ldr	r3, [pc, #228]	; (8003328 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	015b      	lsls	r3, r3, #5
 8003248:	0d1b      	lsrs	r3, r3, #20
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	fb02 f303 	mul.w	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003252:	e054      	b.n	80032fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325a:	d050      	beq.n	80032fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800325c:	f7fe fd02 	bl	8001c64 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	429a      	cmp	r2, r3
 800326a:	d902      	bls.n	8003272 <SPI_WaitFlagStateUntilTimeout+0x56>
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d13d      	bne.n	80032ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800328a:	d111      	bne.n	80032b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003294:	d004      	beq.n	80032a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d107      	bne.n	80032b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b8:	d10f      	bne.n	80032da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e017      	b.n	800331e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	429a      	cmp	r2, r3
 800331a:	d19b      	bne.n	8003254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000000 	.word	0x20000000

0800332c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <SPI_EndRxTxTransaction+0x7c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <SPI_EndRxTxTransaction+0x80>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0d5b      	lsrs	r3, r3, #21
 8003344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003356:	d112      	bne.n	800337e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2200      	movs	r2, #0
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff ff5a 	bl	800321c <SPI_WaitFlagStateUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e00f      	b.n	800339e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3b01      	subs	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d0f2      	beq.n	800337e <SPI_EndRxTxTransaction+0x52>
 8003398:	e000      	b.n	800339c <SPI_EndRxTxTransaction+0x70>
        break;
 800339a:	bf00      	nop
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000000 	.word	0x20000000
 80033ac:	165e9f81 	.word	0x165e9f81

080033b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e041      	b.n	8003446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fe fa36 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f000 f95e 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d001      	beq.n	8003468 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e046      	b.n	80034f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a23      	ldr	r2, [pc, #140]	; (8003504 <HAL_TIM_Base_Start+0xb4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d022      	beq.n	80034c0 <HAL_TIM_Base_Start+0x70>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003482:	d01d      	beq.n	80034c0 <HAL_TIM_Base_Start+0x70>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_TIM_Base_Start+0xb8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d018      	beq.n	80034c0 <HAL_TIM_Base_Start+0x70>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1e      	ldr	r2, [pc, #120]	; (800350c <HAL_TIM_Base_Start+0xbc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <HAL_TIM_Base_Start+0x70>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_TIM_Base_Start+0xc0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_TIM_Base_Start+0x70>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_TIM_Base_Start+0xc4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d009      	beq.n	80034c0 <HAL_TIM_Base_Start+0x70>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <HAL_TIM_Base_Start+0xc8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_TIM_Base_Start+0x70>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_TIM_Base_Start+0xcc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d010      	beq.n	80034f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e2:	e007      	b.n	80034f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40010000 	.word	0x40010000
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40000c00 	.word	0x40000c00
 8003514:	40010400 	.word	0x40010400
 8003518:	40014000 	.word	0x40014000
 800351c:	40001800 	.word	0x40001800

08003520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_TIM_ConfigClockSource+0x1c>
 8003538:	2302      	movs	r3, #2
 800353a:	e0b4      	b.n	80036a6 <HAL_TIM_ConfigClockSource+0x186>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800355a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003574:	d03e      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357a:	f200 8087 	bhi.w	800368c <HAL_TIM_ConfigClockSource+0x16c>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	f000 8086 	beq.w	8003692 <HAL_TIM_ConfigClockSource+0x172>
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	d87f      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b70      	cmp	r3, #112	; 0x70
 800358e:	d01a      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003590:	2b70      	cmp	r3, #112	; 0x70
 8003592:	d87b      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b60      	cmp	r3, #96	; 0x60
 8003596:	d050      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x11a>
 8003598:	2b60      	cmp	r3, #96	; 0x60
 800359a:	d877      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b50      	cmp	r3, #80	; 0x50
 800359e:	d03c      	beq.n	800361a <HAL_TIM_ConfigClockSource+0xfa>
 80035a0:	2b50      	cmp	r3, #80	; 0x50
 80035a2:	d873      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d058      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x13a>
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d86f      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b30      	cmp	r3, #48	; 0x30
 80035ae:	d064      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b30      	cmp	r3, #48	; 0x30
 80035b2:	d86b      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d060      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d867      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05c      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d05a      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x15a>
 80035c4:	e062      	b.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6899      	ldr	r1, [r3, #8]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f000 f985 	bl	80038e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	609a      	str	r2, [r3, #8]
      break;
 80035f2:	e04f      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f000 f96e 	bl	80038e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003616:	609a      	str	r2, [r3, #8]
      break;
 8003618:	e03c      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	461a      	mov	r2, r3
 8003628:	f000 f8e2 	bl	80037f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2150      	movs	r1, #80	; 0x50
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f93b 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 8003638:	e02c      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	461a      	mov	r2, r3
 8003648:	f000 f901 	bl	800384e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2160      	movs	r1, #96	; 0x60
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f92b 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 8003658:	e01c      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	461a      	mov	r2, r3
 8003668:	f000 f8c2 	bl	80037f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f91b 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 8003678:	e00c      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f000 f912 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 800368a:	e003      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e000      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <TIM_Base_SetConfig+0x114>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d013      	beq.n	80036f0 <TIM_Base_SetConfig+0x40>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d00f      	beq.n	80036f0 <TIM_Base_SetConfig+0x40>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a3d      	ldr	r2, [pc, #244]	; (80037c8 <TIM_Base_SetConfig+0x118>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00b      	beq.n	80036f0 <TIM_Base_SetConfig+0x40>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <TIM_Base_SetConfig+0x11c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <TIM_Base_SetConfig+0x40>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a3b      	ldr	r2, [pc, #236]	; (80037d0 <TIM_Base_SetConfig+0x120>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <TIM_Base_SetConfig+0x40>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a3a      	ldr	r2, [pc, #232]	; (80037d4 <TIM_Base_SetConfig+0x124>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d108      	bne.n	8003702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <TIM_Base_SetConfig+0x114>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d02b      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003710:	d027      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2c      	ldr	r2, [pc, #176]	; (80037c8 <TIM_Base_SetConfig+0x118>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d023      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a2b      	ldr	r2, [pc, #172]	; (80037cc <TIM_Base_SetConfig+0x11c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01f      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2a      	ldr	r2, [pc, #168]	; (80037d0 <TIM_Base_SetConfig+0x120>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01b      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <TIM_Base_SetConfig+0x124>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d017      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <TIM_Base_SetConfig+0x128>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <TIM_Base_SetConfig+0x12c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00f      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <TIM_Base_SetConfig+0x130>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00b      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <TIM_Base_SetConfig+0x134>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <TIM_Base_SetConfig+0x138>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a23      	ldr	r2, [pc, #140]	; (80037ec <TIM_Base_SetConfig+0x13c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d108      	bne.n	8003774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <TIM_Base_SetConfig+0x114>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d003      	beq.n	80037a8 <TIM_Base_SetConfig+0xf8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <TIM_Base_SetConfig+0x124>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d103      	bne.n	80037b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	615a      	str	r2, [r3, #20]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40010000 	.word	0x40010000
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40010400 	.word	0x40010400
 80037d8:	40014000 	.word	0x40014000
 80037dc:	40014400 	.word	0x40014400
 80037e0:	40014800 	.word	0x40014800
 80037e4:	40001800 	.word	0x40001800
 80037e8:	40001c00 	.word	0x40001c00
 80037ec:	40002000 	.word	0x40002000

080037f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f023 0201 	bic.w	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800381a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 030a 	bic.w	r3, r3, #10
 800382c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	621a      	str	r2, [r3, #32]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800384e:	b480      	push	{r7}
 8003850:	b087      	sub	sp, #28
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0210 	bic.w	r2, r3, #16
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	031b      	lsls	r3, r3, #12
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800388a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b085      	sub	sp, #20
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f043 0307 	orr.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	021a      	lsls	r2, r3, #8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	431a      	orrs	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	609a      	str	r2, [r3, #8]
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003938:	2302      	movs	r3, #2
 800393a:	e05a      	b.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d022      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003988:	d01d      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d018      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1a      	ldr	r2, [pc, #104]	; (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10c      	bne.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40010400 	.word	0x40010400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40001800 	.word	0x40001800

08003a1c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e047      	b.n	8003abe <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd ff22 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f931 	bl	8003cc8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003a84:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0208 	orr.w	r2, r2, #8
 8003a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b08a      	sub	sp, #40	; 0x28
 8003aca:	af02      	add	r7, sp, #8
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d17c      	bne.n	8003be0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_UART_Transmit+0x2c>
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e075      	b.n	8003be2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_UART_Transmit+0x3e>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e06e      	b.n	8003be2 <HAL_UART_Transmit+0x11c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2221      	movs	r2, #33	; 0x21
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b1a:	f7fe f8a3 	bl	8001c64 <HAL_GetTick>
 8003b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b34:	d108      	bne.n	8003b48 <HAL_UART_Transmit+0x82>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e003      	b.n	8003b50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b58:	e02a      	b.n	8003bb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f840 	bl	8003bea <UART_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e036      	b.n	8003be2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e007      	b.n	8003ba2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1cf      	bne.n	8003b5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2140      	movs	r1, #64	; 0x40
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f810 	bl	8003bea <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e006      	b.n	8003be2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b090      	sub	sp, #64	; 0x40
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfa:	e050      	b.n	8003c9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d04c      	beq.n	8003c9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c0a:	f7fe f82b 	bl	8001c64 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d241      	bcs.n	8003c9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c3a:	637a      	str	r2, [r7, #52]	; 0x34
 8003c3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e5      	bne.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c6e:	623a      	str	r2, [r7, #32]
 8003c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	69f9      	ldr	r1, [r7, #28]
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e00f      	b.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	bf0c      	ite	eq
 8003cae:	2301      	moveq	r3, #1
 8003cb0:	2300      	movne	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d09f      	beq.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3740      	adds	r7, #64	; 0x40
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ccc:	b0c0      	sub	sp, #256	; 0x100
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	68d9      	ldr	r1, [r3, #12]
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	ea40 0301 	orr.w	r3, r0, r1
 8003cf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d20:	f021 010c 	bic.w	r1, r1, #12
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	6999      	ldr	r1, [r3, #24]
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	ea40 0301 	orr.w	r3, r0, r1
 8003d4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b8f      	ldr	r3, [pc, #572]	; (8003f94 <UART_SetConfig+0x2cc>)
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d005      	beq.n	8003d68 <UART_SetConfig+0xa0>
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4b8d      	ldr	r3, [pc, #564]	; (8003f98 <UART_SetConfig+0x2d0>)
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d104      	bne.n	8003d72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d68:	f7fe fedc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8003d6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d70:	e003      	b.n	8003d7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d72:	f7fe fec3 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8003d76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d84:	f040 810c 	bne.w	8003fa0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	1891      	adds	r1, r2, r2
 8003da0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003da2:	415b      	adcs	r3, r3
 8003da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003da6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003daa:	4621      	mov	r1, r4
 8003dac:	eb12 0801 	adds.w	r8, r2, r1
 8003db0:	4629      	mov	r1, r5
 8003db2:	eb43 0901 	adc.w	r9, r3, r1
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dca:	4690      	mov	r8, r2
 8003dcc:	4699      	mov	r9, r3
 8003dce:	4623      	mov	r3, r4
 8003dd0:	eb18 0303 	adds.w	r3, r8, r3
 8003dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dd8:	462b      	mov	r3, r5
 8003dda:	eb49 0303 	adc.w	r3, r9, r3
 8003dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003df2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003df6:	460b      	mov	r3, r1
 8003df8:	18db      	adds	r3, r3, r3
 8003dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	eb42 0303 	adc.w	r3, r2, r3
 8003e02:	657b      	str	r3, [r7, #84]	; 0x54
 8003e04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e0c:	f7fc ff2c 	bl	8000c68 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <UART_SetConfig+0x2d4>)
 8003e16:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	011c      	lsls	r4, r3, #4
 8003e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	1891      	adds	r1, r2, r2
 8003e36:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e40:	4641      	mov	r1, r8
 8003e42:	eb12 0a01 	adds.w	sl, r2, r1
 8003e46:	4649      	mov	r1, r9
 8003e48:	eb43 0b01 	adc.w	fp, r3, r1
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e60:	4692      	mov	sl, r2
 8003e62:	469b      	mov	fp, r3
 8003e64:	4643      	mov	r3, r8
 8003e66:	eb1a 0303 	adds.w	r3, sl, r3
 8003e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e6e:	464b      	mov	r3, r9
 8003e70:	eb4b 0303 	adc.w	r3, fp, r3
 8003e74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	18db      	adds	r3, r3, r3
 8003e90:	643b      	str	r3, [r7, #64]	; 0x40
 8003e92:	4613      	mov	r3, r2
 8003e94:	eb42 0303 	adc.w	r3, r2, r3
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ea2:	f7fc fee1 	bl	8000c68 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <UART_SetConfig+0x2d4>)
 8003eae:	fba3 2301 	umull	r2, r3, r3, r1
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2264      	movs	r2, #100	; 0x64
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	1acb      	subs	r3, r1, r3
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ec2:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <UART_SetConfig+0x2d4>)
 8003ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ed0:	441c      	add	r4, r3
 8003ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003edc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ee0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	1891      	adds	r1, r2, r2
 8003eea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003eec:	415b      	adcs	r3, r3
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	1851      	adds	r1, r2, r1
 8003ef8:	6339      	str	r1, [r7, #48]	; 0x30
 8003efa:	4649      	mov	r1, r9
 8003efc:	414b      	adcs	r3, r1
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f0c:	4659      	mov	r1, fp
 8003f0e:	00cb      	lsls	r3, r1, #3
 8003f10:	4651      	mov	r1, sl
 8003f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f16:	4651      	mov	r1, sl
 8003f18:	00ca      	lsls	r2, r1, #3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4642      	mov	r2, r8
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f28:	464b      	mov	r3, r9
 8003f2a:	460a      	mov	r2, r1
 8003f2c:	eb42 0303 	adc.w	r3, r2, r3
 8003f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f48:	460b      	mov	r3, r1
 8003f4a:	18db      	adds	r3, r3, r3
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4e:	4613      	mov	r3, r2
 8003f50:	eb42 0303 	adc.w	r3, r2, r3
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f5e:	f7fc fe83 	bl	8000c68 <__aeabi_uldivmod>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <UART_SetConfig+0x2d4>)
 8003f68:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	2164      	movs	r1, #100	; 0x64
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	3332      	adds	r3, #50	; 0x32
 8003f7a:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <UART_SetConfig+0x2d4>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	f003 0207 	and.w	r2, r3, #7
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4422      	add	r2, r4
 8003f8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f90:	e105      	b.n	800419e <UART_SetConfig+0x4d6>
 8003f92:	bf00      	nop
 8003f94:	40011000 	.word	0x40011000
 8003f98:	40011400 	.word	0x40011400
 8003f9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003faa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fb2:	4642      	mov	r2, r8
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	1891      	adds	r1, r2, r2
 8003fb8:	6239      	str	r1, [r7, #32]
 8003fba:	415b      	adcs	r3, r3
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	1854      	adds	r4, r2, r1
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	eb43 0501 	adc.w	r5, r3, r1
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	00eb      	lsls	r3, r5, #3
 8003fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fda:	00e2      	lsls	r2, r4, #3
 8003fdc:	4614      	mov	r4, r2
 8003fde:	461d      	mov	r5, r3
 8003fe0:	4643      	mov	r3, r8
 8003fe2:	18e3      	adds	r3, r4, r3
 8003fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fe8:	464b      	mov	r3, r9
 8003fea:	eb45 0303 	adc.w	r3, r5, r3
 8003fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ffe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800400e:	4629      	mov	r1, r5
 8004010:	008b      	lsls	r3, r1, #2
 8004012:	4621      	mov	r1, r4
 8004014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004018:	4621      	mov	r1, r4
 800401a:	008a      	lsls	r2, r1, #2
 800401c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004020:	f7fc fe22 	bl	8000c68 <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4b60      	ldr	r3, [pc, #384]	; (80041ac <UART_SetConfig+0x4e4>)
 800402a:	fba3 2302 	umull	r2, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	011c      	lsls	r4, r3, #4
 8004032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004036:	2200      	movs	r2, #0
 8004038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800403c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004040:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004044:	4642      	mov	r2, r8
 8004046:	464b      	mov	r3, r9
 8004048:	1891      	adds	r1, r2, r2
 800404a:	61b9      	str	r1, [r7, #24]
 800404c:	415b      	adcs	r3, r3
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004054:	4641      	mov	r1, r8
 8004056:	1851      	adds	r1, r2, r1
 8004058:	6139      	str	r1, [r7, #16]
 800405a:	4649      	mov	r1, r9
 800405c:	414b      	adcs	r3, r1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800406c:	4659      	mov	r1, fp
 800406e:	00cb      	lsls	r3, r1, #3
 8004070:	4651      	mov	r1, sl
 8004072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004076:	4651      	mov	r1, sl
 8004078:	00ca      	lsls	r2, r1, #3
 800407a:	4610      	mov	r0, r2
 800407c:	4619      	mov	r1, r3
 800407e:	4603      	mov	r3, r0
 8004080:	4642      	mov	r2, r8
 8004082:	189b      	adds	r3, r3, r2
 8004084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004088:	464b      	mov	r3, r9
 800408a:	460a      	mov	r2, r1
 800408c:	eb42 0303 	adc.w	r3, r2, r3
 8004090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	67bb      	str	r3, [r7, #120]	; 0x78
 800409e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040ac:	4649      	mov	r1, r9
 80040ae:	008b      	lsls	r3, r1, #2
 80040b0:	4641      	mov	r1, r8
 80040b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b6:	4641      	mov	r1, r8
 80040b8:	008a      	lsls	r2, r1, #2
 80040ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040be:	f7fc fdd3 	bl	8000c68 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <UART_SetConfig+0x4e4>)
 80040c8:	fba3 1302 	umull	r1, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	2164      	movs	r1, #100	; 0x64
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	3332      	adds	r3, #50	; 0x32
 80040da:	4a34      	ldr	r2, [pc, #208]	; (80041ac <UART_SetConfig+0x4e4>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e6:	441c      	add	r4, r3
 80040e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ec:	2200      	movs	r2, #0
 80040ee:	673b      	str	r3, [r7, #112]	; 0x70
 80040f0:	677a      	str	r2, [r7, #116]	; 0x74
 80040f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040f6:	4642      	mov	r2, r8
 80040f8:	464b      	mov	r3, r9
 80040fa:	1891      	adds	r1, r2, r2
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	415b      	adcs	r3, r3
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004106:	4641      	mov	r1, r8
 8004108:	1851      	adds	r1, r2, r1
 800410a:	6039      	str	r1, [r7, #0]
 800410c:	4649      	mov	r1, r9
 800410e:	414b      	adcs	r3, r1
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800411e:	4659      	mov	r1, fp
 8004120:	00cb      	lsls	r3, r1, #3
 8004122:	4651      	mov	r1, sl
 8004124:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004128:	4651      	mov	r1, sl
 800412a:	00ca      	lsls	r2, r1, #3
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	4603      	mov	r3, r0
 8004132:	4642      	mov	r2, r8
 8004134:	189b      	adds	r3, r3, r2
 8004136:	66bb      	str	r3, [r7, #104]	; 0x68
 8004138:	464b      	mov	r3, r9
 800413a:	460a      	mov	r2, r1
 800413c:	eb42 0303 	adc.w	r3, r2, r3
 8004140:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	663b      	str	r3, [r7, #96]	; 0x60
 800414c:	667a      	str	r2, [r7, #100]	; 0x64
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800415a:	4649      	mov	r1, r9
 800415c:	008b      	lsls	r3, r1, #2
 800415e:	4641      	mov	r1, r8
 8004160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004164:	4641      	mov	r1, r8
 8004166:	008a      	lsls	r2, r1, #2
 8004168:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800416c:	f7fc fd7c 	bl	8000c68 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <UART_SetConfig+0x4e4>)
 8004176:	fba3 1302 	umull	r1, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2164      	movs	r1, #100	; 0x64
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	3332      	adds	r3, #50	; 0x32
 8004188:	4a08      	ldr	r2, [pc, #32]	; (80041ac <UART_SetConfig+0x4e4>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	f003 020f 	and.w	r2, r3, #15
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4422      	add	r2, r4
 800419c:	609a      	str	r2, [r3, #8]
}
 800419e:	bf00      	nop
 80041a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041a4:	46bd      	mov	sp, r7
 80041a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041aa:	bf00      	nop
 80041ac:	51eb851f 	.word	0x51eb851f

080041b0 <__errno>:
 80041b0:	4b01      	ldr	r3, [pc, #4]	; (80041b8 <__errno+0x8>)
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	2000000c 	.word	0x2000000c

080041bc <__libc_init_array>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	4d0d      	ldr	r5, [pc, #52]	; (80041f4 <__libc_init_array+0x38>)
 80041c0:	4c0d      	ldr	r4, [pc, #52]	; (80041f8 <__libc_init_array+0x3c>)
 80041c2:	1b64      	subs	r4, r4, r5
 80041c4:	10a4      	asrs	r4, r4, #2
 80041c6:	2600      	movs	r6, #0
 80041c8:	42a6      	cmp	r6, r4
 80041ca:	d109      	bne.n	80041e0 <__libc_init_array+0x24>
 80041cc:	4d0b      	ldr	r5, [pc, #44]	; (80041fc <__libc_init_array+0x40>)
 80041ce:	4c0c      	ldr	r4, [pc, #48]	; (8004200 <__libc_init_array+0x44>)
 80041d0:	f002 ff02 	bl	8006fd8 <_init>
 80041d4:	1b64      	subs	r4, r4, r5
 80041d6:	10a4      	asrs	r4, r4, #2
 80041d8:	2600      	movs	r6, #0
 80041da:	42a6      	cmp	r6, r4
 80041dc:	d105      	bne.n	80041ea <__libc_init_array+0x2e>
 80041de:	bd70      	pop	{r4, r5, r6, pc}
 80041e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e4:	4798      	blx	r3
 80041e6:	3601      	adds	r6, #1
 80041e8:	e7ee      	b.n	80041c8 <__libc_init_array+0xc>
 80041ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ee:	4798      	blx	r3
 80041f0:	3601      	adds	r6, #1
 80041f2:	e7f2      	b.n	80041da <__libc_init_array+0x1e>
 80041f4:	0800740c 	.word	0x0800740c
 80041f8:	0800740c 	.word	0x0800740c
 80041fc:	0800740c 	.word	0x0800740c
 8004200:	08007410 	.word	0x08007410

08004204 <memset>:
 8004204:	4402      	add	r2, r0
 8004206:	4603      	mov	r3, r0
 8004208:	4293      	cmp	r3, r2
 800420a:	d100      	bne.n	800420e <memset+0xa>
 800420c:	4770      	bx	lr
 800420e:	f803 1b01 	strb.w	r1, [r3], #1
 8004212:	e7f9      	b.n	8004208 <memset+0x4>

08004214 <__cvt>:
 8004214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	ec55 4b10 	vmov	r4, r5, d0
 800421c:	2d00      	cmp	r5, #0
 800421e:	460e      	mov	r6, r1
 8004220:	4619      	mov	r1, r3
 8004222:	462b      	mov	r3, r5
 8004224:	bfbb      	ittet	lt
 8004226:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800422a:	461d      	movlt	r5, r3
 800422c:	2300      	movge	r3, #0
 800422e:	232d      	movlt	r3, #45	; 0x2d
 8004230:	700b      	strb	r3, [r1, #0]
 8004232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004234:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004238:	4691      	mov	r9, r2
 800423a:	f023 0820 	bic.w	r8, r3, #32
 800423e:	bfbc      	itt	lt
 8004240:	4622      	movlt	r2, r4
 8004242:	4614      	movlt	r4, r2
 8004244:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004248:	d005      	beq.n	8004256 <__cvt+0x42>
 800424a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800424e:	d100      	bne.n	8004252 <__cvt+0x3e>
 8004250:	3601      	adds	r6, #1
 8004252:	2102      	movs	r1, #2
 8004254:	e000      	b.n	8004258 <__cvt+0x44>
 8004256:	2103      	movs	r1, #3
 8004258:	ab03      	add	r3, sp, #12
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	ab02      	add	r3, sp, #8
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	ec45 4b10 	vmov	d0, r4, r5
 8004264:	4653      	mov	r3, sl
 8004266:	4632      	mov	r2, r6
 8004268:	f000 fcea 	bl	8004c40 <_dtoa_r>
 800426c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004270:	4607      	mov	r7, r0
 8004272:	d102      	bne.n	800427a <__cvt+0x66>
 8004274:	f019 0f01 	tst.w	r9, #1
 8004278:	d022      	beq.n	80042c0 <__cvt+0xac>
 800427a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800427e:	eb07 0906 	add.w	r9, r7, r6
 8004282:	d110      	bne.n	80042a6 <__cvt+0x92>
 8004284:	783b      	ldrb	r3, [r7, #0]
 8004286:	2b30      	cmp	r3, #48	; 0x30
 8004288:	d10a      	bne.n	80042a0 <__cvt+0x8c>
 800428a:	2200      	movs	r2, #0
 800428c:	2300      	movs	r3, #0
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f7fc fc29 	bl	8000ae8 <__aeabi_dcmpeq>
 8004296:	b918      	cbnz	r0, 80042a0 <__cvt+0x8c>
 8004298:	f1c6 0601 	rsb	r6, r6, #1
 800429c:	f8ca 6000 	str.w	r6, [sl]
 80042a0:	f8da 3000 	ldr.w	r3, [sl]
 80042a4:	4499      	add	r9, r3
 80042a6:	2200      	movs	r2, #0
 80042a8:	2300      	movs	r3, #0
 80042aa:	4620      	mov	r0, r4
 80042ac:	4629      	mov	r1, r5
 80042ae:	f7fc fc1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80042b2:	b108      	cbz	r0, 80042b8 <__cvt+0xa4>
 80042b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042b8:	2230      	movs	r2, #48	; 0x30
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	454b      	cmp	r3, r9
 80042be:	d307      	bcc.n	80042d0 <__cvt+0xbc>
 80042c0:	9b03      	ldr	r3, [sp, #12]
 80042c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042c4:	1bdb      	subs	r3, r3, r7
 80042c6:	4638      	mov	r0, r7
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	b004      	add	sp, #16
 80042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	9103      	str	r1, [sp, #12]
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e7f0      	b.n	80042ba <__cvt+0xa6>

080042d8 <__exponent>:
 80042d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042da:	4603      	mov	r3, r0
 80042dc:	2900      	cmp	r1, #0
 80042de:	bfb8      	it	lt
 80042e0:	4249      	neglt	r1, r1
 80042e2:	f803 2b02 	strb.w	r2, [r3], #2
 80042e6:	bfb4      	ite	lt
 80042e8:	222d      	movlt	r2, #45	; 0x2d
 80042ea:	222b      	movge	r2, #43	; 0x2b
 80042ec:	2909      	cmp	r1, #9
 80042ee:	7042      	strb	r2, [r0, #1]
 80042f0:	dd2a      	ble.n	8004348 <__exponent+0x70>
 80042f2:	f10d 0407 	add.w	r4, sp, #7
 80042f6:	46a4      	mov	ip, r4
 80042f8:	270a      	movs	r7, #10
 80042fa:	46a6      	mov	lr, r4
 80042fc:	460a      	mov	r2, r1
 80042fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8004302:	fb07 1516 	mls	r5, r7, r6, r1
 8004306:	3530      	adds	r5, #48	; 0x30
 8004308:	2a63      	cmp	r2, #99	; 0x63
 800430a:	f104 34ff 	add.w	r4, r4, #4294967295
 800430e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004312:	4631      	mov	r1, r6
 8004314:	dcf1      	bgt.n	80042fa <__exponent+0x22>
 8004316:	3130      	adds	r1, #48	; 0x30
 8004318:	f1ae 0502 	sub.w	r5, lr, #2
 800431c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004320:	1c44      	adds	r4, r0, #1
 8004322:	4629      	mov	r1, r5
 8004324:	4561      	cmp	r1, ip
 8004326:	d30a      	bcc.n	800433e <__exponent+0x66>
 8004328:	f10d 0209 	add.w	r2, sp, #9
 800432c:	eba2 020e 	sub.w	r2, r2, lr
 8004330:	4565      	cmp	r5, ip
 8004332:	bf88      	it	hi
 8004334:	2200      	movhi	r2, #0
 8004336:	4413      	add	r3, r2
 8004338:	1a18      	subs	r0, r3, r0
 800433a:	b003      	add	sp, #12
 800433c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800433e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004342:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004346:	e7ed      	b.n	8004324 <__exponent+0x4c>
 8004348:	2330      	movs	r3, #48	; 0x30
 800434a:	3130      	adds	r1, #48	; 0x30
 800434c:	7083      	strb	r3, [r0, #2]
 800434e:	70c1      	strb	r1, [r0, #3]
 8004350:	1d03      	adds	r3, r0, #4
 8004352:	e7f1      	b.n	8004338 <__exponent+0x60>

08004354 <_printf_float>:
 8004354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	ed2d 8b02 	vpush	{d8}
 800435c:	b08d      	sub	sp, #52	; 0x34
 800435e:	460c      	mov	r4, r1
 8004360:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004364:	4616      	mov	r6, r2
 8004366:	461f      	mov	r7, r3
 8004368:	4605      	mov	r5, r0
 800436a:	f001 fa57 	bl	800581c <_localeconv_r>
 800436e:	f8d0 a000 	ldr.w	sl, [r0]
 8004372:	4650      	mov	r0, sl
 8004374:	f7fb ff3c 	bl	80001f0 <strlen>
 8004378:	2300      	movs	r3, #0
 800437a:	930a      	str	r3, [sp, #40]	; 0x28
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	9305      	str	r3, [sp, #20]
 8004380:	f8d8 3000 	ldr.w	r3, [r8]
 8004384:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004388:	3307      	adds	r3, #7
 800438a:	f023 0307 	bic.w	r3, r3, #7
 800438e:	f103 0208 	add.w	r2, r3, #8
 8004392:	f8c8 2000 	str.w	r2, [r8]
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800439e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043a6:	9307      	str	r3, [sp, #28]
 80043a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80043ac:	ee08 0a10 	vmov	s16, r0
 80043b0:	4b9f      	ldr	r3, [pc, #636]	; (8004630 <_printf_float+0x2dc>)
 80043b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043b6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ba:	f7fc fbc7 	bl	8000b4c <__aeabi_dcmpun>
 80043be:	bb88      	cbnz	r0, 8004424 <_printf_float+0xd0>
 80043c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043c4:	4b9a      	ldr	r3, [pc, #616]	; (8004630 <_printf_float+0x2dc>)
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	f7fc fba1 	bl	8000b10 <__aeabi_dcmple>
 80043ce:	bb48      	cbnz	r0, 8004424 <_printf_float+0xd0>
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	4640      	mov	r0, r8
 80043d6:	4649      	mov	r1, r9
 80043d8:	f7fc fb90 	bl	8000afc <__aeabi_dcmplt>
 80043dc:	b110      	cbz	r0, 80043e4 <_printf_float+0x90>
 80043de:	232d      	movs	r3, #45	; 0x2d
 80043e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e4:	4b93      	ldr	r3, [pc, #588]	; (8004634 <_printf_float+0x2e0>)
 80043e6:	4894      	ldr	r0, [pc, #592]	; (8004638 <_printf_float+0x2e4>)
 80043e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043ec:	bf94      	ite	ls
 80043ee:	4698      	movls	r8, r3
 80043f0:	4680      	movhi	r8, r0
 80043f2:	2303      	movs	r3, #3
 80043f4:	6123      	str	r3, [r4, #16]
 80043f6:	9b05      	ldr	r3, [sp, #20]
 80043f8:	f023 0204 	bic.w	r2, r3, #4
 80043fc:	6022      	str	r2, [r4, #0]
 80043fe:	f04f 0900 	mov.w	r9, #0
 8004402:	9700      	str	r7, [sp, #0]
 8004404:	4633      	mov	r3, r6
 8004406:	aa0b      	add	r2, sp, #44	; 0x2c
 8004408:	4621      	mov	r1, r4
 800440a:	4628      	mov	r0, r5
 800440c:	f000 f9d8 	bl	80047c0 <_printf_common>
 8004410:	3001      	adds	r0, #1
 8004412:	f040 8090 	bne.w	8004536 <_printf_float+0x1e2>
 8004416:	f04f 30ff 	mov.w	r0, #4294967295
 800441a:	b00d      	add	sp, #52	; 0x34
 800441c:	ecbd 8b02 	vpop	{d8}
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	4640      	mov	r0, r8
 800442a:	4649      	mov	r1, r9
 800442c:	f7fc fb8e 	bl	8000b4c <__aeabi_dcmpun>
 8004430:	b140      	cbz	r0, 8004444 <_printf_float+0xf0>
 8004432:	464b      	mov	r3, r9
 8004434:	2b00      	cmp	r3, #0
 8004436:	bfbc      	itt	lt
 8004438:	232d      	movlt	r3, #45	; 0x2d
 800443a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800443e:	487f      	ldr	r0, [pc, #508]	; (800463c <_printf_float+0x2e8>)
 8004440:	4b7f      	ldr	r3, [pc, #508]	; (8004640 <_printf_float+0x2ec>)
 8004442:	e7d1      	b.n	80043e8 <_printf_float+0x94>
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800444a:	9206      	str	r2, [sp, #24]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	d13f      	bne.n	80044d0 <_printf_float+0x17c>
 8004450:	2306      	movs	r3, #6
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	9b05      	ldr	r3, [sp, #20]
 8004456:	6861      	ldr	r1, [r4, #4]
 8004458:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800445c:	2300      	movs	r3, #0
 800445e:	9303      	str	r3, [sp, #12]
 8004460:	ab0a      	add	r3, sp, #40	; 0x28
 8004462:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004466:	ab09      	add	r3, sp, #36	; 0x24
 8004468:	ec49 8b10 	vmov	d0, r8, r9
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6022      	str	r2, [r4, #0]
 8004470:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004474:	4628      	mov	r0, r5
 8004476:	f7ff fecd 	bl	8004214 <__cvt>
 800447a:	9b06      	ldr	r3, [sp, #24]
 800447c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800447e:	2b47      	cmp	r3, #71	; 0x47
 8004480:	4680      	mov	r8, r0
 8004482:	d108      	bne.n	8004496 <_printf_float+0x142>
 8004484:	1cc8      	adds	r0, r1, #3
 8004486:	db02      	blt.n	800448e <_printf_float+0x13a>
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	4299      	cmp	r1, r3
 800448c:	dd41      	ble.n	8004512 <_printf_float+0x1be>
 800448e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004492:	fa5f fb8b 	uxtb.w	fp, fp
 8004496:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800449a:	d820      	bhi.n	80044de <_printf_float+0x18a>
 800449c:	3901      	subs	r1, #1
 800449e:	465a      	mov	r2, fp
 80044a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044a4:	9109      	str	r1, [sp, #36]	; 0x24
 80044a6:	f7ff ff17 	bl	80042d8 <__exponent>
 80044aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ac:	1813      	adds	r3, r2, r0
 80044ae:	2a01      	cmp	r2, #1
 80044b0:	4681      	mov	r9, r0
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	dc02      	bgt.n	80044bc <_printf_float+0x168>
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	07d2      	lsls	r2, r2, #31
 80044ba:	d501      	bpl.n	80044c0 <_printf_float+0x16c>
 80044bc:	3301      	adds	r3, #1
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d09c      	beq.n	8004402 <_printf_float+0xae>
 80044c8:	232d      	movs	r3, #45	; 0x2d
 80044ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ce:	e798      	b.n	8004402 <_printf_float+0xae>
 80044d0:	9a06      	ldr	r2, [sp, #24]
 80044d2:	2a47      	cmp	r2, #71	; 0x47
 80044d4:	d1be      	bne.n	8004454 <_printf_float+0x100>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1bc      	bne.n	8004454 <_printf_float+0x100>
 80044da:	2301      	movs	r3, #1
 80044dc:	e7b9      	b.n	8004452 <_printf_float+0xfe>
 80044de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044e2:	d118      	bne.n	8004516 <_printf_float+0x1c2>
 80044e4:	2900      	cmp	r1, #0
 80044e6:	6863      	ldr	r3, [r4, #4]
 80044e8:	dd0b      	ble.n	8004502 <_printf_float+0x1ae>
 80044ea:	6121      	str	r1, [r4, #16]
 80044ec:	b913      	cbnz	r3, 80044f4 <_printf_float+0x1a0>
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	07d0      	lsls	r0, r2, #31
 80044f2:	d502      	bpl.n	80044fa <_printf_float+0x1a6>
 80044f4:	3301      	adds	r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	6123      	str	r3, [r4, #16]
 80044fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80044fc:	f04f 0900 	mov.w	r9, #0
 8004500:	e7de      	b.n	80044c0 <_printf_float+0x16c>
 8004502:	b913      	cbnz	r3, 800450a <_printf_float+0x1b6>
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	07d2      	lsls	r2, r2, #31
 8004508:	d501      	bpl.n	800450e <_printf_float+0x1ba>
 800450a:	3302      	adds	r3, #2
 800450c:	e7f4      	b.n	80044f8 <_printf_float+0x1a4>
 800450e:	2301      	movs	r3, #1
 8004510:	e7f2      	b.n	80044f8 <_printf_float+0x1a4>
 8004512:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004518:	4299      	cmp	r1, r3
 800451a:	db05      	blt.n	8004528 <_printf_float+0x1d4>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	6121      	str	r1, [r4, #16]
 8004520:	07d8      	lsls	r0, r3, #31
 8004522:	d5ea      	bpl.n	80044fa <_printf_float+0x1a6>
 8004524:	1c4b      	adds	r3, r1, #1
 8004526:	e7e7      	b.n	80044f8 <_printf_float+0x1a4>
 8004528:	2900      	cmp	r1, #0
 800452a:	bfd4      	ite	le
 800452c:	f1c1 0202 	rsble	r2, r1, #2
 8004530:	2201      	movgt	r2, #1
 8004532:	4413      	add	r3, r2
 8004534:	e7e0      	b.n	80044f8 <_printf_float+0x1a4>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	055a      	lsls	r2, r3, #21
 800453a:	d407      	bmi.n	800454c <_printf_float+0x1f8>
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	4642      	mov	r2, r8
 8004540:	4631      	mov	r1, r6
 8004542:	4628      	mov	r0, r5
 8004544:	47b8      	blx	r7
 8004546:	3001      	adds	r0, #1
 8004548:	d12c      	bne.n	80045a4 <_printf_float+0x250>
 800454a:	e764      	b.n	8004416 <_printf_float+0xc2>
 800454c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004550:	f240 80e0 	bls.w	8004714 <_printf_float+0x3c0>
 8004554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004558:	2200      	movs	r2, #0
 800455a:	2300      	movs	r3, #0
 800455c:	f7fc fac4 	bl	8000ae8 <__aeabi_dcmpeq>
 8004560:	2800      	cmp	r0, #0
 8004562:	d034      	beq.n	80045ce <_printf_float+0x27a>
 8004564:	4a37      	ldr	r2, [pc, #220]	; (8004644 <_printf_float+0x2f0>)
 8004566:	2301      	movs	r3, #1
 8004568:	4631      	mov	r1, r6
 800456a:	4628      	mov	r0, r5
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	f43f af51 	beq.w	8004416 <_printf_float+0xc2>
 8004574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004578:	429a      	cmp	r2, r3
 800457a:	db02      	blt.n	8004582 <_printf_float+0x22e>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	07d8      	lsls	r0, r3, #31
 8004580:	d510      	bpl.n	80045a4 <_printf_float+0x250>
 8004582:	ee18 3a10 	vmov	r3, s16
 8004586:	4652      	mov	r2, sl
 8004588:	4631      	mov	r1, r6
 800458a:	4628      	mov	r0, r5
 800458c:	47b8      	blx	r7
 800458e:	3001      	adds	r0, #1
 8004590:	f43f af41 	beq.w	8004416 <_printf_float+0xc2>
 8004594:	f04f 0800 	mov.w	r8, #0
 8004598:	f104 091a 	add.w	r9, r4, #26
 800459c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	4543      	cmp	r3, r8
 80045a2:	dc09      	bgt.n	80045b8 <_printf_float+0x264>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	079b      	lsls	r3, r3, #30
 80045a8:	f100 8105 	bmi.w	80047b6 <_printf_float+0x462>
 80045ac:	68e0      	ldr	r0, [r4, #12]
 80045ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b0:	4298      	cmp	r0, r3
 80045b2:	bfb8      	it	lt
 80045b4:	4618      	movlt	r0, r3
 80045b6:	e730      	b.n	800441a <_printf_float+0xc6>
 80045b8:	2301      	movs	r3, #1
 80045ba:	464a      	mov	r2, r9
 80045bc:	4631      	mov	r1, r6
 80045be:	4628      	mov	r0, r5
 80045c0:	47b8      	blx	r7
 80045c2:	3001      	adds	r0, #1
 80045c4:	f43f af27 	beq.w	8004416 <_printf_float+0xc2>
 80045c8:	f108 0801 	add.w	r8, r8, #1
 80045cc:	e7e6      	b.n	800459c <_printf_float+0x248>
 80045ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dc39      	bgt.n	8004648 <_printf_float+0x2f4>
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <_printf_float+0x2f0>)
 80045d6:	2301      	movs	r3, #1
 80045d8:	4631      	mov	r1, r6
 80045da:	4628      	mov	r0, r5
 80045dc:	47b8      	blx	r7
 80045de:	3001      	adds	r0, #1
 80045e0:	f43f af19 	beq.w	8004416 <_printf_float+0xc2>
 80045e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e8:	4313      	orrs	r3, r2
 80045ea:	d102      	bne.n	80045f2 <_printf_float+0x29e>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	07d9      	lsls	r1, r3, #31
 80045f0:	d5d8      	bpl.n	80045a4 <_printf_float+0x250>
 80045f2:	ee18 3a10 	vmov	r3, s16
 80045f6:	4652      	mov	r2, sl
 80045f8:	4631      	mov	r1, r6
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b8      	blx	r7
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f af09 	beq.w	8004416 <_printf_float+0xc2>
 8004604:	f04f 0900 	mov.w	r9, #0
 8004608:	f104 0a1a 	add.w	sl, r4, #26
 800460c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460e:	425b      	negs	r3, r3
 8004610:	454b      	cmp	r3, r9
 8004612:	dc01      	bgt.n	8004618 <_printf_float+0x2c4>
 8004614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004616:	e792      	b.n	800453e <_printf_float+0x1ea>
 8004618:	2301      	movs	r3, #1
 800461a:	4652      	mov	r2, sl
 800461c:	4631      	mov	r1, r6
 800461e:	4628      	mov	r0, r5
 8004620:	47b8      	blx	r7
 8004622:	3001      	adds	r0, #1
 8004624:	f43f aef7 	beq.w	8004416 <_printf_float+0xc2>
 8004628:	f109 0901 	add.w	r9, r9, #1
 800462c:	e7ee      	b.n	800460c <_printf_float+0x2b8>
 800462e:	bf00      	nop
 8004630:	7fefffff 	.word	0x7fefffff
 8004634:	0800702c 	.word	0x0800702c
 8004638:	08007030 	.word	0x08007030
 800463c:	08007038 	.word	0x08007038
 8004640:	08007034 	.word	0x08007034
 8004644:	0800703c 	.word	0x0800703c
 8004648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800464a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800464c:	429a      	cmp	r2, r3
 800464e:	bfa8      	it	ge
 8004650:	461a      	movge	r2, r3
 8004652:	2a00      	cmp	r2, #0
 8004654:	4691      	mov	r9, r2
 8004656:	dc37      	bgt.n	80046c8 <_printf_float+0x374>
 8004658:	f04f 0b00 	mov.w	fp, #0
 800465c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004660:	f104 021a 	add.w	r2, r4, #26
 8004664:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	eba3 0309 	sub.w	r3, r3, r9
 800466c:	455b      	cmp	r3, fp
 800466e:	dc33      	bgt.n	80046d8 <_printf_float+0x384>
 8004670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004674:	429a      	cmp	r2, r3
 8004676:	db3b      	blt.n	80046f0 <_printf_float+0x39c>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	07da      	lsls	r2, r3, #31
 800467c:	d438      	bmi.n	80046f0 <_printf_float+0x39c>
 800467e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004680:	9a05      	ldr	r2, [sp, #20]
 8004682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004684:	1a9a      	subs	r2, r3, r2
 8004686:	eba3 0901 	sub.w	r9, r3, r1
 800468a:	4591      	cmp	r9, r2
 800468c:	bfa8      	it	ge
 800468e:	4691      	movge	r9, r2
 8004690:	f1b9 0f00 	cmp.w	r9, #0
 8004694:	dc35      	bgt.n	8004702 <_printf_float+0x3ae>
 8004696:	f04f 0800 	mov.w	r8, #0
 800469a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800469e:	f104 0a1a 	add.w	sl, r4, #26
 80046a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	eba3 0309 	sub.w	r3, r3, r9
 80046ac:	4543      	cmp	r3, r8
 80046ae:	f77f af79 	ble.w	80045a4 <_printf_float+0x250>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4652      	mov	r2, sl
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	f43f aeaa 	beq.w	8004416 <_printf_float+0xc2>
 80046c2:	f108 0801 	add.w	r8, r8, #1
 80046c6:	e7ec      	b.n	80046a2 <_printf_float+0x34e>
 80046c8:	4613      	mov	r3, r2
 80046ca:	4631      	mov	r1, r6
 80046cc:	4642      	mov	r2, r8
 80046ce:	4628      	mov	r0, r5
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	d1c0      	bne.n	8004658 <_printf_float+0x304>
 80046d6:	e69e      	b.n	8004416 <_printf_float+0xc2>
 80046d8:	2301      	movs	r3, #1
 80046da:	4631      	mov	r1, r6
 80046dc:	4628      	mov	r0, r5
 80046de:	9205      	str	r2, [sp, #20]
 80046e0:	47b8      	blx	r7
 80046e2:	3001      	adds	r0, #1
 80046e4:	f43f ae97 	beq.w	8004416 <_printf_float+0xc2>
 80046e8:	9a05      	ldr	r2, [sp, #20]
 80046ea:	f10b 0b01 	add.w	fp, fp, #1
 80046ee:	e7b9      	b.n	8004664 <_printf_float+0x310>
 80046f0:	ee18 3a10 	vmov	r3, s16
 80046f4:	4652      	mov	r2, sl
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	d1be      	bne.n	800467e <_printf_float+0x32a>
 8004700:	e689      	b.n	8004416 <_printf_float+0xc2>
 8004702:	9a05      	ldr	r2, [sp, #20]
 8004704:	464b      	mov	r3, r9
 8004706:	4442      	add	r2, r8
 8004708:	4631      	mov	r1, r6
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	d1c1      	bne.n	8004696 <_printf_float+0x342>
 8004712:	e680      	b.n	8004416 <_printf_float+0xc2>
 8004714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004716:	2a01      	cmp	r2, #1
 8004718:	dc01      	bgt.n	800471e <_printf_float+0x3ca>
 800471a:	07db      	lsls	r3, r3, #31
 800471c:	d538      	bpl.n	8004790 <_printf_float+0x43c>
 800471e:	2301      	movs	r3, #1
 8004720:	4642      	mov	r2, r8
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	47b8      	blx	r7
 8004728:	3001      	adds	r0, #1
 800472a:	f43f ae74 	beq.w	8004416 <_printf_float+0xc2>
 800472e:	ee18 3a10 	vmov	r3, s16
 8004732:	4652      	mov	r2, sl
 8004734:	4631      	mov	r1, r6
 8004736:	4628      	mov	r0, r5
 8004738:	47b8      	blx	r7
 800473a:	3001      	adds	r0, #1
 800473c:	f43f ae6b 	beq.w	8004416 <_printf_float+0xc2>
 8004740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004744:	2200      	movs	r2, #0
 8004746:	2300      	movs	r3, #0
 8004748:	f7fc f9ce 	bl	8000ae8 <__aeabi_dcmpeq>
 800474c:	b9d8      	cbnz	r0, 8004786 <_printf_float+0x432>
 800474e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004750:	f108 0201 	add.w	r2, r8, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	4631      	mov	r1, r6
 8004758:	4628      	mov	r0, r5
 800475a:	47b8      	blx	r7
 800475c:	3001      	adds	r0, #1
 800475e:	d10e      	bne.n	800477e <_printf_float+0x42a>
 8004760:	e659      	b.n	8004416 <_printf_float+0xc2>
 8004762:	2301      	movs	r3, #1
 8004764:	4652      	mov	r2, sl
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f ae52 	beq.w	8004416 <_printf_float+0xc2>
 8004772:	f108 0801 	add.w	r8, r8, #1
 8004776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004778:	3b01      	subs	r3, #1
 800477a:	4543      	cmp	r3, r8
 800477c:	dcf1      	bgt.n	8004762 <_printf_float+0x40e>
 800477e:	464b      	mov	r3, r9
 8004780:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004784:	e6dc      	b.n	8004540 <_printf_float+0x1ec>
 8004786:	f04f 0800 	mov.w	r8, #0
 800478a:	f104 0a1a 	add.w	sl, r4, #26
 800478e:	e7f2      	b.n	8004776 <_printf_float+0x422>
 8004790:	2301      	movs	r3, #1
 8004792:	4642      	mov	r2, r8
 8004794:	e7df      	b.n	8004756 <_printf_float+0x402>
 8004796:	2301      	movs	r3, #1
 8004798:	464a      	mov	r2, r9
 800479a:	4631      	mov	r1, r6
 800479c:	4628      	mov	r0, r5
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f ae38 	beq.w	8004416 <_printf_float+0xc2>
 80047a6:	f108 0801 	add.w	r8, r8, #1
 80047aa:	68e3      	ldr	r3, [r4, #12]
 80047ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047ae:	1a5b      	subs	r3, r3, r1
 80047b0:	4543      	cmp	r3, r8
 80047b2:	dcf0      	bgt.n	8004796 <_printf_float+0x442>
 80047b4:	e6fa      	b.n	80045ac <_printf_float+0x258>
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	f104 0919 	add.w	r9, r4, #25
 80047be:	e7f4      	b.n	80047aa <_printf_float+0x456>

080047c0 <_printf_common>:
 80047c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c4:	4616      	mov	r6, r2
 80047c6:	4699      	mov	r9, r3
 80047c8:	688a      	ldr	r2, [r1, #8]
 80047ca:	690b      	ldr	r3, [r1, #16]
 80047cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bfb8      	it	lt
 80047d4:	4613      	movlt	r3, r2
 80047d6:	6033      	str	r3, [r6, #0]
 80047d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047dc:	4607      	mov	r7, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	b10a      	cbz	r2, 80047e6 <_printf_common+0x26>
 80047e2:	3301      	adds	r3, #1
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	0699      	lsls	r1, r3, #26
 80047ea:	bf42      	ittt	mi
 80047ec:	6833      	ldrmi	r3, [r6, #0]
 80047ee:	3302      	addmi	r3, #2
 80047f0:	6033      	strmi	r3, [r6, #0]
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	f015 0506 	ands.w	r5, r5, #6
 80047f8:	d106      	bne.n	8004808 <_printf_common+0x48>
 80047fa:	f104 0a19 	add.w	sl, r4, #25
 80047fe:	68e3      	ldr	r3, [r4, #12]
 8004800:	6832      	ldr	r2, [r6, #0]
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	42ab      	cmp	r3, r5
 8004806:	dc26      	bgt.n	8004856 <_printf_common+0x96>
 8004808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800480c:	1e13      	subs	r3, r2, #0
 800480e:	6822      	ldr	r2, [r4, #0]
 8004810:	bf18      	it	ne
 8004812:	2301      	movne	r3, #1
 8004814:	0692      	lsls	r2, r2, #26
 8004816:	d42b      	bmi.n	8004870 <_printf_common+0xb0>
 8004818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800481c:	4649      	mov	r1, r9
 800481e:	4638      	mov	r0, r7
 8004820:	47c0      	blx	r8
 8004822:	3001      	adds	r0, #1
 8004824:	d01e      	beq.n	8004864 <_printf_common+0xa4>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	68e5      	ldr	r5, [r4, #12]
 800482a:	6832      	ldr	r2, [r6, #0]
 800482c:	f003 0306 	and.w	r3, r3, #6
 8004830:	2b04      	cmp	r3, #4
 8004832:	bf08      	it	eq
 8004834:	1aad      	subeq	r5, r5, r2
 8004836:	68a3      	ldr	r3, [r4, #8]
 8004838:	6922      	ldr	r2, [r4, #16]
 800483a:	bf0c      	ite	eq
 800483c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004840:	2500      	movne	r5, #0
 8004842:	4293      	cmp	r3, r2
 8004844:	bfc4      	itt	gt
 8004846:	1a9b      	subgt	r3, r3, r2
 8004848:	18ed      	addgt	r5, r5, r3
 800484a:	2600      	movs	r6, #0
 800484c:	341a      	adds	r4, #26
 800484e:	42b5      	cmp	r5, r6
 8004850:	d11a      	bne.n	8004888 <_printf_common+0xc8>
 8004852:	2000      	movs	r0, #0
 8004854:	e008      	b.n	8004868 <_printf_common+0xa8>
 8004856:	2301      	movs	r3, #1
 8004858:	4652      	mov	r2, sl
 800485a:	4649      	mov	r1, r9
 800485c:	4638      	mov	r0, r7
 800485e:	47c0      	blx	r8
 8004860:	3001      	adds	r0, #1
 8004862:	d103      	bne.n	800486c <_printf_common+0xac>
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486c:	3501      	adds	r5, #1
 800486e:	e7c6      	b.n	80047fe <_printf_common+0x3e>
 8004870:	18e1      	adds	r1, r4, r3
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	2030      	movs	r0, #48	; 0x30
 8004876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800487a:	4422      	add	r2, r4
 800487c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004884:	3302      	adds	r3, #2
 8004886:	e7c7      	b.n	8004818 <_printf_common+0x58>
 8004888:	2301      	movs	r3, #1
 800488a:	4622      	mov	r2, r4
 800488c:	4649      	mov	r1, r9
 800488e:	4638      	mov	r0, r7
 8004890:	47c0      	blx	r8
 8004892:	3001      	adds	r0, #1
 8004894:	d0e6      	beq.n	8004864 <_printf_common+0xa4>
 8004896:	3601      	adds	r6, #1
 8004898:	e7d9      	b.n	800484e <_printf_common+0x8e>
	...

0800489c <_printf_i>:
 800489c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048a0:	7e0f      	ldrb	r7, [r1, #24]
 80048a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048a4:	2f78      	cmp	r7, #120	; 0x78
 80048a6:	4691      	mov	r9, r2
 80048a8:	4680      	mov	r8, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	469a      	mov	sl, r3
 80048ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048b2:	d807      	bhi.n	80048c4 <_printf_i+0x28>
 80048b4:	2f62      	cmp	r7, #98	; 0x62
 80048b6:	d80a      	bhi.n	80048ce <_printf_i+0x32>
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	f000 80d8 	beq.w	8004a6e <_printf_i+0x1d2>
 80048be:	2f58      	cmp	r7, #88	; 0x58
 80048c0:	f000 80a3 	beq.w	8004a0a <_printf_i+0x16e>
 80048c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048cc:	e03a      	b.n	8004944 <_printf_i+0xa8>
 80048ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048d2:	2b15      	cmp	r3, #21
 80048d4:	d8f6      	bhi.n	80048c4 <_printf_i+0x28>
 80048d6:	a101      	add	r1, pc, #4	; (adr r1, 80048dc <_printf_i+0x40>)
 80048d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004949 	.word	0x08004949
 80048e4:	080048c5 	.word	0x080048c5
 80048e8:	080048c5 	.word	0x080048c5
 80048ec:	080048c5 	.word	0x080048c5
 80048f0:	080048c5 	.word	0x080048c5
 80048f4:	08004949 	.word	0x08004949
 80048f8:	080048c5 	.word	0x080048c5
 80048fc:	080048c5 	.word	0x080048c5
 8004900:	080048c5 	.word	0x080048c5
 8004904:	080048c5 	.word	0x080048c5
 8004908:	08004a55 	.word	0x08004a55
 800490c:	08004979 	.word	0x08004979
 8004910:	08004a37 	.word	0x08004a37
 8004914:	080048c5 	.word	0x080048c5
 8004918:	080048c5 	.word	0x080048c5
 800491c:	08004a77 	.word	0x08004a77
 8004920:	080048c5 	.word	0x080048c5
 8004924:	08004979 	.word	0x08004979
 8004928:	080048c5 	.word	0x080048c5
 800492c:	080048c5 	.word	0x080048c5
 8004930:	08004a3f 	.word	0x08004a3f
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	1d1a      	adds	r2, r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	602a      	str	r2, [r5, #0]
 800493c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004944:	2301      	movs	r3, #1
 8004946:	e0a3      	b.n	8004a90 <_printf_i+0x1f4>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	6829      	ldr	r1, [r5, #0]
 800494c:	0606      	lsls	r6, r0, #24
 800494e:	f101 0304 	add.w	r3, r1, #4
 8004952:	d50a      	bpl.n	800496a <_printf_i+0xce>
 8004954:	680e      	ldr	r6, [r1, #0]
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	2e00      	cmp	r6, #0
 800495a:	da03      	bge.n	8004964 <_printf_i+0xc8>
 800495c:	232d      	movs	r3, #45	; 0x2d
 800495e:	4276      	negs	r6, r6
 8004960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004964:	485e      	ldr	r0, [pc, #376]	; (8004ae0 <_printf_i+0x244>)
 8004966:	230a      	movs	r3, #10
 8004968:	e019      	b.n	800499e <_printf_i+0x102>
 800496a:	680e      	ldr	r6, [r1, #0]
 800496c:	602b      	str	r3, [r5, #0]
 800496e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004972:	bf18      	it	ne
 8004974:	b236      	sxthne	r6, r6
 8004976:	e7ef      	b.n	8004958 <_printf_i+0xbc>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	6820      	ldr	r0, [r4, #0]
 800497c:	1d19      	adds	r1, r3, #4
 800497e:	6029      	str	r1, [r5, #0]
 8004980:	0601      	lsls	r1, r0, #24
 8004982:	d501      	bpl.n	8004988 <_printf_i+0xec>
 8004984:	681e      	ldr	r6, [r3, #0]
 8004986:	e002      	b.n	800498e <_printf_i+0xf2>
 8004988:	0646      	lsls	r6, r0, #25
 800498a:	d5fb      	bpl.n	8004984 <_printf_i+0xe8>
 800498c:	881e      	ldrh	r6, [r3, #0]
 800498e:	4854      	ldr	r0, [pc, #336]	; (8004ae0 <_printf_i+0x244>)
 8004990:	2f6f      	cmp	r7, #111	; 0x6f
 8004992:	bf0c      	ite	eq
 8004994:	2308      	moveq	r3, #8
 8004996:	230a      	movne	r3, #10
 8004998:	2100      	movs	r1, #0
 800499a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800499e:	6865      	ldr	r5, [r4, #4]
 80049a0:	60a5      	str	r5, [r4, #8]
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	bfa2      	ittt	ge
 80049a6:	6821      	ldrge	r1, [r4, #0]
 80049a8:	f021 0104 	bicge.w	r1, r1, #4
 80049ac:	6021      	strge	r1, [r4, #0]
 80049ae:	b90e      	cbnz	r6, 80049b4 <_printf_i+0x118>
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	d04d      	beq.n	8004a50 <_printf_i+0x1b4>
 80049b4:	4615      	mov	r5, r2
 80049b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ba:	fb03 6711 	mls	r7, r3, r1, r6
 80049be:	5dc7      	ldrb	r7, [r0, r7]
 80049c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049c4:	4637      	mov	r7, r6
 80049c6:	42bb      	cmp	r3, r7
 80049c8:	460e      	mov	r6, r1
 80049ca:	d9f4      	bls.n	80049b6 <_printf_i+0x11a>
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d10b      	bne.n	80049e8 <_printf_i+0x14c>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	07de      	lsls	r6, r3, #31
 80049d4:	d508      	bpl.n	80049e8 <_printf_i+0x14c>
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	6861      	ldr	r1, [r4, #4]
 80049da:	4299      	cmp	r1, r3
 80049dc:	bfde      	ittt	le
 80049de:	2330      	movle	r3, #48	; 0x30
 80049e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049e8:	1b52      	subs	r2, r2, r5
 80049ea:	6122      	str	r2, [r4, #16]
 80049ec:	f8cd a000 	str.w	sl, [sp]
 80049f0:	464b      	mov	r3, r9
 80049f2:	aa03      	add	r2, sp, #12
 80049f4:	4621      	mov	r1, r4
 80049f6:	4640      	mov	r0, r8
 80049f8:	f7ff fee2 	bl	80047c0 <_printf_common>
 80049fc:	3001      	adds	r0, #1
 80049fe:	d14c      	bne.n	8004a9a <_printf_i+0x1fe>
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	b004      	add	sp, #16
 8004a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0a:	4835      	ldr	r0, [pc, #212]	; (8004ae0 <_printf_i+0x244>)
 8004a0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a10:	6829      	ldr	r1, [r5, #0]
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a18:	6029      	str	r1, [r5, #0]
 8004a1a:	061d      	lsls	r5, r3, #24
 8004a1c:	d514      	bpl.n	8004a48 <_printf_i+0x1ac>
 8004a1e:	07df      	lsls	r7, r3, #31
 8004a20:	bf44      	itt	mi
 8004a22:	f043 0320 	orrmi.w	r3, r3, #32
 8004a26:	6023      	strmi	r3, [r4, #0]
 8004a28:	b91e      	cbnz	r6, 8004a32 <_printf_i+0x196>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	f023 0320 	bic.w	r3, r3, #32
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	2310      	movs	r3, #16
 8004a34:	e7b0      	b.n	8004998 <_printf_i+0xfc>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	f043 0320 	orr.w	r3, r3, #32
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	2378      	movs	r3, #120	; 0x78
 8004a40:	4828      	ldr	r0, [pc, #160]	; (8004ae4 <_printf_i+0x248>)
 8004a42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a46:	e7e3      	b.n	8004a10 <_printf_i+0x174>
 8004a48:	0659      	lsls	r1, r3, #25
 8004a4a:	bf48      	it	mi
 8004a4c:	b2b6      	uxthmi	r6, r6
 8004a4e:	e7e6      	b.n	8004a1e <_printf_i+0x182>
 8004a50:	4615      	mov	r5, r2
 8004a52:	e7bb      	b.n	80049cc <_printf_i+0x130>
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	6826      	ldr	r6, [r4, #0]
 8004a58:	6961      	ldr	r1, [r4, #20]
 8004a5a:	1d18      	adds	r0, r3, #4
 8004a5c:	6028      	str	r0, [r5, #0]
 8004a5e:	0635      	lsls	r5, r6, #24
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	d501      	bpl.n	8004a68 <_printf_i+0x1cc>
 8004a64:	6019      	str	r1, [r3, #0]
 8004a66:	e002      	b.n	8004a6e <_printf_i+0x1d2>
 8004a68:	0670      	lsls	r0, r6, #25
 8004a6a:	d5fb      	bpl.n	8004a64 <_printf_i+0x1c8>
 8004a6c:	8019      	strh	r1, [r3, #0]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	6123      	str	r3, [r4, #16]
 8004a72:	4615      	mov	r5, r2
 8004a74:	e7ba      	b.n	80049ec <_printf_i+0x150>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	1d1a      	adds	r2, r3, #4
 8004a7a:	602a      	str	r2, [r5, #0]
 8004a7c:	681d      	ldr	r5, [r3, #0]
 8004a7e:	6862      	ldr	r2, [r4, #4]
 8004a80:	2100      	movs	r1, #0
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7fb fbbc 	bl	8000200 <memchr>
 8004a88:	b108      	cbz	r0, 8004a8e <_printf_i+0x1f2>
 8004a8a:	1b40      	subs	r0, r0, r5
 8004a8c:	6060      	str	r0, [r4, #4]
 8004a8e:	6863      	ldr	r3, [r4, #4]
 8004a90:	6123      	str	r3, [r4, #16]
 8004a92:	2300      	movs	r3, #0
 8004a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a98:	e7a8      	b.n	80049ec <_printf_i+0x150>
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	47d0      	blx	sl
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d0ab      	beq.n	8004a00 <_printf_i+0x164>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	079b      	lsls	r3, r3, #30
 8004aac:	d413      	bmi.n	8004ad6 <_printf_i+0x23a>
 8004aae:	68e0      	ldr	r0, [r4, #12]
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	4298      	cmp	r0, r3
 8004ab4:	bfb8      	it	lt
 8004ab6:	4618      	movlt	r0, r3
 8004ab8:	e7a4      	b.n	8004a04 <_printf_i+0x168>
 8004aba:	2301      	movs	r3, #1
 8004abc:	4632      	mov	r2, r6
 8004abe:	4649      	mov	r1, r9
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	47d0      	blx	sl
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d09b      	beq.n	8004a00 <_printf_i+0x164>
 8004ac8:	3501      	adds	r5, #1
 8004aca:	68e3      	ldr	r3, [r4, #12]
 8004acc:	9903      	ldr	r1, [sp, #12]
 8004ace:	1a5b      	subs	r3, r3, r1
 8004ad0:	42ab      	cmp	r3, r5
 8004ad2:	dcf2      	bgt.n	8004aba <_printf_i+0x21e>
 8004ad4:	e7eb      	b.n	8004aae <_printf_i+0x212>
 8004ad6:	2500      	movs	r5, #0
 8004ad8:	f104 0619 	add.w	r6, r4, #25
 8004adc:	e7f5      	b.n	8004aca <_printf_i+0x22e>
 8004ade:	bf00      	nop
 8004ae0:	0800703e 	.word	0x0800703e
 8004ae4:	0800704f 	.word	0x0800704f

08004ae8 <siprintf>:
 8004ae8:	b40e      	push	{r1, r2, r3}
 8004aea:	b500      	push	{lr}
 8004aec:	b09c      	sub	sp, #112	; 0x70
 8004aee:	ab1d      	add	r3, sp, #116	; 0x74
 8004af0:	9002      	str	r0, [sp, #8]
 8004af2:	9006      	str	r0, [sp, #24]
 8004af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004af8:	4809      	ldr	r0, [pc, #36]	; (8004b20 <siprintf+0x38>)
 8004afa:	9107      	str	r1, [sp, #28]
 8004afc:	9104      	str	r1, [sp, #16]
 8004afe:	4909      	ldr	r1, [pc, #36]	; (8004b24 <siprintf+0x3c>)
 8004b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b04:	9105      	str	r1, [sp, #20]
 8004b06:	6800      	ldr	r0, [r0, #0]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	a902      	add	r1, sp, #8
 8004b0c:	f001 fb76 	bl	80061fc <_svfiprintf_r>
 8004b10:	9b02      	ldr	r3, [sp, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	b01c      	add	sp, #112	; 0x70
 8004b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b1c:	b003      	add	sp, #12
 8004b1e:	4770      	bx	lr
 8004b20:	2000000c 	.word	0x2000000c
 8004b24:	ffff0208 	.word	0xffff0208

08004b28 <quorem>:
 8004b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	6903      	ldr	r3, [r0, #16]
 8004b2e:	690c      	ldr	r4, [r1, #16]
 8004b30:	42a3      	cmp	r3, r4
 8004b32:	4607      	mov	r7, r0
 8004b34:	f2c0 8081 	blt.w	8004c3a <quorem+0x112>
 8004b38:	3c01      	subs	r4, #1
 8004b3a:	f101 0814 	add.w	r8, r1, #20
 8004b3e:	f100 0514 	add.w	r5, r0, #20
 8004b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b50:	3301      	adds	r3, #1
 8004b52:	429a      	cmp	r2, r3
 8004b54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b60:	d331      	bcc.n	8004bc6 <quorem+0x9e>
 8004b62:	f04f 0e00 	mov.w	lr, #0
 8004b66:	4640      	mov	r0, r8
 8004b68:	46ac      	mov	ip, r5
 8004b6a:	46f2      	mov	sl, lr
 8004b6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b70:	b293      	uxth	r3, r2
 8004b72:	fb06 e303 	mla	r3, r6, r3, lr
 8004b76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	ebaa 0303 	sub.w	r3, sl, r3
 8004b80:	f8dc a000 	ldr.w	sl, [ip]
 8004b84:	0c12      	lsrs	r2, r2, #16
 8004b86:	fa13 f38a 	uxtah	r3, r3, sl
 8004b8a:	fb06 e202 	mla	r2, r6, r2, lr
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	9b00      	ldr	r3, [sp, #0]
 8004b92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b96:	b292      	uxth	r2, r2
 8004b98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ba0:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ba4:	4581      	cmp	r9, r0
 8004ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004baa:	f84c 3b04 	str.w	r3, [ip], #4
 8004bae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bb2:	d2db      	bcs.n	8004b6c <quorem+0x44>
 8004bb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bb8:	b92b      	cbnz	r3, 8004bc6 <quorem+0x9e>
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	429d      	cmp	r5, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	d32e      	bcc.n	8004c22 <quorem+0xfa>
 8004bc4:	613c      	str	r4, [r7, #16]
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f001 f8c4 	bl	8005d54 <__mcmp>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	db24      	blt.n	8004c1a <quorem+0xf2>
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f04f 0c00 	mov.w	ip, #0
 8004bd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bdc:	f8d0 e000 	ldr.w	lr, [r0]
 8004be0:	b293      	uxth	r3, r2
 8004be2:	ebac 0303 	sub.w	r3, ip, r3
 8004be6:	0c12      	lsrs	r2, r2, #16
 8004be8:	fa13 f38e 	uxtah	r3, r3, lr
 8004bec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bfa:	45c1      	cmp	r9, r8
 8004bfc:	f840 3b04 	str.w	r3, [r0], #4
 8004c00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c04:	d2e8      	bcs.n	8004bd8 <quorem+0xb0>
 8004c06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c0e:	b922      	cbnz	r2, 8004c1a <quorem+0xf2>
 8004c10:	3b04      	subs	r3, #4
 8004c12:	429d      	cmp	r5, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	d30a      	bcc.n	8004c2e <quorem+0x106>
 8004c18:	613c      	str	r4, [r7, #16]
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	b003      	add	sp, #12
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	3b04      	subs	r3, #4
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	d1cc      	bne.n	8004bc4 <quorem+0x9c>
 8004c2a:	3c01      	subs	r4, #1
 8004c2c:	e7c7      	b.n	8004bbe <quorem+0x96>
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	3b04      	subs	r3, #4
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	d1f0      	bne.n	8004c18 <quorem+0xf0>
 8004c36:	3c01      	subs	r4, #1
 8004c38:	e7eb      	b.n	8004c12 <quorem+0xea>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e7ee      	b.n	8004c1c <quorem+0xf4>
	...

08004c40 <_dtoa_r>:
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	ed2d 8b04 	vpush	{d8-d9}
 8004c48:	ec57 6b10 	vmov	r6, r7, d0
 8004c4c:	b093      	sub	sp, #76	; 0x4c
 8004c4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c54:	9106      	str	r1, [sp, #24]
 8004c56:	ee10 aa10 	vmov	sl, s0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8004c60:	46bb      	mov	fp, r7
 8004c62:	b975      	cbnz	r5, 8004c82 <_dtoa_r+0x42>
 8004c64:	2010      	movs	r0, #16
 8004c66:	f000 fddd 	bl	8005824 <malloc>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c6e:	b920      	cbnz	r0, 8004c7a <_dtoa_r+0x3a>
 8004c70:	4ba7      	ldr	r3, [pc, #668]	; (8004f10 <_dtoa_r+0x2d0>)
 8004c72:	21ea      	movs	r1, #234	; 0xea
 8004c74:	48a7      	ldr	r0, [pc, #668]	; (8004f14 <_dtoa_r+0x2d4>)
 8004c76:	f001 fbd1 	bl	800641c <__assert_func>
 8004c7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c7e:	6005      	str	r5, [r0, #0]
 8004c80:	60c5      	str	r5, [r0, #12]
 8004c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	b151      	cbz	r1, 8004c9e <_dtoa_r+0x5e>
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	604a      	str	r2, [r1, #4]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4093      	lsls	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 fe1c 	bl	80058d0 <_Bfree>
 8004c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	1e3b      	subs	r3, r7, #0
 8004ca0:	bfaa      	itet	ge
 8004ca2:	2300      	movge	r3, #0
 8004ca4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004ca8:	f8c8 3000 	strge.w	r3, [r8]
 8004cac:	4b9a      	ldr	r3, [pc, #616]	; (8004f18 <_dtoa_r+0x2d8>)
 8004cae:	bfbc      	itt	lt
 8004cb0:	2201      	movlt	r2, #1
 8004cb2:	f8c8 2000 	strlt.w	r2, [r8]
 8004cb6:	ea33 030b 	bics.w	r3, r3, fp
 8004cba:	d11b      	bne.n	8004cf4 <_dtoa_r+0xb4>
 8004cbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cc8:	4333      	orrs	r3, r6
 8004cca:	f000 8592 	beq.w	80057f2 <_dtoa_r+0xbb2>
 8004cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cd0:	b963      	cbnz	r3, 8004cec <_dtoa_r+0xac>
 8004cd2:	4b92      	ldr	r3, [pc, #584]	; (8004f1c <_dtoa_r+0x2dc>)
 8004cd4:	e022      	b.n	8004d1c <_dtoa_r+0xdc>
 8004cd6:	4b92      	ldr	r3, [pc, #584]	; (8004f20 <_dtoa_r+0x2e0>)
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	9801      	ldr	r0, [sp, #4]
 8004ce2:	b013      	add	sp, #76	; 0x4c
 8004ce4:	ecbd 8b04 	vpop	{d8-d9}
 8004ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cec:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <_dtoa_r+0x2dc>)
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	e7f3      	b.n	8004cdc <_dtoa_r+0x9c>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4650      	mov	r0, sl
 8004cfa:	4659      	mov	r1, fp
 8004cfc:	f7fb fef4 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d00:	ec4b ab19 	vmov	d9, sl, fp
 8004d04:	4680      	mov	r8, r0
 8004d06:	b158      	cbz	r0, 8004d20 <_dtoa_r+0xe0>
 8004d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 856b 	beq.w	80057ec <_dtoa_r+0xbac>
 8004d16:	4883      	ldr	r0, [pc, #524]	; (8004f24 <_dtoa_r+0x2e4>)
 8004d18:	6018      	str	r0, [r3, #0]
 8004d1a:	1e43      	subs	r3, r0, #1
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	e7df      	b.n	8004ce0 <_dtoa_r+0xa0>
 8004d20:	ec4b ab10 	vmov	d0, sl, fp
 8004d24:	aa10      	add	r2, sp, #64	; 0x40
 8004d26:	a911      	add	r1, sp, #68	; 0x44
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f001 f8b9 	bl	8005ea0 <__d2b>
 8004d2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004d32:	ee08 0a10 	vmov	s16, r0
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	f000 8084 	beq.w	8004e44 <_dtoa_r+0x204>
 8004d3c:	ee19 3a90 	vmov	r3, s19
 8004d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d48:	4656      	mov	r6, sl
 8004d4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004d56:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <_dtoa_r+0x2e8>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	4639      	mov	r1, r7
 8004d5e:	f7fb faa3 	bl	80002a8 <__aeabi_dsub>
 8004d62:	a365      	add	r3, pc, #404	; (adr r3, 8004ef8 <_dtoa_r+0x2b8>)
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f7fb fc56 	bl	8000618 <__aeabi_dmul>
 8004d6c:	a364      	add	r3, pc, #400	; (adr r3, 8004f00 <_dtoa_r+0x2c0>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f7fb fa9b 	bl	80002ac <__adddf3>
 8004d76:	4606      	mov	r6, r0
 8004d78:	4628      	mov	r0, r5
 8004d7a:	460f      	mov	r7, r1
 8004d7c:	f7fb fbe2 	bl	8000544 <__aeabi_i2d>
 8004d80:	a361      	add	r3, pc, #388	; (adr r3, 8004f08 <_dtoa_r+0x2c8>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f7fb fc47 	bl	8000618 <__aeabi_dmul>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4630      	mov	r0, r6
 8004d90:	4639      	mov	r1, r7
 8004d92:	f7fb fa8b 	bl	80002ac <__adddf3>
 8004d96:	4606      	mov	r6, r0
 8004d98:	460f      	mov	r7, r1
 8004d9a:	f7fb feed 	bl	8000b78 <__aeabi_d2iz>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	9000      	str	r0, [sp, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	4630      	mov	r0, r6
 8004da6:	4639      	mov	r1, r7
 8004da8:	f7fb fea8 	bl	8000afc <__aeabi_dcmplt>
 8004dac:	b150      	cbz	r0, 8004dc4 <_dtoa_r+0x184>
 8004dae:	9800      	ldr	r0, [sp, #0]
 8004db0:	f7fb fbc8 	bl	8000544 <__aeabi_i2d>
 8004db4:	4632      	mov	r2, r6
 8004db6:	463b      	mov	r3, r7
 8004db8:	f7fb fe96 	bl	8000ae8 <__aeabi_dcmpeq>
 8004dbc:	b910      	cbnz	r0, 8004dc4 <_dtoa_r+0x184>
 8004dbe:	9b00      	ldr	r3, [sp, #0]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	9b00      	ldr	r3, [sp, #0]
 8004dc6:	2b16      	cmp	r3, #22
 8004dc8:	d85a      	bhi.n	8004e80 <_dtoa_r+0x240>
 8004dca:	9a00      	ldr	r2, [sp, #0]
 8004dcc:	4b57      	ldr	r3, [pc, #348]	; (8004f2c <_dtoa_r+0x2ec>)
 8004dce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	ec51 0b19 	vmov	r0, r1, d9
 8004dda:	f7fb fe8f 	bl	8000afc <__aeabi_dcmplt>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d050      	beq.n	8004e84 <_dtoa_r+0x244>
 8004de2:	9b00      	ldr	r3, [sp, #0]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dee:	1b5d      	subs	r5, r3, r5
 8004df0:	1e6b      	subs	r3, r5, #1
 8004df2:	9305      	str	r3, [sp, #20]
 8004df4:	bf45      	ittet	mi
 8004df6:	f1c5 0301 	rsbmi	r3, r5, #1
 8004dfa:	9304      	strmi	r3, [sp, #16]
 8004dfc:	2300      	movpl	r3, #0
 8004dfe:	2300      	movmi	r3, #0
 8004e00:	bf4c      	ite	mi
 8004e02:	9305      	strmi	r3, [sp, #20]
 8004e04:	9304      	strpl	r3, [sp, #16]
 8004e06:	9b00      	ldr	r3, [sp, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db3d      	blt.n	8004e88 <_dtoa_r+0x248>
 8004e0c:	9b05      	ldr	r3, [sp, #20]
 8004e0e:	9a00      	ldr	r2, [sp, #0]
 8004e10:	920a      	str	r2, [sp, #40]	; 0x28
 8004e12:	4413      	add	r3, r2
 8004e14:	9305      	str	r3, [sp, #20]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9307      	str	r3, [sp, #28]
 8004e1a:	9b06      	ldr	r3, [sp, #24]
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	f200 8089 	bhi.w	8004f34 <_dtoa_r+0x2f4>
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	bfc4      	itt	gt
 8004e26:	3b04      	subgt	r3, #4
 8004e28:	9306      	strgt	r3, [sp, #24]
 8004e2a:	9b06      	ldr	r3, [sp, #24]
 8004e2c:	f1a3 0302 	sub.w	r3, r3, #2
 8004e30:	bfcc      	ite	gt
 8004e32:	2500      	movgt	r5, #0
 8004e34:	2501      	movle	r5, #1
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	f200 8087 	bhi.w	8004f4a <_dtoa_r+0x30a>
 8004e3c:	e8df f003 	tbb	[pc, r3]
 8004e40:	59383a2d 	.word	0x59383a2d
 8004e44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004e48:	441d      	add	r5, r3
 8004e4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	bfc1      	itttt	gt
 8004e52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004e5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e62:	bfda      	itte	le
 8004e64:	f1c3 0320 	rsble	r3, r3, #32
 8004e68:	fa06 f003 	lslle.w	r0, r6, r3
 8004e6c:	4318      	orrgt	r0, r3
 8004e6e:	f7fb fb59 	bl	8000524 <__aeabi_ui2d>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4606      	mov	r6, r0
 8004e76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e7a:	3d01      	subs	r5, #1
 8004e7c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e7e:	e76a      	b.n	8004d56 <_dtoa_r+0x116>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e7b2      	b.n	8004dea <_dtoa_r+0x1aa>
 8004e84:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e86:	e7b1      	b.n	8004dec <_dtoa_r+0x1ac>
 8004e88:	9b04      	ldr	r3, [sp, #16]
 8004e8a:	9a00      	ldr	r2, [sp, #0]
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	9304      	str	r3, [sp, #16]
 8004e90:	4253      	negs	r3, r2
 8004e92:	9307      	str	r3, [sp, #28]
 8004e94:	2300      	movs	r3, #0
 8004e96:	930a      	str	r3, [sp, #40]	; 0x28
 8004e98:	e7bf      	b.n	8004e1a <_dtoa_r+0x1da>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9308      	str	r3, [sp, #32]
 8004e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dc55      	bgt.n	8004f50 <_dtoa_r+0x310>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	9209      	str	r2, [sp, #36]	; 0x24
 8004eae:	e00c      	b.n	8004eca <_dtoa_r+0x28a>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e7f3      	b.n	8004e9c <_dtoa_r+0x25c>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb8:	9308      	str	r3, [sp, #32]
 8004eba:	9b00      	ldr	r3, [sp, #0]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	bfb8      	it	lt
 8004ec8:	2301      	movlt	r3, #1
 8004eca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ecc:	2200      	movs	r2, #0
 8004ece:	6042      	str	r2, [r0, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	f102 0614 	add.w	r6, r2, #20
 8004ed6:	429e      	cmp	r6, r3
 8004ed8:	6841      	ldr	r1, [r0, #4]
 8004eda:	d93d      	bls.n	8004f58 <_dtoa_r+0x318>
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 fcb7 	bl	8005850 <_Balloc>
 8004ee2:	9001      	str	r0, [sp, #4]
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d13b      	bne.n	8004f60 <_dtoa_r+0x320>
 8004ee8:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <_dtoa_r+0x2f0>)
 8004eea:	4602      	mov	r2, r0
 8004eec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ef0:	e6c0      	b.n	8004c74 <_dtoa_r+0x34>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e7df      	b.n	8004eb6 <_dtoa_r+0x276>
 8004ef6:	bf00      	nop
 8004ef8:	636f4361 	.word	0x636f4361
 8004efc:	3fd287a7 	.word	0x3fd287a7
 8004f00:	8b60c8b3 	.word	0x8b60c8b3
 8004f04:	3fc68a28 	.word	0x3fc68a28
 8004f08:	509f79fb 	.word	0x509f79fb
 8004f0c:	3fd34413 	.word	0x3fd34413
 8004f10:	0800706d 	.word	0x0800706d
 8004f14:	08007084 	.word	0x08007084
 8004f18:	7ff00000 	.word	0x7ff00000
 8004f1c:	08007069 	.word	0x08007069
 8004f20:	08007060 	.word	0x08007060
 8004f24:	0800703d 	.word	0x0800703d
 8004f28:	3ff80000 	.word	0x3ff80000
 8004f2c:	08007178 	.word	0x08007178
 8004f30:	080070df 	.word	0x080070df
 8004f34:	2501      	movs	r5, #1
 8004f36:	2300      	movs	r3, #0
 8004f38:	9306      	str	r3, [sp, #24]
 8004f3a:	9508      	str	r5, [sp, #32]
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2312      	movs	r3, #18
 8004f48:	e7b0      	b.n	8004eac <_dtoa_r+0x26c>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	9308      	str	r3, [sp, #32]
 8004f4e:	e7f5      	b.n	8004f3c <_dtoa_r+0x2fc>
 8004f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f56:	e7b8      	b.n	8004eca <_dtoa_r+0x28a>
 8004f58:	3101      	adds	r1, #1
 8004f5a:	6041      	str	r1, [r0, #4]
 8004f5c:	0052      	lsls	r2, r2, #1
 8004f5e:	e7b8      	b.n	8004ed2 <_dtoa_r+0x292>
 8004f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f62:	9a01      	ldr	r2, [sp, #4]
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	2b0e      	cmp	r3, #14
 8004f6a:	f200 809d 	bhi.w	80050a8 <_dtoa_r+0x468>
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	f000 809a 	beq.w	80050a8 <_dtoa_r+0x468>
 8004f74:	9b00      	ldr	r3, [sp, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dd32      	ble.n	8004fe0 <_dtoa_r+0x3a0>
 8004f7a:	4ab7      	ldr	r2, [pc, #732]	; (8005258 <_dtoa_r+0x618>)
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f88:	9b00      	ldr	r3, [sp, #0]
 8004f8a:	05d8      	lsls	r0, r3, #23
 8004f8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004f90:	d516      	bpl.n	8004fc0 <_dtoa_r+0x380>
 8004f92:	4bb2      	ldr	r3, [pc, #712]	; (800525c <_dtoa_r+0x61c>)
 8004f94:	ec51 0b19 	vmov	r0, r1, d9
 8004f98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f9c:	f7fb fc66 	bl	800086c <__aeabi_ddiv>
 8004fa0:	f007 070f 	and.w	r7, r7, #15
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	468b      	mov	fp, r1
 8004fa8:	2503      	movs	r5, #3
 8004faa:	4eac      	ldr	r6, [pc, #688]	; (800525c <_dtoa_r+0x61c>)
 8004fac:	b957      	cbnz	r7, 8004fc4 <_dtoa_r+0x384>
 8004fae:	4642      	mov	r2, r8
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	f7fb fc59 	bl	800086c <__aeabi_ddiv>
 8004fba:	4682      	mov	sl, r0
 8004fbc:	468b      	mov	fp, r1
 8004fbe:	e028      	b.n	8005012 <_dtoa_r+0x3d2>
 8004fc0:	2502      	movs	r5, #2
 8004fc2:	e7f2      	b.n	8004faa <_dtoa_r+0x36a>
 8004fc4:	07f9      	lsls	r1, r7, #31
 8004fc6:	d508      	bpl.n	8004fda <_dtoa_r+0x39a>
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4649      	mov	r1, r9
 8004fcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fd0:	f7fb fb22 	bl	8000618 <__aeabi_dmul>
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	4680      	mov	r8, r0
 8004fd8:	4689      	mov	r9, r1
 8004fda:	107f      	asrs	r7, r7, #1
 8004fdc:	3608      	adds	r6, #8
 8004fde:	e7e5      	b.n	8004fac <_dtoa_r+0x36c>
 8004fe0:	f000 809b 	beq.w	800511a <_dtoa_r+0x4da>
 8004fe4:	9b00      	ldr	r3, [sp, #0]
 8004fe6:	4f9d      	ldr	r7, [pc, #628]	; (800525c <_dtoa_r+0x61c>)
 8004fe8:	425e      	negs	r6, r3
 8004fea:	4b9b      	ldr	r3, [pc, #620]	; (8005258 <_dtoa_r+0x618>)
 8004fec:	f006 020f 	and.w	r2, r6, #15
 8004ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	ec51 0b19 	vmov	r0, r1, d9
 8004ffc:	f7fb fb0c 	bl	8000618 <__aeabi_dmul>
 8005000:	1136      	asrs	r6, r6, #4
 8005002:	4682      	mov	sl, r0
 8005004:	468b      	mov	fp, r1
 8005006:	2300      	movs	r3, #0
 8005008:	2502      	movs	r5, #2
 800500a:	2e00      	cmp	r6, #0
 800500c:	d17a      	bne.n	8005104 <_dtoa_r+0x4c4>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1d3      	bne.n	8004fba <_dtoa_r+0x37a>
 8005012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8082 	beq.w	800511e <_dtoa_r+0x4de>
 800501a:	4b91      	ldr	r3, [pc, #580]	; (8005260 <_dtoa_r+0x620>)
 800501c:	2200      	movs	r2, #0
 800501e:	4650      	mov	r0, sl
 8005020:	4659      	mov	r1, fp
 8005022:	f7fb fd6b 	bl	8000afc <__aeabi_dcmplt>
 8005026:	2800      	cmp	r0, #0
 8005028:	d079      	beq.n	800511e <_dtoa_r+0x4de>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d076      	beq.n	800511e <_dtoa_r+0x4de>
 8005030:	9b02      	ldr	r3, [sp, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	dd36      	ble.n	80050a4 <_dtoa_r+0x464>
 8005036:	9b00      	ldr	r3, [sp, #0]
 8005038:	4650      	mov	r0, sl
 800503a:	4659      	mov	r1, fp
 800503c:	1e5f      	subs	r7, r3, #1
 800503e:	2200      	movs	r2, #0
 8005040:	4b88      	ldr	r3, [pc, #544]	; (8005264 <_dtoa_r+0x624>)
 8005042:	f7fb fae9 	bl	8000618 <__aeabi_dmul>
 8005046:	9e02      	ldr	r6, [sp, #8]
 8005048:	4682      	mov	sl, r0
 800504a:	468b      	mov	fp, r1
 800504c:	3501      	adds	r5, #1
 800504e:	4628      	mov	r0, r5
 8005050:	f7fb fa78 	bl	8000544 <__aeabi_i2d>
 8005054:	4652      	mov	r2, sl
 8005056:	465b      	mov	r3, fp
 8005058:	f7fb fade 	bl	8000618 <__aeabi_dmul>
 800505c:	4b82      	ldr	r3, [pc, #520]	; (8005268 <_dtoa_r+0x628>)
 800505e:	2200      	movs	r2, #0
 8005060:	f7fb f924 	bl	80002ac <__adddf3>
 8005064:	46d0      	mov	r8, sl
 8005066:	46d9      	mov	r9, fp
 8005068:	4682      	mov	sl, r0
 800506a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800506e:	2e00      	cmp	r6, #0
 8005070:	d158      	bne.n	8005124 <_dtoa_r+0x4e4>
 8005072:	4b7e      	ldr	r3, [pc, #504]	; (800526c <_dtoa_r+0x62c>)
 8005074:	2200      	movs	r2, #0
 8005076:	4640      	mov	r0, r8
 8005078:	4649      	mov	r1, r9
 800507a:	f7fb f915 	bl	80002a8 <__aeabi_dsub>
 800507e:	4652      	mov	r2, sl
 8005080:	465b      	mov	r3, fp
 8005082:	4680      	mov	r8, r0
 8005084:	4689      	mov	r9, r1
 8005086:	f7fb fd57 	bl	8000b38 <__aeabi_dcmpgt>
 800508a:	2800      	cmp	r0, #0
 800508c:	f040 8295 	bne.w	80055ba <_dtoa_r+0x97a>
 8005090:	4652      	mov	r2, sl
 8005092:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005096:	4640      	mov	r0, r8
 8005098:	4649      	mov	r1, r9
 800509a:	f7fb fd2f 	bl	8000afc <__aeabi_dcmplt>
 800509e:	2800      	cmp	r0, #0
 80050a0:	f040 8289 	bne.w	80055b6 <_dtoa_r+0x976>
 80050a4:	ec5b ab19 	vmov	sl, fp, d9
 80050a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f2c0 8148 	blt.w	8005340 <_dtoa_r+0x700>
 80050b0:	9a00      	ldr	r2, [sp, #0]
 80050b2:	2a0e      	cmp	r2, #14
 80050b4:	f300 8144 	bgt.w	8005340 <_dtoa_r+0x700>
 80050b8:	4b67      	ldr	r3, [pc, #412]	; (8005258 <_dtoa_r+0x618>)
 80050ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f280 80d5 	bge.w	8005274 <_dtoa_r+0x634>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f300 80d1 	bgt.w	8005274 <_dtoa_r+0x634>
 80050d2:	f040 826f 	bne.w	80055b4 <_dtoa_r+0x974>
 80050d6:	4b65      	ldr	r3, [pc, #404]	; (800526c <_dtoa_r+0x62c>)
 80050d8:	2200      	movs	r2, #0
 80050da:	4640      	mov	r0, r8
 80050dc:	4649      	mov	r1, r9
 80050de:	f7fb fa9b 	bl	8000618 <__aeabi_dmul>
 80050e2:	4652      	mov	r2, sl
 80050e4:	465b      	mov	r3, fp
 80050e6:	f7fb fd1d 	bl	8000b24 <__aeabi_dcmpge>
 80050ea:	9e03      	ldr	r6, [sp, #12]
 80050ec:	4637      	mov	r7, r6
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f040 8245 	bne.w	800557e <_dtoa_r+0x93e>
 80050f4:	9d01      	ldr	r5, [sp, #4]
 80050f6:	2331      	movs	r3, #49	; 0x31
 80050f8:	f805 3b01 	strb.w	r3, [r5], #1
 80050fc:	9b00      	ldr	r3, [sp, #0]
 80050fe:	3301      	adds	r3, #1
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	e240      	b.n	8005586 <_dtoa_r+0x946>
 8005104:	07f2      	lsls	r2, r6, #31
 8005106:	d505      	bpl.n	8005114 <_dtoa_r+0x4d4>
 8005108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510c:	f7fb fa84 	bl	8000618 <__aeabi_dmul>
 8005110:	3501      	adds	r5, #1
 8005112:	2301      	movs	r3, #1
 8005114:	1076      	asrs	r6, r6, #1
 8005116:	3708      	adds	r7, #8
 8005118:	e777      	b.n	800500a <_dtoa_r+0x3ca>
 800511a:	2502      	movs	r5, #2
 800511c:	e779      	b.n	8005012 <_dtoa_r+0x3d2>
 800511e:	9f00      	ldr	r7, [sp, #0]
 8005120:	9e03      	ldr	r6, [sp, #12]
 8005122:	e794      	b.n	800504e <_dtoa_r+0x40e>
 8005124:	9901      	ldr	r1, [sp, #4]
 8005126:	4b4c      	ldr	r3, [pc, #304]	; (8005258 <_dtoa_r+0x618>)
 8005128:	4431      	add	r1, r6
 800512a:	910d      	str	r1, [sp, #52]	; 0x34
 800512c:	9908      	ldr	r1, [sp, #32]
 800512e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005132:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005136:	2900      	cmp	r1, #0
 8005138:	d043      	beq.n	80051c2 <_dtoa_r+0x582>
 800513a:	494d      	ldr	r1, [pc, #308]	; (8005270 <_dtoa_r+0x630>)
 800513c:	2000      	movs	r0, #0
 800513e:	f7fb fb95 	bl	800086c <__aeabi_ddiv>
 8005142:	4652      	mov	r2, sl
 8005144:	465b      	mov	r3, fp
 8005146:	f7fb f8af 	bl	80002a8 <__aeabi_dsub>
 800514a:	9d01      	ldr	r5, [sp, #4]
 800514c:	4682      	mov	sl, r0
 800514e:	468b      	mov	fp, r1
 8005150:	4649      	mov	r1, r9
 8005152:	4640      	mov	r0, r8
 8005154:	f7fb fd10 	bl	8000b78 <__aeabi_d2iz>
 8005158:	4606      	mov	r6, r0
 800515a:	f7fb f9f3 	bl	8000544 <__aeabi_i2d>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4640      	mov	r0, r8
 8005164:	4649      	mov	r1, r9
 8005166:	f7fb f89f 	bl	80002a8 <__aeabi_dsub>
 800516a:	3630      	adds	r6, #48	; 0x30
 800516c:	f805 6b01 	strb.w	r6, [r5], #1
 8005170:	4652      	mov	r2, sl
 8005172:	465b      	mov	r3, fp
 8005174:	4680      	mov	r8, r0
 8005176:	4689      	mov	r9, r1
 8005178:	f7fb fcc0 	bl	8000afc <__aeabi_dcmplt>
 800517c:	2800      	cmp	r0, #0
 800517e:	d163      	bne.n	8005248 <_dtoa_r+0x608>
 8005180:	4642      	mov	r2, r8
 8005182:	464b      	mov	r3, r9
 8005184:	4936      	ldr	r1, [pc, #216]	; (8005260 <_dtoa_r+0x620>)
 8005186:	2000      	movs	r0, #0
 8005188:	f7fb f88e 	bl	80002a8 <__aeabi_dsub>
 800518c:	4652      	mov	r2, sl
 800518e:	465b      	mov	r3, fp
 8005190:	f7fb fcb4 	bl	8000afc <__aeabi_dcmplt>
 8005194:	2800      	cmp	r0, #0
 8005196:	f040 80b5 	bne.w	8005304 <_dtoa_r+0x6c4>
 800519a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800519c:	429d      	cmp	r5, r3
 800519e:	d081      	beq.n	80050a4 <_dtoa_r+0x464>
 80051a0:	4b30      	ldr	r3, [pc, #192]	; (8005264 <_dtoa_r+0x624>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	4650      	mov	r0, sl
 80051a6:	4659      	mov	r1, fp
 80051a8:	f7fb fa36 	bl	8000618 <__aeabi_dmul>
 80051ac:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <_dtoa_r+0x624>)
 80051ae:	4682      	mov	sl, r0
 80051b0:	468b      	mov	fp, r1
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	2200      	movs	r2, #0
 80051b8:	f7fb fa2e 	bl	8000618 <__aeabi_dmul>
 80051bc:	4680      	mov	r8, r0
 80051be:	4689      	mov	r9, r1
 80051c0:	e7c6      	b.n	8005150 <_dtoa_r+0x510>
 80051c2:	4650      	mov	r0, sl
 80051c4:	4659      	mov	r1, fp
 80051c6:	f7fb fa27 	bl	8000618 <__aeabi_dmul>
 80051ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051cc:	9d01      	ldr	r5, [sp, #4]
 80051ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80051d0:	4682      	mov	sl, r0
 80051d2:	468b      	mov	fp, r1
 80051d4:	4649      	mov	r1, r9
 80051d6:	4640      	mov	r0, r8
 80051d8:	f7fb fcce 	bl	8000b78 <__aeabi_d2iz>
 80051dc:	4606      	mov	r6, r0
 80051de:	f7fb f9b1 	bl	8000544 <__aeabi_i2d>
 80051e2:	3630      	adds	r6, #48	; 0x30
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4640      	mov	r0, r8
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb f85c 	bl	80002a8 <__aeabi_dsub>
 80051f0:	f805 6b01 	strb.w	r6, [r5], #1
 80051f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f6:	429d      	cmp	r5, r3
 80051f8:	4680      	mov	r8, r0
 80051fa:	4689      	mov	r9, r1
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	d124      	bne.n	800524c <_dtoa_r+0x60c>
 8005202:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <_dtoa_r+0x630>)
 8005204:	4650      	mov	r0, sl
 8005206:	4659      	mov	r1, fp
 8005208:	f7fb f850 	bl	80002ac <__adddf3>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f7fb fc90 	bl	8000b38 <__aeabi_dcmpgt>
 8005218:	2800      	cmp	r0, #0
 800521a:	d173      	bne.n	8005304 <_dtoa_r+0x6c4>
 800521c:	4652      	mov	r2, sl
 800521e:	465b      	mov	r3, fp
 8005220:	4913      	ldr	r1, [pc, #76]	; (8005270 <_dtoa_r+0x630>)
 8005222:	2000      	movs	r0, #0
 8005224:	f7fb f840 	bl	80002a8 <__aeabi_dsub>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4640      	mov	r0, r8
 800522e:	4649      	mov	r1, r9
 8005230:	f7fb fc64 	bl	8000afc <__aeabi_dcmplt>
 8005234:	2800      	cmp	r0, #0
 8005236:	f43f af35 	beq.w	80050a4 <_dtoa_r+0x464>
 800523a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800523c:	1e6b      	subs	r3, r5, #1
 800523e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005240:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	d0f8      	beq.n	800523a <_dtoa_r+0x5fa>
 8005248:	9700      	str	r7, [sp, #0]
 800524a:	e049      	b.n	80052e0 <_dtoa_r+0x6a0>
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <_dtoa_r+0x624>)
 800524e:	f7fb f9e3 	bl	8000618 <__aeabi_dmul>
 8005252:	4680      	mov	r8, r0
 8005254:	4689      	mov	r9, r1
 8005256:	e7bd      	b.n	80051d4 <_dtoa_r+0x594>
 8005258:	08007178 	.word	0x08007178
 800525c:	08007150 	.word	0x08007150
 8005260:	3ff00000 	.word	0x3ff00000
 8005264:	40240000 	.word	0x40240000
 8005268:	401c0000 	.word	0x401c0000
 800526c:	40140000 	.word	0x40140000
 8005270:	3fe00000 	.word	0x3fe00000
 8005274:	9d01      	ldr	r5, [sp, #4]
 8005276:	4656      	mov	r6, sl
 8005278:	465f      	mov	r7, fp
 800527a:	4642      	mov	r2, r8
 800527c:	464b      	mov	r3, r9
 800527e:	4630      	mov	r0, r6
 8005280:	4639      	mov	r1, r7
 8005282:	f7fb faf3 	bl	800086c <__aeabi_ddiv>
 8005286:	f7fb fc77 	bl	8000b78 <__aeabi_d2iz>
 800528a:	4682      	mov	sl, r0
 800528c:	f7fb f95a 	bl	8000544 <__aeabi_i2d>
 8005290:	4642      	mov	r2, r8
 8005292:	464b      	mov	r3, r9
 8005294:	f7fb f9c0 	bl	8000618 <__aeabi_dmul>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4630      	mov	r0, r6
 800529e:	4639      	mov	r1, r7
 80052a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80052a4:	f7fb f800 	bl	80002a8 <__aeabi_dsub>
 80052a8:	f805 6b01 	strb.w	r6, [r5], #1
 80052ac:	9e01      	ldr	r6, [sp, #4]
 80052ae:	9f03      	ldr	r7, [sp, #12]
 80052b0:	1bae      	subs	r6, r5, r6
 80052b2:	42b7      	cmp	r7, r6
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	d135      	bne.n	8005326 <_dtoa_r+0x6e6>
 80052ba:	f7fa fff7 	bl	80002ac <__adddf3>
 80052be:	4642      	mov	r2, r8
 80052c0:	464b      	mov	r3, r9
 80052c2:	4606      	mov	r6, r0
 80052c4:	460f      	mov	r7, r1
 80052c6:	f7fb fc37 	bl	8000b38 <__aeabi_dcmpgt>
 80052ca:	b9d0      	cbnz	r0, 8005302 <_dtoa_r+0x6c2>
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb fc08 	bl	8000ae8 <__aeabi_dcmpeq>
 80052d8:	b110      	cbz	r0, 80052e0 <_dtoa_r+0x6a0>
 80052da:	f01a 0f01 	tst.w	sl, #1
 80052de:	d110      	bne.n	8005302 <_dtoa_r+0x6c2>
 80052e0:	4620      	mov	r0, r4
 80052e2:	ee18 1a10 	vmov	r1, s16
 80052e6:	f000 faf3 	bl	80058d0 <_Bfree>
 80052ea:	2300      	movs	r3, #0
 80052ec:	9800      	ldr	r0, [sp, #0]
 80052ee:	702b      	strb	r3, [r5, #0]
 80052f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052f2:	3001      	adds	r0, #1
 80052f4:	6018      	str	r0, [r3, #0]
 80052f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f43f acf1 	beq.w	8004ce0 <_dtoa_r+0xa0>
 80052fe:	601d      	str	r5, [r3, #0]
 8005300:	e4ee      	b.n	8004ce0 <_dtoa_r+0xa0>
 8005302:	9f00      	ldr	r7, [sp, #0]
 8005304:	462b      	mov	r3, r5
 8005306:	461d      	mov	r5, r3
 8005308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800530c:	2a39      	cmp	r2, #57	; 0x39
 800530e:	d106      	bne.n	800531e <_dtoa_r+0x6de>
 8005310:	9a01      	ldr	r2, [sp, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d1f7      	bne.n	8005306 <_dtoa_r+0x6c6>
 8005316:	9901      	ldr	r1, [sp, #4]
 8005318:	2230      	movs	r2, #48	; 0x30
 800531a:	3701      	adds	r7, #1
 800531c:	700a      	strb	r2, [r1, #0]
 800531e:	781a      	ldrb	r2, [r3, #0]
 8005320:	3201      	adds	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e790      	b.n	8005248 <_dtoa_r+0x608>
 8005326:	4ba6      	ldr	r3, [pc, #664]	; (80055c0 <_dtoa_r+0x980>)
 8005328:	2200      	movs	r2, #0
 800532a:	f7fb f975 	bl	8000618 <__aeabi_dmul>
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	4606      	mov	r6, r0
 8005334:	460f      	mov	r7, r1
 8005336:	f7fb fbd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800533a:	2800      	cmp	r0, #0
 800533c:	d09d      	beq.n	800527a <_dtoa_r+0x63a>
 800533e:	e7cf      	b.n	80052e0 <_dtoa_r+0x6a0>
 8005340:	9a08      	ldr	r2, [sp, #32]
 8005342:	2a00      	cmp	r2, #0
 8005344:	f000 80d7 	beq.w	80054f6 <_dtoa_r+0x8b6>
 8005348:	9a06      	ldr	r2, [sp, #24]
 800534a:	2a01      	cmp	r2, #1
 800534c:	f300 80ba 	bgt.w	80054c4 <_dtoa_r+0x884>
 8005350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005352:	2a00      	cmp	r2, #0
 8005354:	f000 80b2 	beq.w	80054bc <_dtoa_r+0x87c>
 8005358:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800535c:	9e07      	ldr	r6, [sp, #28]
 800535e:	9d04      	ldr	r5, [sp, #16]
 8005360:	9a04      	ldr	r2, [sp, #16]
 8005362:	441a      	add	r2, r3
 8005364:	9204      	str	r2, [sp, #16]
 8005366:	9a05      	ldr	r2, [sp, #20]
 8005368:	2101      	movs	r1, #1
 800536a:	441a      	add	r2, r3
 800536c:	4620      	mov	r0, r4
 800536e:	9205      	str	r2, [sp, #20]
 8005370:	f000 fb66 	bl	8005a40 <__i2b>
 8005374:	4607      	mov	r7, r0
 8005376:	2d00      	cmp	r5, #0
 8005378:	dd0c      	ble.n	8005394 <_dtoa_r+0x754>
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	dd09      	ble.n	8005394 <_dtoa_r+0x754>
 8005380:	42ab      	cmp	r3, r5
 8005382:	9a04      	ldr	r2, [sp, #16]
 8005384:	bfa8      	it	ge
 8005386:	462b      	movge	r3, r5
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	9204      	str	r2, [sp, #16]
 800538c:	9a05      	ldr	r2, [sp, #20]
 800538e:	1aed      	subs	r5, r5, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	9b07      	ldr	r3, [sp, #28]
 8005396:	b31b      	cbz	r3, 80053e0 <_dtoa_r+0x7a0>
 8005398:	9b08      	ldr	r3, [sp, #32]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80af 	beq.w	80054fe <_dtoa_r+0x8be>
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	dd13      	ble.n	80053cc <_dtoa_r+0x78c>
 80053a4:	4639      	mov	r1, r7
 80053a6:	4632      	mov	r2, r6
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fc09 	bl	8005bc0 <__pow5mult>
 80053ae:	ee18 2a10 	vmov	r2, s16
 80053b2:	4601      	mov	r1, r0
 80053b4:	4607      	mov	r7, r0
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fb58 	bl	8005a6c <__multiply>
 80053bc:	ee18 1a10 	vmov	r1, s16
 80053c0:	4680      	mov	r8, r0
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 fa84 	bl	80058d0 <_Bfree>
 80053c8:	ee08 8a10 	vmov	s16, r8
 80053cc:	9b07      	ldr	r3, [sp, #28]
 80053ce:	1b9a      	subs	r2, r3, r6
 80053d0:	d006      	beq.n	80053e0 <_dtoa_r+0x7a0>
 80053d2:	ee18 1a10 	vmov	r1, s16
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 fbf2 	bl	8005bc0 <__pow5mult>
 80053dc:	ee08 0a10 	vmov	s16, r0
 80053e0:	2101      	movs	r1, #1
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 fb2c 	bl	8005a40 <__i2b>
 80053e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	4606      	mov	r6, r0
 80053ee:	f340 8088 	ble.w	8005502 <_dtoa_r+0x8c2>
 80053f2:	461a      	mov	r2, r3
 80053f4:	4601      	mov	r1, r0
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 fbe2 	bl	8005bc0 <__pow5mult>
 80053fc:	9b06      	ldr	r3, [sp, #24]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	4606      	mov	r6, r0
 8005402:	f340 8081 	ble.w	8005508 <_dtoa_r+0x8c8>
 8005406:	f04f 0800 	mov.w	r8, #0
 800540a:	6933      	ldr	r3, [r6, #16]
 800540c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005410:	6918      	ldr	r0, [r3, #16]
 8005412:	f000 fac5 	bl	80059a0 <__hi0bits>
 8005416:	f1c0 0020 	rsb	r0, r0, #32
 800541a:	9b05      	ldr	r3, [sp, #20]
 800541c:	4418      	add	r0, r3
 800541e:	f010 001f 	ands.w	r0, r0, #31
 8005422:	f000 8092 	beq.w	800554a <_dtoa_r+0x90a>
 8005426:	f1c0 0320 	rsb	r3, r0, #32
 800542a:	2b04      	cmp	r3, #4
 800542c:	f340 808a 	ble.w	8005544 <_dtoa_r+0x904>
 8005430:	f1c0 001c 	rsb	r0, r0, #28
 8005434:	9b04      	ldr	r3, [sp, #16]
 8005436:	4403      	add	r3, r0
 8005438:	9304      	str	r3, [sp, #16]
 800543a:	9b05      	ldr	r3, [sp, #20]
 800543c:	4403      	add	r3, r0
 800543e:	4405      	add	r5, r0
 8005440:	9305      	str	r3, [sp, #20]
 8005442:	9b04      	ldr	r3, [sp, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	dd07      	ble.n	8005458 <_dtoa_r+0x818>
 8005448:	ee18 1a10 	vmov	r1, s16
 800544c:	461a      	mov	r2, r3
 800544e:	4620      	mov	r0, r4
 8005450:	f000 fc10 	bl	8005c74 <__lshift>
 8005454:	ee08 0a10 	vmov	s16, r0
 8005458:	9b05      	ldr	r3, [sp, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	dd05      	ble.n	800546a <_dtoa_r+0x82a>
 800545e:	4631      	mov	r1, r6
 8005460:	461a      	mov	r2, r3
 8005462:	4620      	mov	r0, r4
 8005464:	f000 fc06 	bl	8005c74 <__lshift>
 8005468:	4606      	mov	r6, r0
 800546a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d06e      	beq.n	800554e <_dtoa_r+0x90e>
 8005470:	ee18 0a10 	vmov	r0, s16
 8005474:	4631      	mov	r1, r6
 8005476:	f000 fc6d 	bl	8005d54 <__mcmp>
 800547a:	2800      	cmp	r0, #0
 800547c:	da67      	bge.n	800554e <_dtoa_r+0x90e>
 800547e:	9b00      	ldr	r3, [sp, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	ee18 1a10 	vmov	r1, s16
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	220a      	movs	r2, #10
 800548a:	2300      	movs	r3, #0
 800548c:	4620      	mov	r0, r4
 800548e:	f000 fa41 	bl	8005914 <__multadd>
 8005492:	9b08      	ldr	r3, [sp, #32]
 8005494:	ee08 0a10 	vmov	s16, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 81b1 	beq.w	8005800 <_dtoa_r+0xbc0>
 800549e:	2300      	movs	r3, #0
 80054a0:	4639      	mov	r1, r7
 80054a2:	220a      	movs	r2, #10
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fa35 	bl	8005914 <__multadd>
 80054aa:	9b02      	ldr	r3, [sp, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	4607      	mov	r7, r0
 80054b0:	f300 808e 	bgt.w	80055d0 <_dtoa_r+0x990>
 80054b4:	9b06      	ldr	r3, [sp, #24]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	dc51      	bgt.n	800555e <_dtoa_r+0x91e>
 80054ba:	e089      	b.n	80055d0 <_dtoa_r+0x990>
 80054bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054c2:	e74b      	b.n	800535c <_dtoa_r+0x71c>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	1e5e      	subs	r6, r3, #1
 80054c8:	9b07      	ldr	r3, [sp, #28]
 80054ca:	42b3      	cmp	r3, r6
 80054cc:	bfbf      	itttt	lt
 80054ce:	9b07      	ldrlt	r3, [sp, #28]
 80054d0:	9607      	strlt	r6, [sp, #28]
 80054d2:	1af2      	sublt	r2, r6, r3
 80054d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054d6:	bfb6      	itet	lt
 80054d8:	189b      	addlt	r3, r3, r2
 80054da:	1b9e      	subge	r6, r3, r6
 80054dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	bfb8      	it	lt
 80054e2:	2600      	movlt	r6, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bfb7      	itett	lt
 80054e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80054ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80054f0:	1a9d      	sublt	r5, r3, r2
 80054f2:	2300      	movlt	r3, #0
 80054f4:	e734      	b.n	8005360 <_dtoa_r+0x720>
 80054f6:	9e07      	ldr	r6, [sp, #28]
 80054f8:	9d04      	ldr	r5, [sp, #16]
 80054fa:	9f08      	ldr	r7, [sp, #32]
 80054fc:	e73b      	b.n	8005376 <_dtoa_r+0x736>
 80054fe:	9a07      	ldr	r2, [sp, #28]
 8005500:	e767      	b.n	80053d2 <_dtoa_r+0x792>
 8005502:	9b06      	ldr	r3, [sp, #24]
 8005504:	2b01      	cmp	r3, #1
 8005506:	dc18      	bgt.n	800553a <_dtoa_r+0x8fa>
 8005508:	f1ba 0f00 	cmp.w	sl, #0
 800550c:	d115      	bne.n	800553a <_dtoa_r+0x8fa>
 800550e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005512:	b993      	cbnz	r3, 800553a <_dtoa_r+0x8fa>
 8005514:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005518:	0d1b      	lsrs	r3, r3, #20
 800551a:	051b      	lsls	r3, r3, #20
 800551c:	b183      	cbz	r3, 8005540 <_dtoa_r+0x900>
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	3301      	adds	r3, #1
 8005522:	9304      	str	r3, [sp, #16]
 8005524:	9b05      	ldr	r3, [sp, #20]
 8005526:	3301      	adds	r3, #1
 8005528:	9305      	str	r3, [sp, #20]
 800552a:	f04f 0801 	mov.w	r8, #1
 800552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af6a 	bne.w	800540a <_dtoa_r+0x7ca>
 8005536:	2001      	movs	r0, #1
 8005538:	e76f      	b.n	800541a <_dtoa_r+0x7da>
 800553a:	f04f 0800 	mov.w	r8, #0
 800553e:	e7f6      	b.n	800552e <_dtoa_r+0x8ee>
 8005540:	4698      	mov	r8, r3
 8005542:	e7f4      	b.n	800552e <_dtoa_r+0x8ee>
 8005544:	f43f af7d 	beq.w	8005442 <_dtoa_r+0x802>
 8005548:	4618      	mov	r0, r3
 800554a:	301c      	adds	r0, #28
 800554c:	e772      	b.n	8005434 <_dtoa_r+0x7f4>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	dc37      	bgt.n	80055c4 <_dtoa_r+0x984>
 8005554:	9b06      	ldr	r3, [sp, #24]
 8005556:	2b02      	cmp	r3, #2
 8005558:	dd34      	ble.n	80055c4 <_dtoa_r+0x984>
 800555a:	9b03      	ldr	r3, [sp, #12]
 800555c:	9302      	str	r3, [sp, #8]
 800555e:	9b02      	ldr	r3, [sp, #8]
 8005560:	b96b      	cbnz	r3, 800557e <_dtoa_r+0x93e>
 8005562:	4631      	mov	r1, r6
 8005564:	2205      	movs	r2, #5
 8005566:	4620      	mov	r0, r4
 8005568:	f000 f9d4 	bl	8005914 <__multadd>
 800556c:	4601      	mov	r1, r0
 800556e:	4606      	mov	r6, r0
 8005570:	ee18 0a10 	vmov	r0, s16
 8005574:	f000 fbee 	bl	8005d54 <__mcmp>
 8005578:	2800      	cmp	r0, #0
 800557a:	f73f adbb 	bgt.w	80050f4 <_dtoa_r+0x4b4>
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	9d01      	ldr	r5, [sp, #4]
 8005582:	43db      	mvns	r3, r3
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	f04f 0800 	mov.w	r8, #0
 800558a:	4631      	mov	r1, r6
 800558c:	4620      	mov	r0, r4
 800558e:	f000 f99f 	bl	80058d0 <_Bfree>
 8005592:	2f00      	cmp	r7, #0
 8005594:	f43f aea4 	beq.w	80052e0 <_dtoa_r+0x6a0>
 8005598:	f1b8 0f00 	cmp.w	r8, #0
 800559c:	d005      	beq.n	80055aa <_dtoa_r+0x96a>
 800559e:	45b8      	cmp	r8, r7
 80055a0:	d003      	beq.n	80055aa <_dtoa_r+0x96a>
 80055a2:	4641      	mov	r1, r8
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 f993 	bl	80058d0 <_Bfree>
 80055aa:	4639      	mov	r1, r7
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f98f 	bl	80058d0 <_Bfree>
 80055b2:	e695      	b.n	80052e0 <_dtoa_r+0x6a0>
 80055b4:	2600      	movs	r6, #0
 80055b6:	4637      	mov	r7, r6
 80055b8:	e7e1      	b.n	800557e <_dtoa_r+0x93e>
 80055ba:	9700      	str	r7, [sp, #0]
 80055bc:	4637      	mov	r7, r6
 80055be:	e599      	b.n	80050f4 <_dtoa_r+0x4b4>
 80055c0:	40240000 	.word	0x40240000
 80055c4:	9b08      	ldr	r3, [sp, #32]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80ca 	beq.w	8005760 <_dtoa_r+0xb20>
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	9302      	str	r3, [sp, #8]
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	dd05      	ble.n	80055e0 <_dtoa_r+0x9a0>
 80055d4:	4639      	mov	r1, r7
 80055d6:	462a      	mov	r2, r5
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fb4b 	bl	8005c74 <__lshift>
 80055de:	4607      	mov	r7, r0
 80055e0:	f1b8 0f00 	cmp.w	r8, #0
 80055e4:	d05b      	beq.n	800569e <_dtoa_r+0xa5e>
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f931 	bl	8005850 <_Balloc>
 80055ee:	4605      	mov	r5, r0
 80055f0:	b928      	cbnz	r0, 80055fe <_dtoa_r+0x9be>
 80055f2:	4b87      	ldr	r3, [pc, #540]	; (8005810 <_dtoa_r+0xbd0>)
 80055f4:	4602      	mov	r2, r0
 80055f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80055fa:	f7ff bb3b 	b.w	8004c74 <_dtoa_r+0x34>
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	3202      	adds	r2, #2
 8005602:	0092      	lsls	r2, r2, #2
 8005604:	f107 010c 	add.w	r1, r7, #12
 8005608:	300c      	adds	r0, #12
 800560a:	f000 f913 	bl	8005834 <memcpy>
 800560e:	2201      	movs	r2, #1
 8005610:	4629      	mov	r1, r5
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fb2e 	bl	8005c74 <__lshift>
 8005618:	9b01      	ldr	r3, [sp, #4]
 800561a:	f103 0901 	add.w	r9, r3, #1
 800561e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005622:	4413      	add	r3, r2
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	f00a 0301 	and.w	r3, sl, #1
 800562a:	46b8      	mov	r8, r7
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	4607      	mov	r7, r0
 8005630:	4631      	mov	r1, r6
 8005632:	ee18 0a10 	vmov	r0, s16
 8005636:	f7ff fa77 	bl	8004b28 <quorem>
 800563a:	4641      	mov	r1, r8
 800563c:	9002      	str	r0, [sp, #8]
 800563e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005642:	ee18 0a10 	vmov	r0, s16
 8005646:	f000 fb85 	bl	8005d54 <__mcmp>
 800564a:	463a      	mov	r2, r7
 800564c:	9003      	str	r0, [sp, #12]
 800564e:	4631      	mov	r1, r6
 8005650:	4620      	mov	r0, r4
 8005652:	f000 fb9b 	bl	8005d8c <__mdiff>
 8005656:	68c2      	ldr	r2, [r0, #12]
 8005658:	f109 3bff 	add.w	fp, r9, #4294967295
 800565c:	4605      	mov	r5, r0
 800565e:	bb02      	cbnz	r2, 80056a2 <_dtoa_r+0xa62>
 8005660:	4601      	mov	r1, r0
 8005662:	ee18 0a10 	vmov	r0, s16
 8005666:	f000 fb75 	bl	8005d54 <__mcmp>
 800566a:	4602      	mov	r2, r0
 800566c:	4629      	mov	r1, r5
 800566e:	4620      	mov	r0, r4
 8005670:	9207      	str	r2, [sp, #28]
 8005672:	f000 f92d 	bl	80058d0 <_Bfree>
 8005676:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800567a:	ea43 0102 	orr.w	r1, r3, r2
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	430b      	orrs	r3, r1
 8005682:	464d      	mov	r5, r9
 8005684:	d10f      	bne.n	80056a6 <_dtoa_r+0xa66>
 8005686:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800568a:	d02a      	beq.n	80056e2 <_dtoa_r+0xaa2>
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	dd02      	ble.n	8005698 <_dtoa_r+0xa58>
 8005692:	9b02      	ldr	r3, [sp, #8]
 8005694:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005698:	f88b a000 	strb.w	sl, [fp]
 800569c:	e775      	b.n	800558a <_dtoa_r+0x94a>
 800569e:	4638      	mov	r0, r7
 80056a0:	e7ba      	b.n	8005618 <_dtoa_r+0x9d8>
 80056a2:	2201      	movs	r2, #1
 80056a4:	e7e2      	b.n	800566c <_dtoa_r+0xa2c>
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db04      	blt.n	80056b6 <_dtoa_r+0xa76>
 80056ac:	9906      	ldr	r1, [sp, #24]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	9904      	ldr	r1, [sp, #16]
 80056b2:	430b      	orrs	r3, r1
 80056b4:	d122      	bne.n	80056fc <_dtoa_r+0xabc>
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	ddee      	ble.n	8005698 <_dtoa_r+0xa58>
 80056ba:	ee18 1a10 	vmov	r1, s16
 80056be:	2201      	movs	r2, #1
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 fad7 	bl	8005c74 <__lshift>
 80056c6:	4631      	mov	r1, r6
 80056c8:	ee08 0a10 	vmov	s16, r0
 80056cc:	f000 fb42 	bl	8005d54 <__mcmp>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	dc03      	bgt.n	80056dc <_dtoa_r+0xa9c>
 80056d4:	d1e0      	bne.n	8005698 <_dtoa_r+0xa58>
 80056d6:	f01a 0f01 	tst.w	sl, #1
 80056da:	d0dd      	beq.n	8005698 <_dtoa_r+0xa58>
 80056dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056e0:	d1d7      	bne.n	8005692 <_dtoa_r+0xa52>
 80056e2:	2339      	movs	r3, #57	; 0x39
 80056e4:	f88b 3000 	strb.w	r3, [fp]
 80056e8:	462b      	mov	r3, r5
 80056ea:	461d      	mov	r5, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056f2:	2a39      	cmp	r2, #57	; 0x39
 80056f4:	d071      	beq.n	80057da <_dtoa_r+0xb9a>
 80056f6:	3201      	adds	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e746      	b.n	800558a <_dtoa_r+0x94a>
 80056fc:	2a00      	cmp	r2, #0
 80056fe:	dd07      	ble.n	8005710 <_dtoa_r+0xad0>
 8005700:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005704:	d0ed      	beq.n	80056e2 <_dtoa_r+0xaa2>
 8005706:	f10a 0301 	add.w	r3, sl, #1
 800570a:	f88b 3000 	strb.w	r3, [fp]
 800570e:	e73c      	b.n	800558a <_dtoa_r+0x94a>
 8005710:	9b05      	ldr	r3, [sp, #20]
 8005712:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005716:	4599      	cmp	r9, r3
 8005718:	d047      	beq.n	80057aa <_dtoa_r+0xb6a>
 800571a:	ee18 1a10 	vmov	r1, s16
 800571e:	2300      	movs	r3, #0
 8005720:	220a      	movs	r2, #10
 8005722:	4620      	mov	r0, r4
 8005724:	f000 f8f6 	bl	8005914 <__multadd>
 8005728:	45b8      	cmp	r8, r7
 800572a:	ee08 0a10 	vmov	s16, r0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	f04f 020a 	mov.w	r2, #10
 8005736:	4641      	mov	r1, r8
 8005738:	4620      	mov	r0, r4
 800573a:	d106      	bne.n	800574a <_dtoa_r+0xb0a>
 800573c:	f000 f8ea 	bl	8005914 <__multadd>
 8005740:	4680      	mov	r8, r0
 8005742:	4607      	mov	r7, r0
 8005744:	f109 0901 	add.w	r9, r9, #1
 8005748:	e772      	b.n	8005630 <_dtoa_r+0x9f0>
 800574a:	f000 f8e3 	bl	8005914 <__multadd>
 800574e:	4639      	mov	r1, r7
 8005750:	4680      	mov	r8, r0
 8005752:	2300      	movs	r3, #0
 8005754:	220a      	movs	r2, #10
 8005756:	4620      	mov	r0, r4
 8005758:	f000 f8dc 	bl	8005914 <__multadd>
 800575c:	4607      	mov	r7, r0
 800575e:	e7f1      	b.n	8005744 <_dtoa_r+0xb04>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	9302      	str	r3, [sp, #8]
 8005764:	9d01      	ldr	r5, [sp, #4]
 8005766:	ee18 0a10 	vmov	r0, s16
 800576a:	4631      	mov	r1, r6
 800576c:	f7ff f9dc 	bl	8004b28 <quorem>
 8005770:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005774:	9b01      	ldr	r3, [sp, #4]
 8005776:	f805 ab01 	strb.w	sl, [r5], #1
 800577a:	1aea      	subs	r2, r5, r3
 800577c:	9b02      	ldr	r3, [sp, #8]
 800577e:	4293      	cmp	r3, r2
 8005780:	dd09      	ble.n	8005796 <_dtoa_r+0xb56>
 8005782:	ee18 1a10 	vmov	r1, s16
 8005786:	2300      	movs	r3, #0
 8005788:	220a      	movs	r2, #10
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f8c2 	bl	8005914 <__multadd>
 8005790:	ee08 0a10 	vmov	s16, r0
 8005794:	e7e7      	b.n	8005766 <_dtoa_r+0xb26>
 8005796:	9b02      	ldr	r3, [sp, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	bfc8      	it	gt
 800579c:	461d      	movgt	r5, r3
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	bfd8      	it	le
 80057a2:	2501      	movle	r5, #1
 80057a4:	441d      	add	r5, r3
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	ee18 1a10 	vmov	r1, s16
 80057ae:	2201      	movs	r2, #1
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fa5f 	bl	8005c74 <__lshift>
 80057b6:	4631      	mov	r1, r6
 80057b8:	ee08 0a10 	vmov	s16, r0
 80057bc:	f000 faca 	bl	8005d54 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	dc91      	bgt.n	80056e8 <_dtoa_r+0xaa8>
 80057c4:	d102      	bne.n	80057cc <_dtoa_r+0xb8c>
 80057c6:	f01a 0f01 	tst.w	sl, #1
 80057ca:	d18d      	bne.n	80056e8 <_dtoa_r+0xaa8>
 80057cc:	462b      	mov	r3, r5
 80057ce:	461d      	mov	r5, r3
 80057d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057d4:	2a30      	cmp	r2, #48	; 0x30
 80057d6:	d0fa      	beq.n	80057ce <_dtoa_r+0xb8e>
 80057d8:	e6d7      	b.n	800558a <_dtoa_r+0x94a>
 80057da:	9a01      	ldr	r2, [sp, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d184      	bne.n	80056ea <_dtoa_r+0xaaa>
 80057e0:	9b00      	ldr	r3, [sp, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2331      	movs	r3, #49	; 0x31
 80057e8:	7013      	strb	r3, [r2, #0]
 80057ea:	e6ce      	b.n	800558a <_dtoa_r+0x94a>
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <_dtoa_r+0xbd4>)
 80057ee:	f7ff ba95 	b.w	8004d1c <_dtoa_r+0xdc>
 80057f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f aa6e 	bne.w	8004cd6 <_dtoa_r+0x96>
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <_dtoa_r+0xbd8>)
 80057fc:	f7ff ba8e 	b.w	8004d1c <_dtoa_r+0xdc>
 8005800:	9b02      	ldr	r3, [sp, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	dcae      	bgt.n	8005764 <_dtoa_r+0xb24>
 8005806:	9b06      	ldr	r3, [sp, #24]
 8005808:	2b02      	cmp	r3, #2
 800580a:	f73f aea8 	bgt.w	800555e <_dtoa_r+0x91e>
 800580e:	e7a9      	b.n	8005764 <_dtoa_r+0xb24>
 8005810:	080070df 	.word	0x080070df
 8005814:	0800703c 	.word	0x0800703c
 8005818:	08007060 	.word	0x08007060

0800581c <_localeconv_r>:
 800581c:	4800      	ldr	r0, [pc, #0]	; (8005820 <_localeconv_r+0x4>)
 800581e:	4770      	bx	lr
 8005820:	20000160 	.word	0x20000160

08005824 <malloc>:
 8005824:	4b02      	ldr	r3, [pc, #8]	; (8005830 <malloc+0xc>)
 8005826:	4601      	mov	r1, r0
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f000 bc17 	b.w	800605c <_malloc_r>
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c

08005834 <memcpy>:
 8005834:	440a      	add	r2, r1
 8005836:	4291      	cmp	r1, r2
 8005838:	f100 33ff 	add.w	r3, r0, #4294967295
 800583c:	d100      	bne.n	8005840 <memcpy+0xc>
 800583e:	4770      	bx	lr
 8005840:	b510      	push	{r4, lr}
 8005842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800584a:	4291      	cmp	r1, r2
 800584c:	d1f9      	bne.n	8005842 <memcpy+0xe>
 800584e:	bd10      	pop	{r4, pc}

08005850 <_Balloc>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005854:	4604      	mov	r4, r0
 8005856:	460d      	mov	r5, r1
 8005858:	b976      	cbnz	r6, 8005878 <_Balloc+0x28>
 800585a:	2010      	movs	r0, #16
 800585c:	f7ff ffe2 	bl	8005824 <malloc>
 8005860:	4602      	mov	r2, r0
 8005862:	6260      	str	r0, [r4, #36]	; 0x24
 8005864:	b920      	cbnz	r0, 8005870 <_Balloc+0x20>
 8005866:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <_Balloc+0x78>)
 8005868:	4818      	ldr	r0, [pc, #96]	; (80058cc <_Balloc+0x7c>)
 800586a:	2166      	movs	r1, #102	; 0x66
 800586c:	f000 fdd6 	bl	800641c <__assert_func>
 8005870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005874:	6006      	str	r6, [r0, #0]
 8005876:	60c6      	str	r6, [r0, #12]
 8005878:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800587a:	68f3      	ldr	r3, [r6, #12]
 800587c:	b183      	cbz	r3, 80058a0 <_Balloc+0x50>
 800587e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005886:	b9b8      	cbnz	r0, 80058b8 <_Balloc+0x68>
 8005888:	2101      	movs	r1, #1
 800588a:	fa01 f605 	lsl.w	r6, r1, r5
 800588e:	1d72      	adds	r2, r6, #5
 8005890:	0092      	lsls	r2, r2, #2
 8005892:	4620      	mov	r0, r4
 8005894:	f000 fb60 	bl	8005f58 <_calloc_r>
 8005898:	b160      	cbz	r0, 80058b4 <_Balloc+0x64>
 800589a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800589e:	e00e      	b.n	80058be <_Balloc+0x6e>
 80058a0:	2221      	movs	r2, #33	; 0x21
 80058a2:	2104      	movs	r1, #4
 80058a4:	4620      	mov	r0, r4
 80058a6:	f000 fb57 	bl	8005f58 <_calloc_r>
 80058aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ac:	60f0      	str	r0, [r6, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e4      	bne.n	800587e <_Balloc+0x2e>
 80058b4:	2000      	movs	r0, #0
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	6802      	ldr	r2, [r0, #0]
 80058ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058be:	2300      	movs	r3, #0
 80058c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058c4:	e7f7      	b.n	80058b6 <_Balloc+0x66>
 80058c6:	bf00      	nop
 80058c8:	0800706d 	.word	0x0800706d
 80058cc:	080070f0 	.word	0x080070f0

080058d0 <_Bfree>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058d4:	4605      	mov	r5, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	b976      	cbnz	r6, 80058f8 <_Bfree+0x28>
 80058da:	2010      	movs	r0, #16
 80058dc:	f7ff ffa2 	bl	8005824 <malloc>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6268      	str	r0, [r5, #36]	; 0x24
 80058e4:	b920      	cbnz	r0, 80058f0 <_Bfree+0x20>
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <_Bfree+0x3c>)
 80058e8:	4809      	ldr	r0, [pc, #36]	; (8005910 <_Bfree+0x40>)
 80058ea:	218a      	movs	r1, #138	; 0x8a
 80058ec:	f000 fd96 	bl	800641c <__assert_func>
 80058f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058f4:	6006      	str	r6, [r0, #0]
 80058f6:	60c6      	str	r6, [r0, #12]
 80058f8:	b13c      	cbz	r4, 800590a <_Bfree+0x3a>
 80058fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058fc:	6862      	ldr	r2, [r4, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005904:	6021      	str	r1, [r4, #0]
 8005906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	0800706d 	.word	0x0800706d
 8005910:	080070f0 	.word	0x080070f0

08005914 <__multadd>:
 8005914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005918:	690d      	ldr	r5, [r1, #16]
 800591a:	4607      	mov	r7, r0
 800591c:	460c      	mov	r4, r1
 800591e:	461e      	mov	r6, r3
 8005920:	f101 0c14 	add.w	ip, r1, #20
 8005924:	2000      	movs	r0, #0
 8005926:	f8dc 3000 	ldr.w	r3, [ip]
 800592a:	b299      	uxth	r1, r3
 800592c:	fb02 6101 	mla	r1, r2, r1, r6
 8005930:	0c1e      	lsrs	r6, r3, #16
 8005932:	0c0b      	lsrs	r3, r1, #16
 8005934:	fb02 3306 	mla	r3, r2, r6, r3
 8005938:	b289      	uxth	r1, r1
 800593a:	3001      	adds	r0, #1
 800593c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005940:	4285      	cmp	r5, r0
 8005942:	f84c 1b04 	str.w	r1, [ip], #4
 8005946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800594a:	dcec      	bgt.n	8005926 <__multadd+0x12>
 800594c:	b30e      	cbz	r6, 8005992 <__multadd+0x7e>
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	42ab      	cmp	r3, r5
 8005952:	dc19      	bgt.n	8005988 <__multadd+0x74>
 8005954:	6861      	ldr	r1, [r4, #4]
 8005956:	4638      	mov	r0, r7
 8005958:	3101      	adds	r1, #1
 800595a:	f7ff ff79 	bl	8005850 <_Balloc>
 800595e:	4680      	mov	r8, r0
 8005960:	b928      	cbnz	r0, 800596e <__multadd+0x5a>
 8005962:	4602      	mov	r2, r0
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <__multadd+0x84>)
 8005966:	480d      	ldr	r0, [pc, #52]	; (800599c <__multadd+0x88>)
 8005968:	21b5      	movs	r1, #181	; 0xb5
 800596a:	f000 fd57 	bl	800641c <__assert_func>
 800596e:	6922      	ldr	r2, [r4, #16]
 8005970:	3202      	adds	r2, #2
 8005972:	f104 010c 	add.w	r1, r4, #12
 8005976:	0092      	lsls	r2, r2, #2
 8005978:	300c      	adds	r0, #12
 800597a:	f7ff ff5b 	bl	8005834 <memcpy>
 800597e:	4621      	mov	r1, r4
 8005980:	4638      	mov	r0, r7
 8005982:	f7ff ffa5 	bl	80058d0 <_Bfree>
 8005986:	4644      	mov	r4, r8
 8005988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800598c:	3501      	adds	r5, #1
 800598e:	615e      	str	r6, [r3, #20]
 8005990:	6125      	str	r5, [r4, #16]
 8005992:	4620      	mov	r0, r4
 8005994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005998:	080070df 	.word	0x080070df
 800599c:	080070f0 	.word	0x080070f0

080059a0 <__hi0bits>:
 80059a0:	0c03      	lsrs	r3, r0, #16
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	b9d3      	cbnz	r3, 80059dc <__hi0bits+0x3c>
 80059a6:	0400      	lsls	r0, r0, #16
 80059a8:	2310      	movs	r3, #16
 80059aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059ae:	bf04      	itt	eq
 80059b0:	0200      	lsleq	r0, r0, #8
 80059b2:	3308      	addeq	r3, #8
 80059b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059b8:	bf04      	itt	eq
 80059ba:	0100      	lsleq	r0, r0, #4
 80059bc:	3304      	addeq	r3, #4
 80059be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059c2:	bf04      	itt	eq
 80059c4:	0080      	lsleq	r0, r0, #2
 80059c6:	3302      	addeq	r3, #2
 80059c8:	2800      	cmp	r0, #0
 80059ca:	db05      	blt.n	80059d8 <__hi0bits+0x38>
 80059cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059d0:	f103 0301 	add.w	r3, r3, #1
 80059d4:	bf08      	it	eq
 80059d6:	2320      	moveq	r3, #32
 80059d8:	4618      	mov	r0, r3
 80059da:	4770      	bx	lr
 80059dc:	2300      	movs	r3, #0
 80059de:	e7e4      	b.n	80059aa <__hi0bits+0xa>

080059e0 <__lo0bits>:
 80059e0:	6803      	ldr	r3, [r0, #0]
 80059e2:	f013 0207 	ands.w	r2, r3, #7
 80059e6:	4601      	mov	r1, r0
 80059e8:	d00b      	beq.n	8005a02 <__lo0bits+0x22>
 80059ea:	07da      	lsls	r2, r3, #31
 80059ec:	d423      	bmi.n	8005a36 <__lo0bits+0x56>
 80059ee:	0798      	lsls	r0, r3, #30
 80059f0:	bf49      	itett	mi
 80059f2:	085b      	lsrmi	r3, r3, #1
 80059f4:	089b      	lsrpl	r3, r3, #2
 80059f6:	2001      	movmi	r0, #1
 80059f8:	600b      	strmi	r3, [r1, #0]
 80059fa:	bf5c      	itt	pl
 80059fc:	600b      	strpl	r3, [r1, #0]
 80059fe:	2002      	movpl	r0, #2
 8005a00:	4770      	bx	lr
 8005a02:	b298      	uxth	r0, r3
 8005a04:	b9a8      	cbnz	r0, 8005a32 <__lo0bits+0x52>
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	2010      	movs	r0, #16
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	b90a      	cbnz	r2, 8005a12 <__lo0bits+0x32>
 8005a0e:	3008      	adds	r0, #8
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	071a      	lsls	r2, r3, #28
 8005a14:	bf04      	itt	eq
 8005a16:	091b      	lsreq	r3, r3, #4
 8005a18:	3004      	addeq	r0, #4
 8005a1a:	079a      	lsls	r2, r3, #30
 8005a1c:	bf04      	itt	eq
 8005a1e:	089b      	lsreq	r3, r3, #2
 8005a20:	3002      	addeq	r0, #2
 8005a22:	07da      	lsls	r2, r3, #31
 8005a24:	d403      	bmi.n	8005a2e <__lo0bits+0x4e>
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	f100 0001 	add.w	r0, r0, #1
 8005a2c:	d005      	beq.n	8005a3a <__lo0bits+0x5a>
 8005a2e:	600b      	str	r3, [r1, #0]
 8005a30:	4770      	bx	lr
 8005a32:	4610      	mov	r0, r2
 8005a34:	e7e9      	b.n	8005a0a <__lo0bits+0x2a>
 8005a36:	2000      	movs	r0, #0
 8005a38:	4770      	bx	lr
 8005a3a:	2020      	movs	r0, #32
 8005a3c:	4770      	bx	lr
	...

08005a40 <__i2b>:
 8005a40:	b510      	push	{r4, lr}
 8005a42:	460c      	mov	r4, r1
 8005a44:	2101      	movs	r1, #1
 8005a46:	f7ff ff03 	bl	8005850 <_Balloc>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	b928      	cbnz	r0, 8005a5a <__i2b+0x1a>
 8005a4e:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <__i2b+0x24>)
 8005a50:	4805      	ldr	r0, [pc, #20]	; (8005a68 <__i2b+0x28>)
 8005a52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a56:	f000 fce1 	bl	800641c <__assert_func>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	6144      	str	r4, [r0, #20]
 8005a5e:	6103      	str	r3, [r0, #16]
 8005a60:	bd10      	pop	{r4, pc}
 8005a62:	bf00      	nop
 8005a64:	080070df 	.word	0x080070df
 8005a68:	080070f0 	.word	0x080070f0

08005a6c <__multiply>:
 8005a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a70:	4691      	mov	r9, r2
 8005a72:	690a      	ldr	r2, [r1, #16]
 8005a74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	bfb8      	it	lt
 8005a7c:	460b      	movlt	r3, r1
 8005a7e:	460c      	mov	r4, r1
 8005a80:	bfbc      	itt	lt
 8005a82:	464c      	movlt	r4, r9
 8005a84:	4699      	movlt	r9, r3
 8005a86:	6927      	ldr	r7, [r4, #16]
 8005a88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	6861      	ldr	r1, [r4, #4]
 8005a90:	eb07 060a 	add.w	r6, r7, sl
 8005a94:	42b3      	cmp	r3, r6
 8005a96:	b085      	sub	sp, #20
 8005a98:	bfb8      	it	lt
 8005a9a:	3101      	addlt	r1, #1
 8005a9c:	f7ff fed8 	bl	8005850 <_Balloc>
 8005aa0:	b930      	cbnz	r0, 8005ab0 <__multiply+0x44>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b44      	ldr	r3, [pc, #272]	; (8005bb8 <__multiply+0x14c>)
 8005aa6:	4845      	ldr	r0, [pc, #276]	; (8005bbc <__multiply+0x150>)
 8005aa8:	f240 115d 	movw	r1, #349	; 0x15d
 8005aac:	f000 fcb6 	bl	800641c <__assert_func>
 8005ab0:	f100 0514 	add.w	r5, r0, #20
 8005ab4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ab8:	462b      	mov	r3, r5
 8005aba:	2200      	movs	r2, #0
 8005abc:	4543      	cmp	r3, r8
 8005abe:	d321      	bcc.n	8005b04 <__multiply+0x98>
 8005ac0:	f104 0314 	add.w	r3, r4, #20
 8005ac4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ac8:	f109 0314 	add.w	r3, r9, #20
 8005acc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ad0:	9202      	str	r2, [sp, #8]
 8005ad2:	1b3a      	subs	r2, r7, r4
 8005ad4:	3a15      	subs	r2, #21
 8005ad6:	f022 0203 	bic.w	r2, r2, #3
 8005ada:	3204      	adds	r2, #4
 8005adc:	f104 0115 	add.w	r1, r4, #21
 8005ae0:	428f      	cmp	r7, r1
 8005ae2:	bf38      	it	cc
 8005ae4:	2204      	movcc	r2, #4
 8005ae6:	9201      	str	r2, [sp, #4]
 8005ae8:	9a02      	ldr	r2, [sp, #8]
 8005aea:	9303      	str	r3, [sp, #12]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d80c      	bhi.n	8005b0a <__multiply+0x9e>
 8005af0:	2e00      	cmp	r6, #0
 8005af2:	dd03      	ble.n	8005afc <__multiply+0x90>
 8005af4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05a      	beq.n	8005bb2 <__multiply+0x146>
 8005afc:	6106      	str	r6, [r0, #16]
 8005afe:	b005      	add	sp, #20
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	f843 2b04 	str.w	r2, [r3], #4
 8005b08:	e7d8      	b.n	8005abc <__multiply+0x50>
 8005b0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b0e:	f1ba 0f00 	cmp.w	sl, #0
 8005b12:	d024      	beq.n	8005b5e <__multiply+0xf2>
 8005b14:	f104 0e14 	add.w	lr, r4, #20
 8005b18:	46a9      	mov	r9, r5
 8005b1a:	f04f 0c00 	mov.w	ip, #0
 8005b1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b22:	f8d9 1000 	ldr.w	r1, [r9]
 8005b26:	fa1f fb82 	uxth.w	fp, r2
 8005b2a:	b289      	uxth	r1, r1
 8005b2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b34:	f8d9 2000 	ldr.w	r2, [r9]
 8005b38:	4461      	add	r1, ip
 8005b3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b46:	b289      	uxth	r1, r1
 8005b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b4c:	4577      	cmp	r7, lr
 8005b4e:	f849 1b04 	str.w	r1, [r9], #4
 8005b52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b56:	d8e2      	bhi.n	8005b1e <__multiply+0xb2>
 8005b58:	9a01      	ldr	r2, [sp, #4]
 8005b5a:	f845 c002 	str.w	ip, [r5, r2]
 8005b5e:	9a03      	ldr	r2, [sp, #12]
 8005b60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b64:	3304      	adds	r3, #4
 8005b66:	f1b9 0f00 	cmp.w	r9, #0
 8005b6a:	d020      	beq.n	8005bae <__multiply+0x142>
 8005b6c:	6829      	ldr	r1, [r5, #0]
 8005b6e:	f104 0c14 	add.w	ip, r4, #20
 8005b72:	46ae      	mov	lr, r5
 8005b74:	f04f 0a00 	mov.w	sl, #0
 8005b78:	f8bc b000 	ldrh.w	fp, [ip]
 8005b7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b80:	fb09 220b 	mla	r2, r9, fp, r2
 8005b84:	4492      	add	sl, r2
 8005b86:	b289      	uxth	r1, r1
 8005b88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b8c:	f84e 1b04 	str.w	r1, [lr], #4
 8005b90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b94:	f8be 1000 	ldrh.w	r1, [lr]
 8005b98:	0c12      	lsrs	r2, r2, #16
 8005b9a:	fb09 1102 	mla	r1, r9, r2, r1
 8005b9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ba2:	4567      	cmp	r7, ip
 8005ba4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ba8:	d8e6      	bhi.n	8005b78 <__multiply+0x10c>
 8005baa:	9a01      	ldr	r2, [sp, #4]
 8005bac:	50a9      	str	r1, [r5, r2]
 8005bae:	3504      	adds	r5, #4
 8005bb0:	e79a      	b.n	8005ae8 <__multiply+0x7c>
 8005bb2:	3e01      	subs	r6, #1
 8005bb4:	e79c      	b.n	8005af0 <__multiply+0x84>
 8005bb6:	bf00      	nop
 8005bb8:	080070df 	.word	0x080070df
 8005bbc:	080070f0 	.word	0x080070f0

08005bc0 <__pow5mult>:
 8005bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	4615      	mov	r5, r2
 8005bc6:	f012 0203 	ands.w	r2, r2, #3
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	d007      	beq.n	8005be0 <__pow5mult+0x20>
 8005bd0:	4c25      	ldr	r4, [pc, #148]	; (8005c68 <__pow5mult+0xa8>)
 8005bd2:	3a01      	subs	r2, #1
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bda:	f7ff fe9b 	bl	8005914 <__multadd>
 8005bde:	4607      	mov	r7, r0
 8005be0:	10ad      	asrs	r5, r5, #2
 8005be2:	d03d      	beq.n	8005c60 <__pow5mult+0xa0>
 8005be4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005be6:	b97c      	cbnz	r4, 8005c08 <__pow5mult+0x48>
 8005be8:	2010      	movs	r0, #16
 8005bea:	f7ff fe1b 	bl	8005824 <malloc>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6270      	str	r0, [r6, #36]	; 0x24
 8005bf2:	b928      	cbnz	r0, 8005c00 <__pow5mult+0x40>
 8005bf4:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <__pow5mult+0xac>)
 8005bf6:	481e      	ldr	r0, [pc, #120]	; (8005c70 <__pow5mult+0xb0>)
 8005bf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005bfc:	f000 fc0e 	bl	800641c <__assert_func>
 8005c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c04:	6004      	str	r4, [r0, #0]
 8005c06:	60c4      	str	r4, [r0, #12]
 8005c08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c10:	b94c      	cbnz	r4, 8005c26 <__pow5mult+0x66>
 8005c12:	f240 2171 	movw	r1, #625	; 0x271
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7ff ff12 	bl	8005a40 <__i2b>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c22:	4604      	mov	r4, r0
 8005c24:	6003      	str	r3, [r0, #0]
 8005c26:	f04f 0900 	mov.w	r9, #0
 8005c2a:	07eb      	lsls	r3, r5, #31
 8005c2c:	d50a      	bpl.n	8005c44 <__pow5mult+0x84>
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4622      	mov	r2, r4
 8005c32:	4630      	mov	r0, r6
 8005c34:	f7ff ff1a 	bl	8005a6c <__multiply>
 8005c38:	4639      	mov	r1, r7
 8005c3a:	4680      	mov	r8, r0
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7ff fe47 	bl	80058d0 <_Bfree>
 8005c42:	4647      	mov	r7, r8
 8005c44:	106d      	asrs	r5, r5, #1
 8005c46:	d00b      	beq.n	8005c60 <__pow5mult+0xa0>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	b938      	cbnz	r0, 8005c5c <__pow5mult+0x9c>
 8005c4c:	4622      	mov	r2, r4
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4630      	mov	r0, r6
 8005c52:	f7ff ff0b 	bl	8005a6c <__multiply>
 8005c56:	6020      	str	r0, [r4, #0]
 8005c58:	f8c0 9000 	str.w	r9, [r0]
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	e7e4      	b.n	8005c2a <__pow5mult+0x6a>
 8005c60:	4638      	mov	r0, r7
 8005c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c66:	bf00      	nop
 8005c68:	08007240 	.word	0x08007240
 8005c6c:	0800706d 	.word	0x0800706d
 8005c70:	080070f0 	.word	0x080070f0

08005c74 <__lshift>:
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	460c      	mov	r4, r1
 8005c7a:	6849      	ldr	r1, [r1, #4]
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	4607      	mov	r7, r0
 8005c86:	4691      	mov	r9, r2
 8005c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c8c:	f108 0601 	add.w	r6, r8, #1
 8005c90:	42b3      	cmp	r3, r6
 8005c92:	db0b      	blt.n	8005cac <__lshift+0x38>
 8005c94:	4638      	mov	r0, r7
 8005c96:	f7ff fddb 	bl	8005850 <_Balloc>
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	b948      	cbnz	r0, 8005cb2 <__lshift+0x3e>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <__lshift+0xd8>)
 8005ca2:	482b      	ldr	r0, [pc, #172]	; (8005d50 <__lshift+0xdc>)
 8005ca4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ca8:	f000 fbb8 	bl	800641c <__assert_func>
 8005cac:	3101      	adds	r1, #1
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	e7ee      	b.n	8005c90 <__lshift+0x1c>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f100 0114 	add.w	r1, r0, #20
 8005cb8:	f100 0210 	add.w	r2, r0, #16
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	4553      	cmp	r3, sl
 8005cc0:	db37      	blt.n	8005d32 <__lshift+0xbe>
 8005cc2:	6920      	ldr	r0, [r4, #16]
 8005cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cc8:	f104 0314 	add.w	r3, r4, #20
 8005ccc:	f019 091f 	ands.w	r9, r9, #31
 8005cd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cd8:	d02f      	beq.n	8005d3a <__lshift+0xc6>
 8005cda:	f1c9 0e20 	rsb	lr, r9, #32
 8005cde:	468a      	mov	sl, r1
 8005ce0:	f04f 0c00 	mov.w	ip, #0
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	fa02 f209 	lsl.w	r2, r2, r9
 8005cea:	ea42 020c 	orr.w	r2, r2, ip
 8005cee:	f84a 2b04 	str.w	r2, [sl], #4
 8005cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf6:	4298      	cmp	r0, r3
 8005cf8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005cfc:	d8f2      	bhi.n	8005ce4 <__lshift+0x70>
 8005cfe:	1b03      	subs	r3, r0, r4
 8005d00:	3b15      	subs	r3, #21
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	3304      	adds	r3, #4
 8005d08:	f104 0215 	add.w	r2, r4, #21
 8005d0c:	4290      	cmp	r0, r2
 8005d0e:	bf38      	it	cc
 8005d10:	2304      	movcc	r3, #4
 8005d12:	f841 c003 	str.w	ip, [r1, r3]
 8005d16:	f1bc 0f00 	cmp.w	ip, #0
 8005d1a:	d001      	beq.n	8005d20 <__lshift+0xac>
 8005d1c:	f108 0602 	add.w	r6, r8, #2
 8005d20:	3e01      	subs	r6, #1
 8005d22:	4638      	mov	r0, r7
 8005d24:	612e      	str	r6, [r5, #16]
 8005d26:	4621      	mov	r1, r4
 8005d28:	f7ff fdd2 	bl	80058d0 <_Bfree>
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d36:	3301      	adds	r3, #1
 8005d38:	e7c1      	b.n	8005cbe <__lshift+0x4a>
 8005d3a:	3904      	subs	r1, #4
 8005d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d44:	4298      	cmp	r0, r3
 8005d46:	d8f9      	bhi.n	8005d3c <__lshift+0xc8>
 8005d48:	e7ea      	b.n	8005d20 <__lshift+0xac>
 8005d4a:	bf00      	nop
 8005d4c:	080070df 	.word	0x080070df
 8005d50:	080070f0 	.word	0x080070f0

08005d54 <__mcmp>:
 8005d54:	b530      	push	{r4, r5, lr}
 8005d56:	6902      	ldr	r2, [r0, #16]
 8005d58:	690c      	ldr	r4, [r1, #16]
 8005d5a:	1b12      	subs	r2, r2, r4
 8005d5c:	d10e      	bne.n	8005d7c <__mcmp+0x28>
 8005d5e:	f100 0314 	add.w	r3, r0, #20
 8005d62:	3114      	adds	r1, #20
 8005d64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d74:	42a5      	cmp	r5, r4
 8005d76:	d003      	beq.n	8005d80 <__mcmp+0x2c>
 8005d78:	d305      	bcc.n	8005d86 <__mcmp+0x32>
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	bd30      	pop	{r4, r5, pc}
 8005d80:	4283      	cmp	r3, r0
 8005d82:	d3f3      	bcc.n	8005d6c <__mcmp+0x18>
 8005d84:	e7fa      	b.n	8005d7c <__mcmp+0x28>
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	e7f7      	b.n	8005d7c <__mcmp+0x28>

08005d8c <__mdiff>:
 8005d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	460c      	mov	r4, r1
 8005d92:	4606      	mov	r6, r0
 8005d94:	4611      	mov	r1, r2
 8005d96:	4620      	mov	r0, r4
 8005d98:	4690      	mov	r8, r2
 8005d9a:	f7ff ffdb 	bl	8005d54 <__mcmp>
 8005d9e:	1e05      	subs	r5, r0, #0
 8005da0:	d110      	bne.n	8005dc4 <__mdiff+0x38>
 8005da2:	4629      	mov	r1, r5
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff fd53 	bl	8005850 <_Balloc>
 8005daa:	b930      	cbnz	r0, 8005dba <__mdiff+0x2e>
 8005dac:	4b3a      	ldr	r3, [pc, #232]	; (8005e98 <__mdiff+0x10c>)
 8005dae:	4602      	mov	r2, r0
 8005db0:	f240 2132 	movw	r1, #562	; 0x232
 8005db4:	4839      	ldr	r0, [pc, #228]	; (8005e9c <__mdiff+0x110>)
 8005db6:	f000 fb31 	bl	800641c <__assert_func>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	bfa4      	itt	ge
 8005dc6:	4643      	movge	r3, r8
 8005dc8:	46a0      	movge	r8, r4
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005dd0:	bfa6      	itte	ge
 8005dd2:	461c      	movge	r4, r3
 8005dd4:	2500      	movge	r5, #0
 8005dd6:	2501      	movlt	r5, #1
 8005dd8:	f7ff fd3a 	bl	8005850 <_Balloc>
 8005ddc:	b920      	cbnz	r0, 8005de8 <__mdiff+0x5c>
 8005dde:	4b2e      	ldr	r3, [pc, #184]	; (8005e98 <__mdiff+0x10c>)
 8005de0:	4602      	mov	r2, r0
 8005de2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005de6:	e7e5      	b.n	8005db4 <__mdiff+0x28>
 8005de8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005dec:	6926      	ldr	r6, [r4, #16]
 8005dee:	60c5      	str	r5, [r0, #12]
 8005df0:	f104 0914 	add.w	r9, r4, #20
 8005df4:	f108 0514 	add.w	r5, r8, #20
 8005df8:	f100 0e14 	add.w	lr, r0, #20
 8005dfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e04:	f108 0210 	add.w	r2, r8, #16
 8005e08:	46f2      	mov	sl, lr
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e14:	fa1f f883 	uxth.w	r8, r3
 8005e18:	fa11 f18b 	uxtah	r1, r1, fp
 8005e1c:	0c1b      	lsrs	r3, r3, #16
 8005e1e:	eba1 0808 	sub.w	r8, r1, r8
 8005e22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e2a:	fa1f f888 	uxth.w	r8, r8
 8005e2e:	1419      	asrs	r1, r3, #16
 8005e30:	454e      	cmp	r6, r9
 8005e32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e36:	f84a 3b04 	str.w	r3, [sl], #4
 8005e3a:	d8e7      	bhi.n	8005e0c <__mdiff+0x80>
 8005e3c:	1b33      	subs	r3, r6, r4
 8005e3e:	3b15      	subs	r3, #21
 8005e40:	f023 0303 	bic.w	r3, r3, #3
 8005e44:	3304      	adds	r3, #4
 8005e46:	3415      	adds	r4, #21
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	bf38      	it	cc
 8005e4c:	2304      	movcc	r3, #4
 8005e4e:	441d      	add	r5, r3
 8005e50:	4473      	add	r3, lr
 8005e52:	469e      	mov	lr, r3
 8005e54:	462e      	mov	r6, r5
 8005e56:	4566      	cmp	r6, ip
 8005e58:	d30e      	bcc.n	8005e78 <__mdiff+0xec>
 8005e5a:	f10c 0203 	add.w	r2, ip, #3
 8005e5e:	1b52      	subs	r2, r2, r5
 8005e60:	f022 0203 	bic.w	r2, r2, #3
 8005e64:	3d03      	subs	r5, #3
 8005e66:	45ac      	cmp	ip, r5
 8005e68:	bf38      	it	cc
 8005e6a:	2200      	movcc	r2, #0
 8005e6c:	441a      	add	r2, r3
 8005e6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005e72:	b17b      	cbz	r3, 8005e94 <__mdiff+0x108>
 8005e74:	6107      	str	r7, [r0, #16]
 8005e76:	e7a3      	b.n	8005dc0 <__mdiff+0x34>
 8005e78:	f856 8b04 	ldr.w	r8, [r6], #4
 8005e7c:	fa11 f288 	uxtah	r2, r1, r8
 8005e80:	1414      	asrs	r4, r2, #16
 8005e82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e86:	b292      	uxth	r2, r2
 8005e88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005e8c:	f84e 2b04 	str.w	r2, [lr], #4
 8005e90:	1421      	asrs	r1, r4, #16
 8005e92:	e7e0      	b.n	8005e56 <__mdiff+0xca>
 8005e94:	3f01      	subs	r7, #1
 8005e96:	e7ea      	b.n	8005e6e <__mdiff+0xe2>
 8005e98:	080070df 	.word	0x080070df
 8005e9c:	080070f0 	.word	0x080070f0

08005ea0 <__d2b>:
 8005ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ea4:	4689      	mov	r9, r1
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	ec57 6b10 	vmov	r6, r7, d0
 8005eac:	4690      	mov	r8, r2
 8005eae:	f7ff fccf 	bl	8005850 <_Balloc>
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	b930      	cbnz	r0, 8005ec4 <__d2b+0x24>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <__d2b+0xb0>)
 8005eba:	4826      	ldr	r0, [pc, #152]	; (8005f54 <__d2b+0xb4>)
 8005ebc:	f240 310a 	movw	r1, #778	; 0x30a
 8005ec0:	f000 faac 	bl	800641c <__assert_func>
 8005ec4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ecc:	bb35      	cbnz	r5, 8005f1c <__d2b+0x7c>
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	d028      	beq.n	8005f26 <__d2b+0x86>
 8005ed4:	4668      	mov	r0, sp
 8005ed6:	9600      	str	r6, [sp, #0]
 8005ed8:	f7ff fd82 	bl	80059e0 <__lo0bits>
 8005edc:	9900      	ldr	r1, [sp, #0]
 8005ede:	b300      	cbz	r0, 8005f22 <__d2b+0x82>
 8005ee0:	9a01      	ldr	r2, [sp, #4]
 8005ee2:	f1c0 0320 	rsb	r3, r0, #32
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	430b      	orrs	r3, r1
 8005eec:	40c2      	lsrs	r2, r0
 8005eee:	6163      	str	r3, [r4, #20]
 8005ef0:	9201      	str	r2, [sp, #4]
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	61a3      	str	r3, [r4, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2202      	movne	r2, #2
 8005efc:	2201      	moveq	r2, #1
 8005efe:	6122      	str	r2, [r4, #16]
 8005f00:	b1d5      	cbz	r5, 8005f38 <__d2b+0x98>
 8005f02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f06:	4405      	add	r5, r0
 8005f08:	f8c9 5000 	str.w	r5, [r9]
 8005f0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f10:	f8c8 0000 	str.w	r0, [r8]
 8005f14:	4620      	mov	r0, r4
 8005f16:	b003      	add	sp, #12
 8005f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f20:	e7d5      	b.n	8005ece <__d2b+0x2e>
 8005f22:	6161      	str	r1, [r4, #20]
 8005f24:	e7e5      	b.n	8005ef2 <__d2b+0x52>
 8005f26:	a801      	add	r0, sp, #4
 8005f28:	f7ff fd5a 	bl	80059e0 <__lo0bits>
 8005f2c:	9b01      	ldr	r3, [sp, #4]
 8005f2e:	6163      	str	r3, [r4, #20]
 8005f30:	2201      	movs	r2, #1
 8005f32:	6122      	str	r2, [r4, #16]
 8005f34:	3020      	adds	r0, #32
 8005f36:	e7e3      	b.n	8005f00 <__d2b+0x60>
 8005f38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f40:	f8c9 0000 	str.w	r0, [r9]
 8005f44:	6918      	ldr	r0, [r3, #16]
 8005f46:	f7ff fd2b 	bl	80059a0 <__hi0bits>
 8005f4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f4e:	e7df      	b.n	8005f10 <__d2b+0x70>
 8005f50:	080070df 	.word	0x080070df
 8005f54:	080070f0 	.word	0x080070f0

08005f58 <_calloc_r>:
 8005f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f5a:	fba1 2402 	umull	r2, r4, r1, r2
 8005f5e:	b94c      	cbnz	r4, 8005f74 <_calloc_r+0x1c>
 8005f60:	4611      	mov	r1, r2
 8005f62:	9201      	str	r2, [sp, #4]
 8005f64:	f000 f87a 	bl	800605c <_malloc_r>
 8005f68:	9a01      	ldr	r2, [sp, #4]
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	b930      	cbnz	r0, 8005f7c <_calloc_r+0x24>
 8005f6e:	4628      	mov	r0, r5
 8005f70:	b003      	add	sp, #12
 8005f72:	bd30      	pop	{r4, r5, pc}
 8005f74:	220c      	movs	r2, #12
 8005f76:	6002      	str	r2, [r0, #0]
 8005f78:	2500      	movs	r5, #0
 8005f7a:	e7f8      	b.n	8005f6e <_calloc_r+0x16>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	f7fe f941 	bl	8004204 <memset>
 8005f82:	e7f4      	b.n	8005f6e <_calloc_r+0x16>

08005f84 <_free_r>:
 8005f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f86:	2900      	cmp	r1, #0
 8005f88:	d044      	beq.n	8006014 <_free_r+0x90>
 8005f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f8e:	9001      	str	r0, [sp, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f1a1 0404 	sub.w	r4, r1, #4
 8005f96:	bfb8      	it	lt
 8005f98:	18e4      	addlt	r4, r4, r3
 8005f9a:	f000 fa9b 	bl	80064d4 <__malloc_lock>
 8005f9e:	4a1e      	ldr	r2, [pc, #120]	; (8006018 <_free_r+0x94>)
 8005fa0:	9801      	ldr	r0, [sp, #4]
 8005fa2:	6813      	ldr	r3, [r2, #0]
 8005fa4:	b933      	cbnz	r3, 8005fb4 <_free_r+0x30>
 8005fa6:	6063      	str	r3, [r4, #4]
 8005fa8:	6014      	str	r4, [r2, #0]
 8005faa:	b003      	add	sp, #12
 8005fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fb0:	f000 ba96 	b.w	80064e0 <__malloc_unlock>
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d908      	bls.n	8005fca <_free_r+0x46>
 8005fb8:	6825      	ldr	r5, [r4, #0]
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf01      	itttt	eq
 8005fc0:	6819      	ldreq	r1, [r3, #0]
 8005fc2:	685b      	ldreq	r3, [r3, #4]
 8005fc4:	1949      	addeq	r1, r1, r5
 8005fc6:	6021      	streq	r1, [r4, #0]
 8005fc8:	e7ed      	b.n	8005fa6 <_free_r+0x22>
 8005fca:	461a      	mov	r2, r3
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b10b      	cbz	r3, 8005fd4 <_free_r+0x50>
 8005fd0:	42a3      	cmp	r3, r4
 8005fd2:	d9fa      	bls.n	8005fca <_free_r+0x46>
 8005fd4:	6811      	ldr	r1, [r2, #0]
 8005fd6:	1855      	adds	r5, r2, r1
 8005fd8:	42a5      	cmp	r5, r4
 8005fda:	d10b      	bne.n	8005ff4 <_free_r+0x70>
 8005fdc:	6824      	ldr	r4, [r4, #0]
 8005fde:	4421      	add	r1, r4
 8005fe0:	1854      	adds	r4, r2, r1
 8005fe2:	42a3      	cmp	r3, r4
 8005fe4:	6011      	str	r1, [r2, #0]
 8005fe6:	d1e0      	bne.n	8005faa <_free_r+0x26>
 8005fe8:	681c      	ldr	r4, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	6053      	str	r3, [r2, #4]
 8005fee:	4421      	add	r1, r4
 8005ff0:	6011      	str	r1, [r2, #0]
 8005ff2:	e7da      	b.n	8005faa <_free_r+0x26>
 8005ff4:	d902      	bls.n	8005ffc <_free_r+0x78>
 8005ff6:	230c      	movs	r3, #12
 8005ff8:	6003      	str	r3, [r0, #0]
 8005ffa:	e7d6      	b.n	8005faa <_free_r+0x26>
 8005ffc:	6825      	ldr	r5, [r4, #0]
 8005ffe:	1961      	adds	r1, r4, r5
 8006000:	428b      	cmp	r3, r1
 8006002:	bf04      	itt	eq
 8006004:	6819      	ldreq	r1, [r3, #0]
 8006006:	685b      	ldreq	r3, [r3, #4]
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	bf04      	itt	eq
 800600c:	1949      	addeq	r1, r1, r5
 800600e:	6021      	streq	r1, [r4, #0]
 8006010:	6054      	str	r4, [r2, #4]
 8006012:	e7ca      	b.n	8005faa <_free_r+0x26>
 8006014:	b003      	add	sp, #12
 8006016:	bd30      	pop	{r4, r5, pc}
 8006018:	20000300 	.word	0x20000300

0800601c <sbrk_aligned>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4e0e      	ldr	r6, [pc, #56]	; (8006058 <sbrk_aligned+0x3c>)
 8006020:	460c      	mov	r4, r1
 8006022:	6831      	ldr	r1, [r6, #0]
 8006024:	4605      	mov	r5, r0
 8006026:	b911      	cbnz	r1, 800602e <sbrk_aligned+0x12>
 8006028:	f000 f9e8 	bl	80063fc <_sbrk_r>
 800602c:	6030      	str	r0, [r6, #0]
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	f000 f9e3 	bl	80063fc <_sbrk_r>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d00a      	beq.n	8006050 <sbrk_aligned+0x34>
 800603a:	1cc4      	adds	r4, r0, #3
 800603c:	f024 0403 	bic.w	r4, r4, #3
 8006040:	42a0      	cmp	r0, r4
 8006042:	d007      	beq.n	8006054 <sbrk_aligned+0x38>
 8006044:	1a21      	subs	r1, r4, r0
 8006046:	4628      	mov	r0, r5
 8006048:	f000 f9d8 	bl	80063fc <_sbrk_r>
 800604c:	3001      	adds	r0, #1
 800604e:	d101      	bne.n	8006054 <sbrk_aligned+0x38>
 8006050:	f04f 34ff 	mov.w	r4, #4294967295
 8006054:	4620      	mov	r0, r4
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	20000304 	.word	0x20000304

0800605c <_malloc_r>:
 800605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006060:	1ccd      	adds	r5, r1, #3
 8006062:	f025 0503 	bic.w	r5, r5, #3
 8006066:	3508      	adds	r5, #8
 8006068:	2d0c      	cmp	r5, #12
 800606a:	bf38      	it	cc
 800606c:	250c      	movcc	r5, #12
 800606e:	2d00      	cmp	r5, #0
 8006070:	4607      	mov	r7, r0
 8006072:	db01      	blt.n	8006078 <_malloc_r+0x1c>
 8006074:	42a9      	cmp	r1, r5
 8006076:	d905      	bls.n	8006084 <_malloc_r+0x28>
 8006078:	230c      	movs	r3, #12
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	2600      	movs	r6, #0
 800607e:	4630      	mov	r0, r6
 8006080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006084:	4e2e      	ldr	r6, [pc, #184]	; (8006140 <_malloc_r+0xe4>)
 8006086:	f000 fa25 	bl	80064d4 <__malloc_lock>
 800608a:	6833      	ldr	r3, [r6, #0]
 800608c:	461c      	mov	r4, r3
 800608e:	bb34      	cbnz	r4, 80060de <_malloc_r+0x82>
 8006090:	4629      	mov	r1, r5
 8006092:	4638      	mov	r0, r7
 8006094:	f7ff ffc2 	bl	800601c <sbrk_aligned>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	4604      	mov	r4, r0
 800609c:	d14d      	bne.n	800613a <_malloc_r+0xde>
 800609e:	6834      	ldr	r4, [r6, #0]
 80060a0:	4626      	mov	r6, r4
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	d140      	bne.n	8006128 <_malloc_r+0xcc>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	4631      	mov	r1, r6
 80060aa:	4638      	mov	r0, r7
 80060ac:	eb04 0803 	add.w	r8, r4, r3
 80060b0:	f000 f9a4 	bl	80063fc <_sbrk_r>
 80060b4:	4580      	cmp	r8, r0
 80060b6:	d13a      	bne.n	800612e <_malloc_r+0xd2>
 80060b8:	6821      	ldr	r1, [r4, #0]
 80060ba:	3503      	adds	r5, #3
 80060bc:	1a6d      	subs	r5, r5, r1
 80060be:	f025 0503 	bic.w	r5, r5, #3
 80060c2:	3508      	adds	r5, #8
 80060c4:	2d0c      	cmp	r5, #12
 80060c6:	bf38      	it	cc
 80060c8:	250c      	movcc	r5, #12
 80060ca:	4629      	mov	r1, r5
 80060cc:	4638      	mov	r0, r7
 80060ce:	f7ff ffa5 	bl	800601c <sbrk_aligned>
 80060d2:	3001      	adds	r0, #1
 80060d4:	d02b      	beq.n	800612e <_malloc_r+0xd2>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	442b      	add	r3, r5
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	e00e      	b.n	80060fc <_malloc_r+0xa0>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	1b52      	subs	r2, r2, r5
 80060e2:	d41e      	bmi.n	8006122 <_malloc_r+0xc6>
 80060e4:	2a0b      	cmp	r2, #11
 80060e6:	d916      	bls.n	8006116 <_malloc_r+0xba>
 80060e8:	1961      	adds	r1, r4, r5
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	6025      	str	r5, [r4, #0]
 80060ee:	bf18      	it	ne
 80060f0:	6059      	strne	r1, [r3, #4]
 80060f2:	6863      	ldr	r3, [r4, #4]
 80060f4:	bf08      	it	eq
 80060f6:	6031      	streq	r1, [r6, #0]
 80060f8:	5162      	str	r2, [r4, r5]
 80060fa:	604b      	str	r3, [r1, #4]
 80060fc:	4638      	mov	r0, r7
 80060fe:	f104 060b 	add.w	r6, r4, #11
 8006102:	f000 f9ed 	bl	80064e0 <__malloc_unlock>
 8006106:	f026 0607 	bic.w	r6, r6, #7
 800610a:	1d23      	adds	r3, r4, #4
 800610c:	1af2      	subs	r2, r6, r3
 800610e:	d0b6      	beq.n	800607e <_malloc_r+0x22>
 8006110:	1b9b      	subs	r3, r3, r6
 8006112:	50a3      	str	r3, [r4, r2]
 8006114:	e7b3      	b.n	800607e <_malloc_r+0x22>
 8006116:	6862      	ldr	r2, [r4, #4]
 8006118:	42a3      	cmp	r3, r4
 800611a:	bf0c      	ite	eq
 800611c:	6032      	streq	r2, [r6, #0]
 800611e:	605a      	strne	r2, [r3, #4]
 8006120:	e7ec      	b.n	80060fc <_malloc_r+0xa0>
 8006122:	4623      	mov	r3, r4
 8006124:	6864      	ldr	r4, [r4, #4]
 8006126:	e7b2      	b.n	800608e <_malloc_r+0x32>
 8006128:	4634      	mov	r4, r6
 800612a:	6876      	ldr	r6, [r6, #4]
 800612c:	e7b9      	b.n	80060a2 <_malloc_r+0x46>
 800612e:	230c      	movs	r3, #12
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4638      	mov	r0, r7
 8006134:	f000 f9d4 	bl	80064e0 <__malloc_unlock>
 8006138:	e7a1      	b.n	800607e <_malloc_r+0x22>
 800613a:	6025      	str	r5, [r4, #0]
 800613c:	e7de      	b.n	80060fc <_malloc_r+0xa0>
 800613e:	bf00      	nop
 8006140:	20000300 	.word	0x20000300

08006144 <__ssputs_r>:
 8006144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	688e      	ldr	r6, [r1, #8]
 800614a:	429e      	cmp	r6, r3
 800614c:	4682      	mov	sl, r0
 800614e:	460c      	mov	r4, r1
 8006150:	4690      	mov	r8, r2
 8006152:	461f      	mov	r7, r3
 8006154:	d838      	bhi.n	80061c8 <__ssputs_r+0x84>
 8006156:	898a      	ldrh	r2, [r1, #12]
 8006158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800615c:	d032      	beq.n	80061c4 <__ssputs_r+0x80>
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	6909      	ldr	r1, [r1, #16]
 8006162:	eba5 0901 	sub.w	r9, r5, r1
 8006166:	6965      	ldr	r5, [r4, #20]
 8006168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800616c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006170:	3301      	adds	r3, #1
 8006172:	444b      	add	r3, r9
 8006174:	106d      	asrs	r5, r5, #1
 8006176:	429d      	cmp	r5, r3
 8006178:	bf38      	it	cc
 800617a:	461d      	movcc	r5, r3
 800617c:	0553      	lsls	r3, r2, #21
 800617e:	d531      	bpl.n	80061e4 <__ssputs_r+0xa0>
 8006180:	4629      	mov	r1, r5
 8006182:	f7ff ff6b 	bl	800605c <_malloc_r>
 8006186:	4606      	mov	r6, r0
 8006188:	b950      	cbnz	r0, 80061a0 <__ssputs_r+0x5c>
 800618a:	230c      	movs	r3, #12
 800618c:	f8ca 3000 	str.w	r3, [sl]
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	f04f 30ff 	mov.w	r0, #4294967295
 800619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a0:	6921      	ldr	r1, [r4, #16]
 80061a2:	464a      	mov	r2, r9
 80061a4:	f7ff fb46 	bl	8005834 <memcpy>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	6126      	str	r6, [r4, #16]
 80061b6:	6165      	str	r5, [r4, #20]
 80061b8:	444e      	add	r6, r9
 80061ba:	eba5 0509 	sub.w	r5, r5, r9
 80061be:	6026      	str	r6, [r4, #0]
 80061c0:	60a5      	str	r5, [r4, #8]
 80061c2:	463e      	mov	r6, r7
 80061c4:	42be      	cmp	r6, r7
 80061c6:	d900      	bls.n	80061ca <__ssputs_r+0x86>
 80061c8:	463e      	mov	r6, r7
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	4632      	mov	r2, r6
 80061ce:	4641      	mov	r1, r8
 80061d0:	f000 f966 	bl	80064a0 <memmove>
 80061d4:	68a3      	ldr	r3, [r4, #8]
 80061d6:	1b9b      	subs	r3, r3, r6
 80061d8:	60a3      	str	r3, [r4, #8]
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	4433      	add	r3, r6
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	2000      	movs	r0, #0
 80061e2:	e7db      	b.n	800619c <__ssputs_r+0x58>
 80061e4:	462a      	mov	r2, r5
 80061e6:	f000 f981 	bl	80064ec <_realloc_r>
 80061ea:	4606      	mov	r6, r0
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d1e1      	bne.n	80061b4 <__ssputs_r+0x70>
 80061f0:	6921      	ldr	r1, [r4, #16]
 80061f2:	4650      	mov	r0, sl
 80061f4:	f7ff fec6 	bl	8005f84 <_free_r>
 80061f8:	e7c7      	b.n	800618a <__ssputs_r+0x46>
	...

080061fc <_svfiprintf_r>:
 80061fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	4698      	mov	r8, r3
 8006202:	898b      	ldrh	r3, [r1, #12]
 8006204:	061b      	lsls	r3, r3, #24
 8006206:	b09d      	sub	sp, #116	; 0x74
 8006208:	4607      	mov	r7, r0
 800620a:	460d      	mov	r5, r1
 800620c:	4614      	mov	r4, r2
 800620e:	d50e      	bpl.n	800622e <_svfiprintf_r+0x32>
 8006210:	690b      	ldr	r3, [r1, #16]
 8006212:	b963      	cbnz	r3, 800622e <_svfiprintf_r+0x32>
 8006214:	2140      	movs	r1, #64	; 0x40
 8006216:	f7ff ff21 	bl	800605c <_malloc_r>
 800621a:	6028      	str	r0, [r5, #0]
 800621c:	6128      	str	r0, [r5, #16]
 800621e:	b920      	cbnz	r0, 800622a <_svfiprintf_r+0x2e>
 8006220:	230c      	movs	r3, #12
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	e0d1      	b.n	80063ce <_svfiprintf_r+0x1d2>
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	616b      	str	r3, [r5, #20]
 800622e:	2300      	movs	r3, #0
 8006230:	9309      	str	r3, [sp, #36]	; 0x24
 8006232:	2320      	movs	r3, #32
 8006234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006238:	f8cd 800c 	str.w	r8, [sp, #12]
 800623c:	2330      	movs	r3, #48	; 0x30
 800623e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063e8 <_svfiprintf_r+0x1ec>
 8006242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006246:	f04f 0901 	mov.w	r9, #1
 800624a:	4623      	mov	r3, r4
 800624c:	469a      	mov	sl, r3
 800624e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006252:	b10a      	cbz	r2, 8006258 <_svfiprintf_r+0x5c>
 8006254:	2a25      	cmp	r2, #37	; 0x25
 8006256:	d1f9      	bne.n	800624c <_svfiprintf_r+0x50>
 8006258:	ebba 0b04 	subs.w	fp, sl, r4
 800625c:	d00b      	beq.n	8006276 <_svfiprintf_r+0x7a>
 800625e:	465b      	mov	r3, fp
 8006260:	4622      	mov	r2, r4
 8006262:	4629      	mov	r1, r5
 8006264:	4638      	mov	r0, r7
 8006266:	f7ff ff6d 	bl	8006144 <__ssputs_r>
 800626a:	3001      	adds	r0, #1
 800626c:	f000 80aa 	beq.w	80063c4 <_svfiprintf_r+0x1c8>
 8006270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006272:	445a      	add	r2, fp
 8006274:	9209      	str	r2, [sp, #36]	; 0x24
 8006276:	f89a 3000 	ldrb.w	r3, [sl]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 80a2 	beq.w	80063c4 <_svfiprintf_r+0x1c8>
 8006280:	2300      	movs	r3, #0
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800628a:	f10a 0a01 	add.w	sl, sl, #1
 800628e:	9304      	str	r3, [sp, #16]
 8006290:	9307      	str	r3, [sp, #28]
 8006292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006296:	931a      	str	r3, [sp, #104]	; 0x68
 8006298:	4654      	mov	r4, sl
 800629a:	2205      	movs	r2, #5
 800629c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a0:	4851      	ldr	r0, [pc, #324]	; (80063e8 <_svfiprintf_r+0x1ec>)
 80062a2:	f7f9 ffad 	bl	8000200 <memchr>
 80062a6:	9a04      	ldr	r2, [sp, #16]
 80062a8:	b9d8      	cbnz	r0, 80062e2 <_svfiprintf_r+0xe6>
 80062aa:	06d0      	lsls	r0, r2, #27
 80062ac:	bf44      	itt	mi
 80062ae:	2320      	movmi	r3, #32
 80062b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062b4:	0711      	lsls	r1, r2, #28
 80062b6:	bf44      	itt	mi
 80062b8:	232b      	movmi	r3, #43	; 0x2b
 80062ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062be:	f89a 3000 	ldrb.w	r3, [sl]
 80062c2:	2b2a      	cmp	r3, #42	; 0x2a
 80062c4:	d015      	beq.n	80062f2 <_svfiprintf_r+0xf6>
 80062c6:	9a07      	ldr	r2, [sp, #28]
 80062c8:	4654      	mov	r4, sl
 80062ca:	2000      	movs	r0, #0
 80062cc:	f04f 0c0a 	mov.w	ip, #10
 80062d0:	4621      	mov	r1, r4
 80062d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062d6:	3b30      	subs	r3, #48	; 0x30
 80062d8:	2b09      	cmp	r3, #9
 80062da:	d94e      	bls.n	800637a <_svfiprintf_r+0x17e>
 80062dc:	b1b0      	cbz	r0, 800630c <_svfiprintf_r+0x110>
 80062de:	9207      	str	r2, [sp, #28]
 80062e0:	e014      	b.n	800630c <_svfiprintf_r+0x110>
 80062e2:	eba0 0308 	sub.w	r3, r0, r8
 80062e6:	fa09 f303 	lsl.w	r3, r9, r3
 80062ea:	4313      	orrs	r3, r2
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	46a2      	mov	sl, r4
 80062f0:	e7d2      	b.n	8006298 <_svfiprintf_r+0x9c>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	1d19      	adds	r1, r3, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	9103      	str	r1, [sp, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bfbb      	ittet	lt
 80062fe:	425b      	neglt	r3, r3
 8006300:	f042 0202 	orrlt.w	r2, r2, #2
 8006304:	9307      	strge	r3, [sp, #28]
 8006306:	9307      	strlt	r3, [sp, #28]
 8006308:	bfb8      	it	lt
 800630a:	9204      	strlt	r2, [sp, #16]
 800630c:	7823      	ldrb	r3, [r4, #0]
 800630e:	2b2e      	cmp	r3, #46	; 0x2e
 8006310:	d10c      	bne.n	800632c <_svfiprintf_r+0x130>
 8006312:	7863      	ldrb	r3, [r4, #1]
 8006314:	2b2a      	cmp	r3, #42	; 0x2a
 8006316:	d135      	bne.n	8006384 <_svfiprintf_r+0x188>
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	1d1a      	adds	r2, r3, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	9203      	str	r2, [sp, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfb8      	it	lt
 8006324:	f04f 33ff 	movlt.w	r3, #4294967295
 8006328:	3402      	adds	r4, #2
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063f8 <_svfiprintf_r+0x1fc>
 8006330:	7821      	ldrb	r1, [r4, #0]
 8006332:	2203      	movs	r2, #3
 8006334:	4650      	mov	r0, sl
 8006336:	f7f9 ff63 	bl	8000200 <memchr>
 800633a:	b140      	cbz	r0, 800634e <_svfiprintf_r+0x152>
 800633c:	2340      	movs	r3, #64	; 0x40
 800633e:	eba0 000a 	sub.w	r0, r0, sl
 8006342:	fa03 f000 	lsl.w	r0, r3, r0
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	4303      	orrs	r3, r0
 800634a:	3401      	adds	r4, #1
 800634c:	9304      	str	r3, [sp, #16]
 800634e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006352:	4826      	ldr	r0, [pc, #152]	; (80063ec <_svfiprintf_r+0x1f0>)
 8006354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006358:	2206      	movs	r2, #6
 800635a:	f7f9 ff51 	bl	8000200 <memchr>
 800635e:	2800      	cmp	r0, #0
 8006360:	d038      	beq.n	80063d4 <_svfiprintf_r+0x1d8>
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <_svfiprintf_r+0x1f4>)
 8006364:	bb1b      	cbnz	r3, 80063ae <_svfiprintf_r+0x1b2>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	3307      	adds	r3, #7
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	3308      	adds	r3, #8
 8006370:	9303      	str	r3, [sp, #12]
 8006372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006374:	4433      	add	r3, r6
 8006376:	9309      	str	r3, [sp, #36]	; 0x24
 8006378:	e767      	b.n	800624a <_svfiprintf_r+0x4e>
 800637a:	fb0c 3202 	mla	r2, ip, r2, r3
 800637e:	460c      	mov	r4, r1
 8006380:	2001      	movs	r0, #1
 8006382:	e7a5      	b.n	80062d0 <_svfiprintf_r+0xd4>
 8006384:	2300      	movs	r3, #0
 8006386:	3401      	adds	r4, #1
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	4619      	mov	r1, r3
 800638c:	f04f 0c0a 	mov.w	ip, #10
 8006390:	4620      	mov	r0, r4
 8006392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006396:	3a30      	subs	r2, #48	; 0x30
 8006398:	2a09      	cmp	r2, #9
 800639a:	d903      	bls.n	80063a4 <_svfiprintf_r+0x1a8>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0c5      	beq.n	800632c <_svfiprintf_r+0x130>
 80063a0:	9105      	str	r1, [sp, #20]
 80063a2:	e7c3      	b.n	800632c <_svfiprintf_r+0x130>
 80063a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80063a8:	4604      	mov	r4, r0
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7f0      	b.n	8006390 <_svfiprintf_r+0x194>
 80063ae:	ab03      	add	r3, sp, #12
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	462a      	mov	r2, r5
 80063b4:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <_svfiprintf_r+0x1f8>)
 80063b6:	a904      	add	r1, sp, #16
 80063b8:	4638      	mov	r0, r7
 80063ba:	f7fd ffcb 	bl	8004354 <_printf_float>
 80063be:	1c42      	adds	r2, r0, #1
 80063c0:	4606      	mov	r6, r0
 80063c2:	d1d6      	bne.n	8006372 <_svfiprintf_r+0x176>
 80063c4:	89ab      	ldrh	r3, [r5, #12]
 80063c6:	065b      	lsls	r3, r3, #25
 80063c8:	f53f af2c 	bmi.w	8006224 <_svfiprintf_r+0x28>
 80063cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ce:	b01d      	add	sp, #116	; 0x74
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	ab03      	add	r3, sp, #12
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	462a      	mov	r2, r5
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <_svfiprintf_r+0x1f8>)
 80063dc:	a904      	add	r1, sp, #16
 80063de:	4638      	mov	r0, r7
 80063e0:	f7fe fa5c 	bl	800489c <_printf_i>
 80063e4:	e7eb      	b.n	80063be <_svfiprintf_r+0x1c2>
 80063e6:	bf00      	nop
 80063e8:	0800724c 	.word	0x0800724c
 80063ec:	08007256 	.word	0x08007256
 80063f0:	08004355 	.word	0x08004355
 80063f4:	08006145 	.word	0x08006145
 80063f8:	08007252 	.word	0x08007252

080063fc <_sbrk_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_sbrk_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fb fb54 	bl	8001ab4 <_sbrk>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_sbrk_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_sbrk_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20000308 	.word	0x20000308

0800641c <__assert_func>:
 800641c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800641e:	4614      	mov	r4, r2
 8006420:	461a      	mov	r2, r3
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <__assert_func+0x2c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4605      	mov	r5, r0
 8006428:	68d8      	ldr	r0, [r3, #12]
 800642a:	b14c      	cbz	r4, 8006440 <__assert_func+0x24>
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <__assert_func+0x30>)
 800642e:	9100      	str	r1, [sp, #0]
 8006430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006434:	4906      	ldr	r1, [pc, #24]	; (8006450 <__assert_func+0x34>)
 8006436:	462b      	mov	r3, r5
 8006438:	f000 f80e 	bl	8006458 <fiprintf>
 800643c:	f000 faac 	bl	8006998 <abort>
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <__assert_func+0x38>)
 8006442:	461c      	mov	r4, r3
 8006444:	e7f3      	b.n	800642e <__assert_func+0x12>
 8006446:	bf00      	nop
 8006448:	2000000c 	.word	0x2000000c
 800644c:	0800725d 	.word	0x0800725d
 8006450:	0800726a 	.word	0x0800726a
 8006454:	08007298 	.word	0x08007298

08006458 <fiprintf>:
 8006458:	b40e      	push	{r1, r2, r3}
 800645a:	b503      	push	{r0, r1, lr}
 800645c:	4601      	mov	r1, r0
 800645e:	ab03      	add	r3, sp, #12
 8006460:	4805      	ldr	r0, [pc, #20]	; (8006478 <fiprintf+0x20>)
 8006462:	f853 2b04 	ldr.w	r2, [r3], #4
 8006466:	6800      	ldr	r0, [r0, #0]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	f000 f897 	bl	800659c <_vfiprintf_r>
 800646e:	b002      	add	sp, #8
 8006470:	f85d eb04 	ldr.w	lr, [sp], #4
 8006474:	b003      	add	sp, #12
 8006476:	4770      	bx	lr
 8006478:	2000000c 	.word	0x2000000c

0800647c <__ascii_mbtowc>:
 800647c:	b082      	sub	sp, #8
 800647e:	b901      	cbnz	r1, 8006482 <__ascii_mbtowc+0x6>
 8006480:	a901      	add	r1, sp, #4
 8006482:	b142      	cbz	r2, 8006496 <__ascii_mbtowc+0x1a>
 8006484:	b14b      	cbz	r3, 800649a <__ascii_mbtowc+0x1e>
 8006486:	7813      	ldrb	r3, [r2, #0]
 8006488:	600b      	str	r3, [r1, #0]
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	1e10      	subs	r0, r2, #0
 800648e:	bf18      	it	ne
 8006490:	2001      	movne	r0, #1
 8006492:	b002      	add	sp, #8
 8006494:	4770      	bx	lr
 8006496:	4610      	mov	r0, r2
 8006498:	e7fb      	b.n	8006492 <__ascii_mbtowc+0x16>
 800649a:	f06f 0001 	mvn.w	r0, #1
 800649e:	e7f8      	b.n	8006492 <__ascii_mbtowc+0x16>

080064a0 <memmove>:
 80064a0:	4288      	cmp	r0, r1
 80064a2:	b510      	push	{r4, lr}
 80064a4:	eb01 0402 	add.w	r4, r1, r2
 80064a8:	d902      	bls.n	80064b0 <memmove+0x10>
 80064aa:	4284      	cmp	r4, r0
 80064ac:	4623      	mov	r3, r4
 80064ae:	d807      	bhi.n	80064c0 <memmove+0x20>
 80064b0:	1e43      	subs	r3, r0, #1
 80064b2:	42a1      	cmp	r1, r4
 80064b4:	d008      	beq.n	80064c8 <memmove+0x28>
 80064b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064be:	e7f8      	b.n	80064b2 <memmove+0x12>
 80064c0:	4402      	add	r2, r0
 80064c2:	4601      	mov	r1, r0
 80064c4:	428a      	cmp	r2, r1
 80064c6:	d100      	bne.n	80064ca <memmove+0x2a>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064d2:	e7f7      	b.n	80064c4 <memmove+0x24>

080064d4 <__malloc_lock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__malloc_lock+0x8>)
 80064d6:	f000 bc1f 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 80064da:	bf00      	nop
 80064dc:	2000030c 	.word	0x2000030c

080064e0 <__malloc_unlock>:
 80064e0:	4801      	ldr	r0, [pc, #4]	; (80064e8 <__malloc_unlock+0x8>)
 80064e2:	f000 bc1a 	b.w	8006d1a <__retarget_lock_release_recursive>
 80064e6:	bf00      	nop
 80064e8:	2000030c 	.word	0x2000030c

080064ec <_realloc_r>:
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	4680      	mov	r8, r0
 80064f2:	4614      	mov	r4, r2
 80064f4:	460e      	mov	r6, r1
 80064f6:	b921      	cbnz	r1, 8006502 <_realloc_r+0x16>
 80064f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064fc:	4611      	mov	r1, r2
 80064fe:	f7ff bdad 	b.w	800605c <_malloc_r>
 8006502:	b92a      	cbnz	r2, 8006510 <_realloc_r+0x24>
 8006504:	f7ff fd3e 	bl	8005f84 <_free_r>
 8006508:	4625      	mov	r5, r4
 800650a:	4628      	mov	r0, r5
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	f000 fc6a 	bl	8006de8 <_malloc_usable_size_r>
 8006514:	4284      	cmp	r4, r0
 8006516:	4607      	mov	r7, r0
 8006518:	d802      	bhi.n	8006520 <_realloc_r+0x34>
 800651a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800651e:	d812      	bhi.n	8006546 <_realloc_r+0x5a>
 8006520:	4621      	mov	r1, r4
 8006522:	4640      	mov	r0, r8
 8006524:	f7ff fd9a 	bl	800605c <_malloc_r>
 8006528:	4605      	mov	r5, r0
 800652a:	2800      	cmp	r0, #0
 800652c:	d0ed      	beq.n	800650a <_realloc_r+0x1e>
 800652e:	42bc      	cmp	r4, r7
 8006530:	4622      	mov	r2, r4
 8006532:	4631      	mov	r1, r6
 8006534:	bf28      	it	cs
 8006536:	463a      	movcs	r2, r7
 8006538:	f7ff f97c 	bl	8005834 <memcpy>
 800653c:	4631      	mov	r1, r6
 800653e:	4640      	mov	r0, r8
 8006540:	f7ff fd20 	bl	8005f84 <_free_r>
 8006544:	e7e1      	b.n	800650a <_realloc_r+0x1e>
 8006546:	4635      	mov	r5, r6
 8006548:	e7df      	b.n	800650a <_realloc_r+0x1e>

0800654a <__sfputc_r>:
 800654a:	6893      	ldr	r3, [r2, #8]
 800654c:	3b01      	subs	r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	b410      	push	{r4}
 8006552:	6093      	str	r3, [r2, #8]
 8006554:	da08      	bge.n	8006568 <__sfputc_r+0x1e>
 8006556:	6994      	ldr	r4, [r2, #24]
 8006558:	42a3      	cmp	r3, r4
 800655a:	db01      	blt.n	8006560 <__sfputc_r+0x16>
 800655c:	290a      	cmp	r1, #10
 800655e:	d103      	bne.n	8006568 <__sfputc_r+0x1e>
 8006560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006564:	f000 b94a 	b.w	80067fc <__swbuf_r>
 8006568:	6813      	ldr	r3, [r2, #0]
 800656a:	1c58      	adds	r0, r3, #1
 800656c:	6010      	str	r0, [r2, #0]
 800656e:	7019      	strb	r1, [r3, #0]
 8006570:	4608      	mov	r0, r1
 8006572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006576:	4770      	bx	lr

08006578 <__sfputs_r>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	4606      	mov	r6, r0
 800657c:	460f      	mov	r7, r1
 800657e:	4614      	mov	r4, r2
 8006580:	18d5      	adds	r5, r2, r3
 8006582:	42ac      	cmp	r4, r5
 8006584:	d101      	bne.n	800658a <__sfputs_r+0x12>
 8006586:	2000      	movs	r0, #0
 8006588:	e007      	b.n	800659a <__sfputs_r+0x22>
 800658a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658e:	463a      	mov	r2, r7
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff ffda 	bl	800654a <__sfputc_r>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d1f3      	bne.n	8006582 <__sfputs_r+0xa>
 800659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800659c <_vfiprintf_r>:
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	460d      	mov	r5, r1
 80065a2:	b09d      	sub	sp, #116	; 0x74
 80065a4:	4614      	mov	r4, r2
 80065a6:	4698      	mov	r8, r3
 80065a8:	4606      	mov	r6, r0
 80065aa:	b118      	cbz	r0, 80065b4 <_vfiprintf_r+0x18>
 80065ac:	6983      	ldr	r3, [r0, #24]
 80065ae:	b90b      	cbnz	r3, 80065b4 <_vfiprintf_r+0x18>
 80065b0:	f000 fb14 	bl	8006bdc <__sinit>
 80065b4:	4b89      	ldr	r3, [pc, #548]	; (80067dc <_vfiprintf_r+0x240>)
 80065b6:	429d      	cmp	r5, r3
 80065b8:	d11b      	bne.n	80065f2 <_vfiprintf_r+0x56>
 80065ba:	6875      	ldr	r5, [r6, #4]
 80065bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065be:	07d9      	lsls	r1, r3, #31
 80065c0:	d405      	bmi.n	80065ce <_vfiprintf_r+0x32>
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	059a      	lsls	r2, r3, #22
 80065c6:	d402      	bmi.n	80065ce <_vfiprintf_r+0x32>
 80065c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ca:	f000 fba5 	bl	8006d18 <__retarget_lock_acquire_recursive>
 80065ce:	89ab      	ldrh	r3, [r5, #12]
 80065d0:	071b      	lsls	r3, r3, #28
 80065d2:	d501      	bpl.n	80065d8 <_vfiprintf_r+0x3c>
 80065d4:	692b      	ldr	r3, [r5, #16]
 80065d6:	b9eb      	cbnz	r3, 8006614 <_vfiprintf_r+0x78>
 80065d8:	4629      	mov	r1, r5
 80065da:	4630      	mov	r0, r6
 80065dc:	f000 f96e 	bl	80068bc <__swsetup_r>
 80065e0:	b1c0      	cbz	r0, 8006614 <_vfiprintf_r+0x78>
 80065e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065e4:	07dc      	lsls	r4, r3, #31
 80065e6:	d50e      	bpl.n	8006606 <_vfiprintf_r+0x6a>
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	b01d      	add	sp, #116	; 0x74
 80065ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f2:	4b7b      	ldr	r3, [pc, #492]	; (80067e0 <_vfiprintf_r+0x244>)
 80065f4:	429d      	cmp	r5, r3
 80065f6:	d101      	bne.n	80065fc <_vfiprintf_r+0x60>
 80065f8:	68b5      	ldr	r5, [r6, #8]
 80065fa:	e7df      	b.n	80065bc <_vfiprintf_r+0x20>
 80065fc:	4b79      	ldr	r3, [pc, #484]	; (80067e4 <_vfiprintf_r+0x248>)
 80065fe:	429d      	cmp	r5, r3
 8006600:	bf08      	it	eq
 8006602:	68f5      	ldreq	r5, [r6, #12]
 8006604:	e7da      	b.n	80065bc <_vfiprintf_r+0x20>
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	0598      	lsls	r0, r3, #22
 800660a:	d4ed      	bmi.n	80065e8 <_vfiprintf_r+0x4c>
 800660c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800660e:	f000 fb84 	bl	8006d1a <__retarget_lock_release_recursive>
 8006612:	e7e9      	b.n	80065e8 <_vfiprintf_r+0x4c>
 8006614:	2300      	movs	r3, #0
 8006616:	9309      	str	r3, [sp, #36]	; 0x24
 8006618:	2320      	movs	r3, #32
 800661a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800661e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006622:	2330      	movs	r3, #48	; 0x30
 8006624:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067e8 <_vfiprintf_r+0x24c>
 8006628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800662c:	f04f 0901 	mov.w	r9, #1
 8006630:	4623      	mov	r3, r4
 8006632:	469a      	mov	sl, r3
 8006634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006638:	b10a      	cbz	r2, 800663e <_vfiprintf_r+0xa2>
 800663a:	2a25      	cmp	r2, #37	; 0x25
 800663c:	d1f9      	bne.n	8006632 <_vfiprintf_r+0x96>
 800663e:	ebba 0b04 	subs.w	fp, sl, r4
 8006642:	d00b      	beq.n	800665c <_vfiprintf_r+0xc0>
 8006644:	465b      	mov	r3, fp
 8006646:	4622      	mov	r2, r4
 8006648:	4629      	mov	r1, r5
 800664a:	4630      	mov	r0, r6
 800664c:	f7ff ff94 	bl	8006578 <__sfputs_r>
 8006650:	3001      	adds	r0, #1
 8006652:	f000 80aa 	beq.w	80067aa <_vfiprintf_r+0x20e>
 8006656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006658:	445a      	add	r2, fp
 800665a:	9209      	str	r2, [sp, #36]	; 0x24
 800665c:	f89a 3000 	ldrb.w	r3, [sl]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80a2 	beq.w	80067aa <_vfiprintf_r+0x20e>
 8006666:	2300      	movs	r3, #0
 8006668:	f04f 32ff 	mov.w	r2, #4294967295
 800666c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006670:	f10a 0a01 	add.w	sl, sl, #1
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	9307      	str	r3, [sp, #28]
 8006678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800667c:	931a      	str	r3, [sp, #104]	; 0x68
 800667e:	4654      	mov	r4, sl
 8006680:	2205      	movs	r2, #5
 8006682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006686:	4858      	ldr	r0, [pc, #352]	; (80067e8 <_vfiprintf_r+0x24c>)
 8006688:	f7f9 fdba 	bl	8000200 <memchr>
 800668c:	9a04      	ldr	r2, [sp, #16]
 800668e:	b9d8      	cbnz	r0, 80066c8 <_vfiprintf_r+0x12c>
 8006690:	06d1      	lsls	r1, r2, #27
 8006692:	bf44      	itt	mi
 8006694:	2320      	movmi	r3, #32
 8006696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669a:	0713      	lsls	r3, r2, #28
 800669c:	bf44      	itt	mi
 800669e:	232b      	movmi	r3, #43	; 0x2b
 80066a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a4:	f89a 3000 	ldrb.w	r3, [sl]
 80066a8:	2b2a      	cmp	r3, #42	; 0x2a
 80066aa:	d015      	beq.n	80066d8 <_vfiprintf_r+0x13c>
 80066ac:	9a07      	ldr	r2, [sp, #28]
 80066ae:	4654      	mov	r4, sl
 80066b0:	2000      	movs	r0, #0
 80066b2:	f04f 0c0a 	mov.w	ip, #10
 80066b6:	4621      	mov	r1, r4
 80066b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066bc:	3b30      	subs	r3, #48	; 0x30
 80066be:	2b09      	cmp	r3, #9
 80066c0:	d94e      	bls.n	8006760 <_vfiprintf_r+0x1c4>
 80066c2:	b1b0      	cbz	r0, 80066f2 <_vfiprintf_r+0x156>
 80066c4:	9207      	str	r2, [sp, #28]
 80066c6:	e014      	b.n	80066f2 <_vfiprintf_r+0x156>
 80066c8:	eba0 0308 	sub.w	r3, r0, r8
 80066cc:	fa09 f303 	lsl.w	r3, r9, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	46a2      	mov	sl, r4
 80066d6:	e7d2      	b.n	800667e <_vfiprintf_r+0xe2>
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	1d19      	adds	r1, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	9103      	str	r1, [sp, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bfbb      	ittet	lt
 80066e4:	425b      	neglt	r3, r3
 80066e6:	f042 0202 	orrlt.w	r2, r2, #2
 80066ea:	9307      	strge	r3, [sp, #28]
 80066ec:	9307      	strlt	r3, [sp, #28]
 80066ee:	bfb8      	it	lt
 80066f0:	9204      	strlt	r2, [sp, #16]
 80066f2:	7823      	ldrb	r3, [r4, #0]
 80066f4:	2b2e      	cmp	r3, #46	; 0x2e
 80066f6:	d10c      	bne.n	8006712 <_vfiprintf_r+0x176>
 80066f8:	7863      	ldrb	r3, [r4, #1]
 80066fa:	2b2a      	cmp	r3, #42	; 0x2a
 80066fc:	d135      	bne.n	800676a <_vfiprintf_r+0x1ce>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	9203      	str	r2, [sp, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	bfb8      	it	lt
 800670a:	f04f 33ff 	movlt.w	r3, #4294967295
 800670e:	3402      	adds	r4, #2
 8006710:	9305      	str	r3, [sp, #20]
 8006712:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067f8 <_vfiprintf_r+0x25c>
 8006716:	7821      	ldrb	r1, [r4, #0]
 8006718:	2203      	movs	r2, #3
 800671a:	4650      	mov	r0, sl
 800671c:	f7f9 fd70 	bl	8000200 <memchr>
 8006720:	b140      	cbz	r0, 8006734 <_vfiprintf_r+0x198>
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	eba0 000a 	sub.w	r0, r0, sl
 8006728:	fa03 f000 	lsl.w	r0, r3, r0
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	4303      	orrs	r3, r0
 8006730:	3401      	adds	r4, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006738:	482c      	ldr	r0, [pc, #176]	; (80067ec <_vfiprintf_r+0x250>)
 800673a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800673e:	2206      	movs	r2, #6
 8006740:	f7f9 fd5e 	bl	8000200 <memchr>
 8006744:	2800      	cmp	r0, #0
 8006746:	d03f      	beq.n	80067c8 <_vfiprintf_r+0x22c>
 8006748:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <_vfiprintf_r+0x254>)
 800674a:	bb1b      	cbnz	r3, 8006794 <_vfiprintf_r+0x1f8>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	3307      	adds	r3, #7
 8006750:	f023 0307 	bic.w	r3, r3, #7
 8006754:	3308      	adds	r3, #8
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675a:	443b      	add	r3, r7
 800675c:	9309      	str	r3, [sp, #36]	; 0x24
 800675e:	e767      	b.n	8006630 <_vfiprintf_r+0x94>
 8006760:	fb0c 3202 	mla	r2, ip, r2, r3
 8006764:	460c      	mov	r4, r1
 8006766:	2001      	movs	r0, #1
 8006768:	e7a5      	b.n	80066b6 <_vfiprintf_r+0x11a>
 800676a:	2300      	movs	r3, #0
 800676c:	3401      	adds	r4, #1
 800676e:	9305      	str	r3, [sp, #20]
 8006770:	4619      	mov	r1, r3
 8006772:	f04f 0c0a 	mov.w	ip, #10
 8006776:	4620      	mov	r0, r4
 8006778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677c:	3a30      	subs	r2, #48	; 0x30
 800677e:	2a09      	cmp	r2, #9
 8006780:	d903      	bls.n	800678a <_vfiprintf_r+0x1ee>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0c5      	beq.n	8006712 <_vfiprintf_r+0x176>
 8006786:	9105      	str	r1, [sp, #20]
 8006788:	e7c3      	b.n	8006712 <_vfiprintf_r+0x176>
 800678a:	fb0c 2101 	mla	r1, ip, r1, r2
 800678e:	4604      	mov	r4, r0
 8006790:	2301      	movs	r3, #1
 8006792:	e7f0      	b.n	8006776 <_vfiprintf_r+0x1da>
 8006794:	ab03      	add	r3, sp, #12
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	462a      	mov	r2, r5
 800679a:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <_vfiprintf_r+0x258>)
 800679c:	a904      	add	r1, sp, #16
 800679e:	4630      	mov	r0, r6
 80067a0:	f7fd fdd8 	bl	8004354 <_printf_float>
 80067a4:	4607      	mov	r7, r0
 80067a6:	1c78      	adds	r0, r7, #1
 80067a8:	d1d6      	bne.n	8006758 <_vfiprintf_r+0x1bc>
 80067aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ac:	07d9      	lsls	r1, r3, #31
 80067ae:	d405      	bmi.n	80067bc <_vfiprintf_r+0x220>
 80067b0:	89ab      	ldrh	r3, [r5, #12]
 80067b2:	059a      	lsls	r2, r3, #22
 80067b4:	d402      	bmi.n	80067bc <_vfiprintf_r+0x220>
 80067b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067b8:	f000 faaf 	bl	8006d1a <__retarget_lock_release_recursive>
 80067bc:	89ab      	ldrh	r3, [r5, #12]
 80067be:	065b      	lsls	r3, r3, #25
 80067c0:	f53f af12 	bmi.w	80065e8 <_vfiprintf_r+0x4c>
 80067c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067c6:	e711      	b.n	80065ec <_vfiprintf_r+0x50>
 80067c8:	ab03      	add	r3, sp, #12
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	462a      	mov	r2, r5
 80067ce:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <_vfiprintf_r+0x258>)
 80067d0:	a904      	add	r1, sp, #16
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7fe f862 	bl	800489c <_printf_i>
 80067d8:	e7e4      	b.n	80067a4 <_vfiprintf_r+0x208>
 80067da:	bf00      	nop
 80067dc:	080073c4 	.word	0x080073c4
 80067e0:	080073e4 	.word	0x080073e4
 80067e4:	080073a4 	.word	0x080073a4
 80067e8:	0800724c 	.word	0x0800724c
 80067ec:	08007256 	.word	0x08007256
 80067f0:	08004355 	.word	0x08004355
 80067f4:	08006579 	.word	0x08006579
 80067f8:	08007252 	.word	0x08007252

080067fc <__swbuf_r>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	460e      	mov	r6, r1
 8006800:	4614      	mov	r4, r2
 8006802:	4605      	mov	r5, r0
 8006804:	b118      	cbz	r0, 800680e <__swbuf_r+0x12>
 8006806:	6983      	ldr	r3, [r0, #24]
 8006808:	b90b      	cbnz	r3, 800680e <__swbuf_r+0x12>
 800680a:	f000 f9e7 	bl	8006bdc <__sinit>
 800680e:	4b21      	ldr	r3, [pc, #132]	; (8006894 <__swbuf_r+0x98>)
 8006810:	429c      	cmp	r4, r3
 8006812:	d12b      	bne.n	800686c <__swbuf_r+0x70>
 8006814:	686c      	ldr	r4, [r5, #4]
 8006816:	69a3      	ldr	r3, [r4, #24]
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	071a      	lsls	r2, r3, #28
 800681e:	d52f      	bpl.n	8006880 <__swbuf_r+0x84>
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	b36b      	cbz	r3, 8006880 <__swbuf_r+0x84>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	1ac0      	subs	r0, r0, r3
 800682a:	6963      	ldr	r3, [r4, #20]
 800682c:	b2f6      	uxtb	r6, r6
 800682e:	4283      	cmp	r3, r0
 8006830:	4637      	mov	r7, r6
 8006832:	dc04      	bgt.n	800683e <__swbuf_r+0x42>
 8006834:	4621      	mov	r1, r4
 8006836:	4628      	mov	r0, r5
 8006838:	f000 f93c 	bl	8006ab4 <_fflush_r>
 800683c:	bb30      	cbnz	r0, 800688c <__swbuf_r+0x90>
 800683e:	68a3      	ldr	r3, [r4, #8]
 8006840:	3b01      	subs	r3, #1
 8006842:	60a3      	str	r3, [r4, #8]
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	6022      	str	r2, [r4, #0]
 800684a:	701e      	strb	r6, [r3, #0]
 800684c:	6963      	ldr	r3, [r4, #20]
 800684e:	3001      	adds	r0, #1
 8006850:	4283      	cmp	r3, r0
 8006852:	d004      	beq.n	800685e <__swbuf_r+0x62>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	07db      	lsls	r3, r3, #31
 8006858:	d506      	bpl.n	8006868 <__swbuf_r+0x6c>
 800685a:	2e0a      	cmp	r6, #10
 800685c:	d104      	bne.n	8006868 <__swbuf_r+0x6c>
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	f000 f927 	bl	8006ab4 <_fflush_r>
 8006866:	b988      	cbnz	r0, 800688c <__swbuf_r+0x90>
 8006868:	4638      	mov	r0, r7
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <__swbuf_r+0x9c>)
 800686e:	429c      	cmp	r4, r3
 8006870:	d101      	bne.n	8006876 <__swbuf_r+0x7a>
 8006872:	68ac      	ldr	r4, [r5, #8]
 8006874:	e7cf      	b.n	8006816 <__swbuf_r+0x1a>
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <__swbuf_r+0xa0>)
 8006878:	429c      	cmp	r4, r3
 800687a:	bf08      	it	eq
 800687c:	68ec      	ldreq	r4, [r5, #12]
 800687e:	e7ca      	b.n	8006816 <__swbuf_r+0x1a>
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f81a 	bl	80068bc <__swsetup_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	d0cb      	beq.n	8006824 <__swbuf_r+0x28>
 800688c:	f04f 37ff 	mov.w	r7, #4294967295
 8006890:	e7ea      	b.n	8006868 <__swbuf_r+0x6c>
 8006892:	bf00      	nop
 8006894:	080073c4 	.word	0x080073c4
 8006898:	080073e4 	.word	0x080073e4
 800689c:	080073a4 	.word	0x080073a4

080068a0 <__ascii_wctomb>:
 80068a0:	b149      	cbz	r1, 80068b6 <__ascii_wctomb+0x16>
 80068a2:	2aff      	cmp	r2, #255	; 0xff
 80068a4:	bf85      	ittet	hi
 80068a6:	238a      	movhi	r3, #138	; 0x8a
 80068a8:	6003      	strhi	r3, [r0, #0]
 80068aa:	700a      	strbls	r2, [r1, #0]
 80068ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80068b0:	bf98      	it	ls
 80068b2:	2001      	movls	r0, #1
 80068b4:	4770      	bx	lr
 80068b6:	4608      	mov	r0, r1
 80068b8:	4770      	bx	lr
	...

080068bc <__swsetup_r>:
 80068bc:	4b32      	ldr	r3, [pc, #200]	; (8006988 <__swsetup_r+0xcc>)
 80068be:	b570      	push	{r4, r5, r6, lr}
 80068c0:	681d      	ldr	r5, [r3, #0]
 80068c2:	4606      	mov	r6, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	b125      	cbz	r5, 80068d2 <__swsetup_r+0x16>
 80068c8:	69ab      	ldr	r3, [r5, #24]
 80068ca:	b913      	cbnz	r3, 80068d2 <__swsetup_r+0x16>
 80068cc:	4628      	mov	r0, r5
 80068ce:	f000 f985 	bl	8006bdc <__sinit>
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <__swsetup_r+0xd0>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	d10f      	bne.n	80068f8 <__swsetup_r+0x3c>
 80068d8:	686c      	ldr	r4, [r5, #4]
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e0:	0719      	lsls	r1, r3, #28
 80068e2:	d42c      	bmi.n	800693e <__swsetup_r+0x82>
 80068e4:	06dd      	lsls	r5, r3, #27
 80068e6:	d411      	bmi.n	800690c <__swsetup_r+0x50>
 80068e8:	2309      	movs	r3, #9
 80068ea:	6033      	str	r3, [r6, #0]
 80068ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	e03e      	b.n	8006976 <__swsetup_r+0xba>
 80068f8:	4b25      	ldr	r3, [pc, #148]	; (8006990 <__swsetup_r+0xd4>)
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d101      	bne.n	8006902 <__swsetup_r+0x46>
 80068fe:	68ac      	ldr	r4, [r5, #8]
 8006900:	e7eb      	b.n	80068da <__swsetup_r+0x1e>
 8006902:	4b24      	ldr	r3, [pc, #144]	; (8006994 <__swsetup_r+0xd8>)
 8006904:	429c      	cmp	r4, r3
 8006906:	bf08      	it	eq
 8006908:	68ec      	ldreq	r4, [r5, #12]
 800690a:	e7e6      	b.n	80068da <__swsetup_r+0x1e>
 800690c:	0758      	lsls	r0, r3, #29
 800690e:	d512      	bpl.n	8006936 <__swsetup_r+0x7a>
 8006910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006912:	b141      	cbz	r1, 8006926 <__swsetup_r+0x6a>
 8006914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006918:	4299      	cmp	r1, r3
 800691a:	d002      	beq.n	8006922 <__swsetup_r+0x66>
 800691c:	4630      	mov	r0, r6
 800691e:	f7ff fb31 	bl	8005f84 <_free_r>
 8006922:	2300      	movs	r3, #0
 8006924:	6363      	str	r3, [r4, #52]	; 0x34
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800692c:	81a3      	strh	r3, [r4, #12]
 800692e:	2300      	movs	r3, #0
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f043 0308 	orr.w	r3, r3, #8
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	b94b      	cbnz	r3, 8006956 <__swsetup_r+0x9a>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694c:	d003      	beq.n	8006956 <__swsetup_r+0x9a>
 800694e:	4621      	mov	r1, r4
 8006950:	4630      	mov	r0, r6
 8006952:	f000 fa09 	bl	8006d68 <__smakebuf_r>
 8006956:	89a0      	ldrh	r0, [r4, #12]
 8006958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800695c:	f010 0301 	ands.w	r3, r0, #1
 8006960:	d00a      	beq.n	8006978 <__swsetup_r+0xbc>
 8006962:	2300      	movs	r3, #0
 8006964:	60a3      	str	r3, [r4, #8]
 8006966:	6963      	ldr	r3, [r4, #20]
 8006968:	425b      	negs	r3, r3
 800696a:	61a3      	str	r3, [r4, #24]
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	b943      	cbnz	r3, 8006982 <__swsetup_r+0xc6>
 8006970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006974:	d1ba      	bne.n	80068ec <__swsetup_r+0x30>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	0781      	lsls	r1, r0, #30
 800697a:	bf58      	it	pl
 800697c:	6963      	ldrpl	r3, [r4, #20]
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	e7f4      	b.n	800696c <__swsetup_r+0xb0>
 8006982:	2000      	movs	r0, #0
 8006984:	e7f7      	b.n	8006976 <__swsetup_r+0xba>
 8006986:	bf00      	nop
 8006988:	2000000c 	.word	0x2000000c
 800698c:	080073c4 	.word	0x080073c4
 8006990:	080073e4 	.word	0x080073e4
 8006994:	080073a4 	.word	0x080073a4

08006998 <abort>:
 8006998:	b508      	push	{r3, lr}
 800699a:	2006      	movs	r0, #6
 800699c:	f000 fa54 	bl	8006e48 <raise>
 80069a0:	2001      	movs	r0, #1
 80069a2:	f7fb f80f 	bl	80019c4 <_exit>
	...

080069a8 <__sflush_r>:
 80069a8:	898a      	ldrh	r2, [r1, #12]
 80069aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ae:	4605      	mov	r5, r0
 80069b0:	0710      	lsls	r0, r2, #28
 80069b2:	460c      	mov	r4, r1
 80069b4:	d458      	bmi.n	8006a68 <__sflush_r+0xc0>
 80069b6:	684b      	ldr	r3, [r1, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dc05      	bgt.n	80069c8 <__sflush_r+0x20>
 80069bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dc02      	bgt.n	80069c8 <__sflush_r+0x20>
 80069c2:	2000      	movs	r0, #0
 80069c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	d0f9      	beq.n	80069c2 <__sflush_r+0x1a>
 80069ce:	2300      	movs	r3, #0
 80069d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069d4:	682f      	ldr	r7, [r5, #0]
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	d032      	beq.n	8006a40 <__sflush_r+0x98>
 80069da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	075a      	lsls	r2, r3, #29
 80069e0:	d505      	bpl.n	80069ee <__sflush_r+0x46>
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	1ac0      	subs	r0, r0, r3
 80069e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069e8:	b10b      	cbz	r3, 80069ee <__sflush_r+0x46>
 80069ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069ec:	1ac0      	subs	r0, r0, r3
 80069ee:	2300      	movs	r3, #0
 80069f0:	4602      	mov	r2, r0
 80069f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f4:	6a21      	ldr	r1, [r4, #32]
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b0      	blx	r6
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	d106      	bne.n	8006a0e <__sflush_r+0x66>
 8006a00:	6829      	ldr	r1, [r5, #0]
 8006a02:	291d      	cmp	r1, #29
 8006a04:	d82c      	bhi.n	8006a60 <__sflush_r+0xb8>
 8006a06:	4a2a      	ldr	r2, [pc, #168]	; (8006ab0 <__sflush_r+0x108>)
 8006a08:	40ca      	lsrs	r2, r1
 8006a0a:	07d6      	lsls	r6, r2, #31
 8006a0c:	d528      	bpl.n	8006a60 <__sflush_r+0xb8>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	6062      	str	r2, [r4, #4]
 8006a12:	04d9      	lsls	r1, r3, #19
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	6022      	str	r2, [r4, #0]
 8006a18:	d504      	bpl.n	8006a24 <__sflush_r+0x7c>
 8006a1a:	1c42      	adds	r2, r0, #1
 8006a1c:	d101      	bne.n	8006a22 <__sflush_r+0x7a>
 8006a1e:	682b      	ldr	r3, [r5, #0]
 8006a20:	b903      	cbnz	r3, 8006a24 <__sflush_r+0x7c>
 8006a22:	6560      	str	r0, [r4, #84]	; 0x54
 8006a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a26:	602f      	str	r7, [r5, #0]
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	d0ca      	beq.n	80069c2 <__sflush_r+0x1a>
 8006a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a30:	4299      	cmp	r1, r3
 8006a32:	d002      	beq.n	8006a3a <__sflush_r+0x92>
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff faa5 	bl	8005f84 <_free_r>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a3e:	e7c1      	b.n	80069c4 <__sflush_r+0x1c>
 8006a40:	6a21      	ldr	r1, [r4, #32]
 8006a42:	2301      	movs	r3, #1
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b0      	blx	r6
 8006a48:	1c41      	adds	r1, r0, #1
 8006a4a:	d1c7      	bne.n	80069dc <__sflush_r+0x34>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0c4      	beq.n	80069dc <__sflush_r+0x34>
 8006a52:	2b1d      	cmp	r3, #29
 8006a54:	d001      	beq.n	8006a5a <__sflush_r+0xb2>
 8006a56:	2b16      	cmp	r3, #22
 8006a58:	d101      	bne.n	8006a5e <__sflush_r+0xb6>
 8006a5a:	602f      	str	r7, [r5, #0]
 8006a5c:	e7b1      	b.n	80069c2 <__sflush_r+0x1a>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	e7ad      	b.n	80069c4 <__sflush_r+0x1c>
 8006a68:	690f      	ldr	r7, [r1, #16]
 8006a6a:	2f00      	cmp	r7, #0
 8006a6c:	d0a9      	beq.n	80069c2 <__sflush_r+0x1a>
 8006a6e:	0793      	lsls	r3, r2, #30
 8006a70:	680e      	ldr	r6, [r1, #0]
 8006a72:	bf08      	it	eq
 8006a74:	694b      	ldreq	r3, [r1, #20]
 8006a76:	600f      	str	r7, [r1, #0]
 8006a78:	bf18      	it	ne
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	eba6 0807 	sub.w	r8, r6, r7
 8006a80:	608b      	str	r3, [r1, #8]
 8006a82:	f1b8 0f00 	cmp.w	r8, #0
 8006a86:	dd9c      	ble.n	80069c2 <__sflush_r+0x1a>
 8006a88:	6a21      	ldr	r1, [r4, #32]
 8006a8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a8c:	4643      	mov	r3, r8
 8006a8e:	463a      	mov	r2, r7
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b0      	blx	r6
 8006a94:	2800      	cmp	r0, #0
 8006a96:	dc06      	bgt.n	8006aa6 <__sflush_r+0xfe>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	e78e      	b.n	80069c4 <__sflush_r+0x1c>
 8006aa6:	4407      	add	r7, r0
 8006aa8:	eba8 0800 	sub.w	r8, r8, r0
 8006aac:	e7e9      	b.n	8006a82 <__sflush_r+0xda>
 8006aae:	bf00      	nop
 8006ab0:	20400001 	.word	0x20400001

08006ab4 <_fflush_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	690b      	ldr	r3, [r1, #16]
 8006ab8:	4605      	mov	r5, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	b913      	cbnz	r3, 8006ac4 <_fflush_r+0x10>
 8006abe:	2500      	movs	r5, #0
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	b118      	cbz	r0, 8006ace <_fflush_r+0x1a>
 8006ac6:	6983      	ldr	r3, [r0, #24]
 8006ac8:	b90b      	cbnz	r3, 8006ace <_fflush_r+0x1a>
 8006aca:	f000 f887 	bl	8006bdc <__sinit>
 8006ace:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <_fflush_r+0x6c>)
 8006ad0:	429c      	cmp	r4, r3
 8006ad2:	d11b      	bne.n	8006b0c <_fflush_r+0x58>
 8006ad4:	686c      	ldr	r4, [r5, #4]
 8006ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0ef      	beq.n	8006abe <_fflush_r+0xa>
 8006ade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ae0:	07d0      	lsls	r0, r2, #31
 8006ae2:	d404      	bmi.n	8006aee <_fflush_r+0x3a>
 8006ae4:	0599      	lsls	r1, r3, #22
 8006ae6:	d402      	bmi.n	8006aee <_fflush_r+0x3a>
 8006ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aea:	f000 f915 	bl	8006d18 <__retarget_lock_acquire_recursive>
 8006aee:	4628      	mov	r0, r5
 8006af0:	4621      	mov	r1, r4
 8006af2:	f7ff ff59 	bl	80069a8 <__sflush_r>
 8006af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af8:	07da      	lsls	r2, r3, #31
 8006afa:	4605      	mov	r5, r0
 8006afc:	d4e0      	bmi.n	8006ac0 <_fflush_r+0xc>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	059b      	lsls	r3, r3, #22
 8006b02:	d4dd      	bmi.n	8006ac0 <_fflush_r+0xc>
 8006b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b06:	f000 f908 	bl	8006d1a <__retarget_lock_release_recursive>
 8006b0a:	e7d9      	b.n	8006ac0 <_fflush_r+0xc>
 8006b0c:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <_fflush_r+0x70>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	d101      	bne.n	8006b16 <_fflush_r+0x62>
 8006b12:	68ac      	ldr	r4, [r5, #8]
 8006b14:	e7df      	b.n	8006ad6 <_fflush_r+0x22>
 8006b16:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <_fflush_r+0x74>)
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	bf08      	it	eq
 8006b1c:	68ec      	ldreq	r4, [r5, #12]
 8006b1e:	e7da      	b.n	8006ad6 <_fflush_r+0x22>
 8006b20:	080073c4 	.word	0x080073c4
 8006b24:	080073e4 	.word	0x080073e4
 8006b28:	080073a4 	.word	0x080073a4

08006b2c <std>:
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	e9c0 3300 	strd	r3, r3, [r0]
 8006b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b3a:	6083      	str	r3, [r0, #8]
 8006b3c:	8181      	strh	r1, [r0, #12]
 8006b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b40:	81c2      	strh	r2, [r0, #14]
 8006b42:	6183      	str	r3, [r0, #24]
 8006b44:	4619      	mov	r1, r3
 8006b46:	2208      	movs	r2, #8
 8006b48:	305c      	adds	r0, #92	; 0x5c
 8006b4a:	f7fd fb5b 	bl	8004204 <memset>
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <std+0x38>)
 8006b50:	6263      	str	r3, [r4, #36]	; 0x24
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <std+0x3c>)
 8006b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <std+0x40>)
 8006b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <std+0x44>)
 8006b5c:	6224      	str	r4, [r4, #32]
 8006b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b60:	bd10      	pop	{r4, pc}
 8006b62:	bf00      	nop
 8006b64:	08006e81 	.word	0x08006e81
 8006b68:	08006ea3 	.word	0x08006ea3
 8006b6c:	08006edb 	.word	0x08006edb
 8006b70:	08006eff 	.word	0x08006eff

08006b74 <_cleanup_r>:
 8006b74:	4901      	ldr	r1, [pc, #4]	; (8006b7c <_cleanup_r+0x8>)
 8006b76:	f000 b8af 	b.w	8006cd8 <_fwalk_reent>
 8006b7a:	bf00      	nop
 8006b7c:	08006ab5 	.word	0x08006ab5

08006b80 <__sfmoreglue>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	2268      	movs	r2, #104	; 0x68
 8006b84:	1e4d      	subs	r5, r1, #1
 8006b86:	4355      	muls	r5, r2
 8006b88:	460e      	mov	r6, r1
 8006b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b8e:	f7ff fa65 	bl	800605c <_malloc_r>
 8006b92:	4604      	mov	r4, r0
 8006b94:	b140      	cbz	r0, 8006ba8 <__sfmoreglue+0x28>
 8006b96:	2100      	movs	r1, #0
 8006b98:	e9c0 1600 	strd	r1, r6, [r0]
 8006b9c:	300c      	adds	r0, #12
 8006b9e:	60a0      	str	r0, [r4, #8]
 8006ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ba4:	f7fd fb2e 	bl	8004204 <memset>
 8006ba8:	4620      	mov	r0, r4
 8006baa:	bd70      	pop	{r4, r5, r6, pc}

08006bac <__sfp_lock_acquire>:
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <__sfp_lock_acquire+0x8>)
 8006bae:	f000 b8b3 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	2000030d 	.word	0x2000030d

08006bb8 <__sfp_lock_release>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__sfp_lock_release+0x8>)
 8006bba:	f000 b8ae 	b.w	8006d1a <__retarget_lock_release_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	2000030d 	.word	0x2000030d

08006bc4 <__sinit_lock_acquire>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__sinit_lock_acquire+0x8>)
 8006bc6:	f000 b8a7 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	2000030e 	.word	0x2000030e

08006bd0 <__sinit_lock_release>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__sinit_lock_release+0x8>)
 8006bd2:	f000 b8a2 	b.w	8006d1a <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	2000030e 	.word	0x2000030e

08006bdc <__sinit>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4604      	mov	r4, r0
 8006be0:	f7ff fff0 	bl	8006bc4 <__sinit_lock_acquire>
 8006be4:	69a3      	ldr	r3, [r4, #24]
 8006be6:	b11b      	cbz	r3, 8006bf0 <__sinit+0x14>
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f7ff bff0 	b.w	8006bd0 <__sinit_lock_release>
 8006bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8006bf6:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <__sinit+0x68>)
 8006bf8:	4a13      	ldr	r2, [pc, #76]	; (8006c48 <__sinit+0x6c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	bf04      	itt	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	61a3      	streq	r3, [r4, #24]
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f820 	bl	8006c4c <__sfp>
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 f81c 	bl	8006c4c <__sfp>
 8006c14:	60a0      	str	r0, [r4, #8]
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f818 	bl	8006c4c <__sfp>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	60e0      	str	r0, [r4, #12]
 8006c20:	2104      	movs	r1, #4
 8006c22:	6860      	ldr	r0, [r4, #4]
 8006c24:	f7ff ff82 	bl	8006b2c <std>
 8006c28:	68a0      	ldr	r0, [r4, #8]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	2109      	movs	r1, #9
 8006c2e:	f7ff ff7d 	bl	8006b2c <std>
 8006c32:	68e0      	ldr	r0, [r4, #12]
 8006c34:	2202      	movs	r2, #2
 8006c36:	2112      	movs	r1, #18
 8006c38:	f7ff ff78 	bl	8006b2c <std>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61a3      	str	r3, [r4, #24]
 8006c40:	e7d2      	b.n	8006be8 <__sinit+0xc>
 8006c42:	bf00      	nop
 8006c44:	08007028 	.word	0x08007028
 8006c48:	08006b75 	.word	0x08006b75

08006c4c <__sfp>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	4607      	mov	r7, r0
 8006c50:	f7ff ffac 	bl	8006bac <__sfp_lock_acquire>
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <__sfp+0x84>)
 8006c56:	681e      	ldr	r6, [r3, #0]
 8006c58:	69b3      	ldr	r3, [r6, #24]
 8006c5a:	b913      	cbnz	r3, 8006c62 <__sfp+0x16>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff ffbd 	bl	8006bdc <__sinit>
 8006c62:	3648      	adds	r6, #72	; 0x48
 8006c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	d503      	bpl.n	8006c74 <__sfp+0x28>
 8006c6c:	6833      	ldr	r3, [r6, #0]
 8006c6e:	b30b      	cbz	r3, 8006cb4 <__sfp+0x68>
 8006c70:	6836      	ldr	r6, [r6, #0]
 8006c72:	e7f7      	b.n	8006c64 <__sfp+0x18>
 8006c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c78:	b9d5      	cbnz	r5, 8006cb0 <__sfp+0x64>
 8006c7a:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <__sfp+0x88>)
 8006c7c:	60e3      	str	r3, [r4, #12]
 8006c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c82:	6665      	str	r5, [r4, #100]	; 0x64
 8006c84:	f000 f847 	bl	8006d16 <__retarget_lock_init_recursive>
 8006c88:	f7ff ff96 	bl	8006bb8 <__sfp_lock_release>
 8006c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c94:	6025      	str	r5, [r4, #0]
 8006c96:	61a5      	str	r5, [r4, #24]
 8006c98:	2208      	movs	r2, #8
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ca0:	f7fd fab0 	bl	8004204 <memset>
 8006ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cac:	4620      	mov	r0, r4
 8006cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb0:	3468      	adds	r4, #104	; 0x68
 8006cb2:	e7d9      	b.n	8006c68 <__sfp+0x1c>
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f7ff ff62 	bl	8006b80 <__sfmoreglue>
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	6030      	str	r0, [r6, #0]
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1d5      	bne.n	8006c70 <__sfp+0x24>
 8006cc4:	f7ff ff78 	bl	8006bb8 <__sfp_lock_release>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	e7ee      	b.n	8006cac <__sfp+0x60>
 8006cce:	bf00      	nop
 8006cd0:	08007028 	.word	0x08007028
 8006cd4:	ffff0001 	.word	0xffff0001

08006cd8 <_fwalk_reent>:
 8006cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4606      	mov	r6, r0
 8006cde:	4688      	mov	r8, r1
 8006ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ce4:	2700      	movs	r7, #0
 8006ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cea:	f1b9 0901 	subs.w	r9, r9, #1
 8006cee:	d505      	bpl.n	8006cfc <_fwalk_reent+0x24>
 8006cf0:	6824      	ldr	r4, [r4, #0]
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d1f7      	bne.n	8006ce6 <_fwalk_reent+0xe>
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfc:	89ab      	ldrh	r3, [r5, #12]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d907      	bls.n	8006d12 <_fwalk_reent+0x3a>
 8006d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d06:	3301      	adds	r3, #1
 8006d08:	d003      	beq.n	8006d12 <_fwalk_reent+0x3a>
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	47c0      	blx	r8
 8006d10:	4307      	orrs	r7, r0
 8006d12:	3568      	adds	r5, #104	; 0x68
 8006d14:	e7e9      	b.n	8006cea <_fwalk_reent+0x12>

08006d16 <__retarget_lock_init_recursive>:
 8006d16:	4770      	bx	lr

08006d18 <__retarget_lock_acquire_recursive>:
 8006d18:	4770      	bx	lr

08006d1a <__retarget_lock_release_recursive>:
 8006d1a:	4770      	bx	lr

08006d1c <__swhatbuf_r>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	460e      	mov	r6, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	b096      	sub	sp, #88	; 0x58
 8006d28:	4614      	mov	r4, r2
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	da08      	bge.n	8006d40 <__swhatbuf_r+0x24>
 8006d2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	602a      	str	r2, [r5, #0]
 8006d36:	061a      	lsls	r2, r3, #24
 8006d38:	d410      	bmi.n	8006d5c <__swhatbuf_r+0x40>
 8006d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d3e:	e00e      	b.n	8006d5e <__swhatbuf_r+0x42>
 8006d40:	466a      	mov	r2, sp
 8006d42:	f000 f903 	bl	8006f4c <_fstat_r>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	dbf1      	blt.n	8006d2e <__swhatbuf_r+0x12>
 8006d4a:	9a01      	ldr	r2, [sp, #4]
 8006d4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d54:	425a      	negs	r2, r3
 8006d56:	415a      	adcs	r2, r3
 8006d58:	602a      	str	r2, [r5, #0]
 8006d5a:	e7ee      	b.n	8006d3a <__swhatbuf_r+0x1e>
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	2000      	movs	r0, #0
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	b016      	add	sp, #88	; 0x58
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d68 <__smakebuf_r>:
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d6c:	079d      	lsls	r5, r3, #30
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	d507      	bpl.n	8006d84 <__smakebuf_r+0x1c>
 8006d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	b002      	add	sp, #8
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	ab01      	add	r3, sp, #4
 8006d86:	466a      	mov	r2, sp
 8006d88:	f7ff ffc8 	bl	8006d1c <__swhatbuf_r>
 8006d8c:	9900      	ldr	r1, [sp, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff f963 	bl	800605c <_malloc_r>
 8006d96:	b948      	cbnz	r0, 8006dac <__smakebuf_r+0x44>
 8006d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d4ef      	bmi.n	8006d80 <__smakebuf_r+0x18>
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	e7e3      	b.n	8006d74 <__smakebuf_r+0xc>
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <__smakebuf_r+0x7c>)
 8006dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	6020      	str	r0, [r4, #0]
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	6163      	str	r3, [r4, #20]
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	6120      	str	r0, [r4, #16]
 8006dc2:	b15b      	cbz	r3, 8006ddc <__smakebuf_r+0x74>
 8006dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f8d1 	bl	8006f70 <_isatty_r>
 8006dce:	b128      	cbz	r0, 8006ddc <__smakebuf_r+0x74>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	89a0      	ldrh	r0, [r4, #12]
 8006dde:	4305      	orrs	r5, r0
 8006de0:	81a5      	strh	r5, [r4, #12]
 8006de2:	e7cd      	b.n	8006d80 <__smakebuf_r+0x18>
 8006de4:	08006b75 	.word	0x08006b75

08006de8 <_malloc_usable_size_r>:
 8006de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dec:	1f18      	subs	r0, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfbc      	itt	lt
 8006df2:	580b      	ldrlt	r3, [r1, r0]
 8006df4:	18c0      	addlt	r0, r0, r3
 8006df6:	4770      	bx	lr

08006df8 <_raise_r>:
 8006df8:	291f      	cmp	r1, #31
 8006dfa:	b538      	push	{r3, r4, r5, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	460d      	mov	r5, r1
 8006e00:	d904      	bls.n	8006e0c <_raise_r+0x14>
 8006e02:	2316      	movs	r3, #22
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e0e:	b112      	cbz	r2, 8006e16 <_raise_r+0x1e>
 8006e10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e14:	b94b      	cbnz	r3, 8006e2a <_raise_r+0x32>
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 f830 	bl	8006e7c <_getpid_r>
 8006e1c:	462a      	mov	r2, r5
 8006e1e:	4601      	mov	r1, r0
 8006e20:	4620      	mov	r0, r4
 8006e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e26:	f000 b817 	b.w	8006e58 <_kill_r>
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d00a      	beq.n	8006e44 <_raise_r+0x4c>
 8006e2e:	1c59      	adds	r1, r3, #1
 8006e30:	d103      	bne.n	8006e3a <_raise_r+0x42>
 8006e32:	2316      	movs	r3, #22
 8006e34:	6003      	str	r3, [r0, #0]
 8006e36:	2001      	movs	r0, #1
 8006e38:	e7e7      	b.n	8006e0a <_raise_r+0x12>
 8006e3a:	2400      	movs	r4, #0
 8006e3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e40:	4628      	mov	r0, r5
 8006e42:	4798      	blx	r3
 8006e44:	2000      	movs	r0, #0
 8006e46:	e7e0      	b.n	8006e0a <_raise_r+0x12>

08006e48 <raise>:
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <raise+0xc>)
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f7ff bfd3 	b.w	8006df8 <_raise_r>
 8006e52:	bf00      	nop
 8006e54:	2000000c 	.word	0x2000000c

08006e58 <_kill_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4d07      	ldr	r5, [pc, #28]	; (8006e78 <_kill_r+0x20>)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4608      	mov	r0, r1
 8006e62:	4611      	mov	r1, r2
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	f7fa fd9d 	bl	80019a4 <_kill>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d102      	bne.n	8006e74 <_kill_r+0x1c>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	b103      	cbz	r3, 8006e74 <_kill_r+0x1c>
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	bd38      	pop	{r3, r4, r5, pc}
 8006e76:	bf00      	nop
 8006e78:	20000308 	.word	0x20000308

08006e7c <_getpid_r>:
 8006e7c:	f7fa bd8a 	b.w	8001994 <_getpid>

08006e80 <__sread>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	460c      	mov	r4, r1
 8006e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e88:	f000 f894 	bl	8006fb4 <_read_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	bfab      	itete	ge
 8006e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e92:	89a3      	ldrhlt	r3, [r4, #12]
 8006e94:	181b      	addge	r3, r3, r0
 8006e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e9a:	bfac      	ite	ge
 8006e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e9e:	81a3      	strhlt	r3, [r4, #12]
 8006ea0:	bd10      	pop	{r4, pc}

08006ea2 <__swrite>:
 8006ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea6:	461f      	mov	r7, r3
 8006ea8:	898b      	ldrh	r3, [r1, #12]
 8006eaa:	05db      	lsls	r3, r3, #23
 8006eac:	4605      	mov	r5, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	d505      	bpl.n	8006ec0 <__swrite+0x1e>
 8006eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb8:	2302      	movs	r3, #2
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f000 f868 	bl	8006f90 <_lseek_r>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	4632      	mov	r2, r6
 8006ece:	463b      	mov	r3, r7
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed6:	f000 b817 	b.w	8006f08 <_write_r>

08006eda <__sseek>:
 8006eda:	b510      	push	{r4, lr}
 8006edc:	460c      	mov	r4, r1
 8006ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee2:	f000 f855 	bl	8006f90 <_lseek_r>
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	bf15      	itete	ne
 8006eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ef6:	81a3      	strheq	r3, [r4, #12]
 8006ef8:	bf18      	it	ne
 8006efa:	81a3      	strhne	r3, [r4, #12]
 8006efc:	bd10      	pop	{r4, pc}

08006efe <__sclose>:
 8006efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f02:	f000 b813 	b.w	8006f2c <_close_r>
	...

08006f08 <_write_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	; (8006f28 <_write_r+0x20>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4611      	mov	r1, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f7fa fd7b 	bl	8001a12 <_write>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_write_r+0x1e>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_write_r+0x1e>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	20000308 	.word	0x20000308

08006f2c <_close_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d06      	ldr	r5, [pc, #24]	; (8006f48 <_close_r+0x1c>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	f7fa fd87 	bl	8001a4a <_close>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_close_r+0x1a>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_close_r+0x1a>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20000308 	.word	0x20000308

08006f4c <_fstat_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	; (8006f6c <_fstat_r+0x20>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	f7fa fd82 	bl	8001a62 <_fstat>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d102      	bne.n	8006f68 <_fstat_r+0x1c>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	b103      	cbz	r3, 8006f68 <_fstat_r+0x1c>
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000308 	.word	0x20000308

08006f70 <_isatty_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d06      	ldr	r5, [pc, #24]	; (8006f8c <_isatty_r+0x1c>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fa fd81 	bl	8001a82 <_isatty>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_isatty_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_isatty_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20000308 	.word	0x20000308

08006f90 <_lseek_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d07      	ldr	r5, [pc, #28]	; (8006fb0 <_lseek_r+0x20>)
 8006f94:	4604      	mov	r4, r0
 8006f96:	4608      	mov	r0, r1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f7fa fd7a 	bl	8001a98 <_lseek>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_lseek_r+0x1e>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_lseek_r+0x1e>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	20000308 	.word	0x20000308

08006fb4 <_read_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d07      	ldr	r5, [pc, #28]	; (8006fd4 <_read_r+0x20>)
 8006fb8:	4604      	mov	r4, r0
 8006fba:	4608      	mov	r0, r1
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f7fa fd08 	bl	80019d8 <_read>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_read_r+0x1e>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_read_r+0x1e>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	20000308 	.word	0x20000308

08006fd8 <_init>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr

08006fe4 <_fini>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr
